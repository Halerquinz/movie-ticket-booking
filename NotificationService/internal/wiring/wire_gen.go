// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wiring

import (
	"NotificationService/internal/app"
	"NotificationService/internal/configs"
	"NotificationService/internal/dataaccess"
	"NotificationService/internal/dataaccess/database"
	"NotificationService/internal/dataaccess/kafka/consumer"
	"NotificationService/internal/dataaccess/kafka/producer"
	"NotificationService/internal/dataaccess/s3"
	"NotificationService/internal/handler"
	"NotificationService/internal/handler/consumers"
	"NotificationService/internal/handler/grpc"
	userservice3 "NotificationService/internal/handler/grpc/clients/booking_service"
	userservice2 "NotificationService/internal/handler/grpc/clients/movie_service"
	"NotificationService/internal/handler/grpc/clients/user_service"
	"NotificationService/internal/handler/pdf_generator"
	"NotificationService/internal/logic"
	"NotificationService/internal/utils"
	"github.com/google/wire"
)

// Injectors from wire.go:

func InitStandaloneServer(configFilePath configs.ConfigFilePath) (app.StandaloneServer, func(), error) {
	config, err := configs.NewConfig(configFilePath)
	if err != nil {
		return app.StandaloneServer{}, nil, err
	}
	configsGRPC := config.GRPC
	configsDatabase := config.Database
	databaseDatabase, cleanup, err := database.NewDatabase(configsDatabase)
	if err != nil {
		return app.StandaloneServer{}, nil, err
	}
	log := config.Log
	logger, cleanup2, err := utils.NewLogger(log)
	if err != nil {
		cleanup()
		return app.StandaloneServer{}, nil, err
	}
	notificationDataAccessor := database.NewNotificationDataAccessor(databaseDatabase, logger)
	pdfGenerator := pdfgenerator.NewPDFGenerator(logger)
	mail := config.Mail
	configsS3 := config.S3
	client, err := s3.NewClient(configsS3, logger)
	if err != nil {
		cleanup2()
		cleanup()
		return app.StandaloneServer{}, nil, err
	}
	mailer := logic.NewMailer(mail, logger, client)
	kafka := config.Kafka
	producerProducer, err := producer.NewProducer(kafka, logger)
	if err != nil {
		cleanup2()
		cleanup()
		return app.StandaloneServer{}, nil, err
	}
	notificationCreatedProducer := producer.NewNotificationCreatedProducer(producerProducer, logger)
	db, cleanup3, err := database.NewGORMDatabase(configsDatabase)
	if err != nil {
		cleanup2()
		cleanup()
		return app.StandaloneServer{}, nil, err
	}
	userServiceClient := config.UserServiceClient
	user_serviceUserServiceClient, err := userservice.NewClient(userServiceClient, logger)
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return app.StandaloneServer{}, nil, err
	}
	movieServiceClient := config.MovieServiceClient
	movie_serviceMovieServiceClient, err := userservice2.NewClient(movieServiceClient, logger)
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return app.StandaloneServer{}, nil, err
	}
	bookingServiceClient := config.BookingServiceClient
	booking_serviceBookingServiceClient, err := userservice3.NewClient(bookingServiceClient, logger)
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return app.StandaloneServer{}, nil, err
	}
	notificationLogic := logic.NewNotificationLogic(notificationDataAccessor, pdfGenerator, mailer, client, notificationCreatedProducer, logger, db, user_serviceUserServiceClient, movie_serviceMovieServiceClient, booking_serviceBookingServiceClient)
	notificationServiceServer, err := grpc.NewHandler(notificationLogic)
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return app.StandaloneServer{}, nil, err
	}
	server := grpc.NewServer(configsGRPC, notificationServiceServer)
	notificationCreatedMessageHandler := consumers.NewNotificationCreatedMessageHandler(notificationLogic, logger)
	paymentTransactionCompletedMessageHandler := consumers.NewPaymentTransactionCompletedMessageHandler(notificationLogic, logger)
	consumerConsumer, err := consumer.NewConsumer(kafka, logger)
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return app.StandaloneServer{}, nil, err
	}
	notificationServiceKafkaConsumer := consumers.NewNotificationServiceKafkaConsumer(notificationCreatedMessageHandler, paymentTransactionCompletedMessageHandler, consumerConsumer, logger)
	standaloneServer, err := app.NewStandAloneServer(server, notificationServiceKafkaConsumer, logger)
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return app.StandaloneServer{}, nil, err
	}
	return standaloneServer, func() {
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}

// wire.go:

var WireSet = wire.NewSet(app.WireSet, configs.WireSet, dataaccess.WireSet, handler.WireSet, logic.WireSet, utils.WireSet)
