// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: movie_service/movie_service.proto

package movie_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	MovieService_CreateMovieGenre_FullMethodName                  = "/movie_service.MovieService/CreateMovieGenre"
	MovieService_UpdateMovieGenre_FullMethodName                  = "/movie_service.MovieService/UpdateMovieGenre"
	MovieService_DeleteMovieGenre_FullMethodName                  = "/movie_service.MovieService/DeleteMovieGenre"
	MovieService_CreateMovie_FullMethodName                       = "/movie_service.MovieService/CreateMovie"
	MovieService_GetMovie_FullMethodName                          = "/movie_service.MovieService/GetMovie"
	MovieService_DeleteMovie_FullMethodName                       = "/movie_service.MovieService/DeleteMovie"
	MovieService_GetCurrentShowingMovieList_FullMethodName        = "/movie_service.MovieService/GetCurrentShowingMovieList"
	MovieService_GetUpcomingMovieList_FullMethodName              = "/movie_service.MovieService/GetUpcomingMovieList"
	MovieService_CreateScreenType_FullMethodName                  = "/movie_service.MovieService/CreateScreenType"
	MovieService_DeleteScreenType_FullMethodName                  = "/movie_service.MovieService/DeleteScreenType"
	MovieService_CreateTheater_FullMethodName                     = "/movie_service.MovieService/CreateTheater"
	MovieService_GetTheater_FullMethodName                        = "/movie_service.MovieService/GetTheater"
	MovieService_GetTheaterList_FullMethodName                    = "/movie_service.MovieService/GetTheaterList"
	MovieService_DeleteTheater_FullMethodName                     = "/movie_service.MovieService/DeleteTheater"
	MovieService_CreateScreen_FullMethodName                      = "/movie_service.MovieService/CreateScreen"
	MovieService_GetScreen_FullMethodName                         = "/movie_service.MovieService/GetScreen"
	MovieService_DeleteScreen_FullMethodName                      = "/movie_service.MovieService/DeleteScreen"
	MovieService_GetSeat_FullMethodName                           = "/movie_service.MovieService/GetSeat"
	MovieService_CreateAllSeatOfScreen_FullMethodName             = "/movie_service.MovieService/CreateAllSeatOfScreen"
	MovieService_CreateShowtime_FullMethodName                    = "/movie_service.MovieService/CreateShowtime"
	MovieService_DeleteShowtime_FullMethodName                    = "/movie_service.MovieService/DeleteShowtime"
	MovieService_GetShowtime_FullMethodName                       = "/movie_service.MovieService/GetShowtime"
	MovieService_GetShowtimeListOfTheaterByMovieId_FullMethodName = "/movie_service.MovieService/GetShowtimeListOfTheaterByMovieId"
	MovieService_GetShowtimeListOfTheater_FullMethodName          = "/movie_service.MovieService/GetShowtimeListOfTheater"
	MovieService_GetShowtimeMetadata_FullMethodName               = "/movie_service.MovieService/GetShowtimeMetadata"
	MovieService_GetPrice_FullMethodName                          = "/movie_service.MovieService/GetPrice"
	MovieService_SearchMovie_FullMethodName                       = "/movie_service.MovieService/SearchMovie"
)

// MovieServiceClient is the client API for MovieService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MovieServiceClient interface {
	CreateMovieGenre(ctx context.Context, in *CreateMovieGenreRequest, opts ...grpc.CallOption) (*CreateMovieGenreResponse, error)
	UpdateMovieGenre(ctx context.Context, in *UpdateMovieGenreRequest, opts ...grpc.CallOption) (*UpdateMovieGenreResponse, error)
	DeleteMovieGenre(ctx context.Context, in *DeleteMovieGenreRequest, opts ...grpc.CallOption) (*DeleteMovieGenreResponse, error)
	CreateMovie(ctx context.Context, in *CreateMovieRequest, opts ...grpc.CallOption) (*CreateMovieResponse, error)
	GetMovie(ctx context.Context, in *GetMovieRequest, opts ...grpc.CallOption) (*GetMovieResponse, error)
	DeleteMovie(ctx context.Context, in *DeleteMovieRequest, opts ...grpc.CallOption) (*DeleteMovieResponse, error)
	GetCurrentShowingMovieList(ctx context.Context, in *GetCurrentShowingMovieListRequest, opts ...grpc.CallOption) (*GetCurrentShowingMovieListResponse, error)
	GetUpcomingMovieList(ctx context.Context, in *GetUpcomingMovieListRequest, opts ...grpc.CallOption) (*GetUpcomingMovieListResponse, error)
	CreateScreenType(ctx context.Context, in *CreateScreenTypeRequest, opts ...grpc.CallOption) (*CreateScreenTypeResponse, error)
	DeleteScreenType(ctx context.Context, in *DeleteScreenTypeRequest, opts ...grpc.CallOption) (*DeleteScreenTypeResponse, error)
	CreateTheater(ctx context.Context, in *CreateTheaterRequest, opts ...grpc.CallOption) (*CreateTheaterResponse, error)
	GetTheater(ctx context.Context, in *GetTheaterRequest, opts ...grpc.CallOption) (*GetTheaterResponse, error)
	GetTheaterList(ctx context.Context, in *GetTheaterListRequest, opts ...grpc.CallOption) (*GetTheaterListResponse, error)
	DeleteTheater(ctx context.Context, in *DeleteTheaterRequest, opts ...grpc.CallOption) (*DeleteTheaterResponse, error)
	CreateScreen(ctx context.Context, in *CreateScreenRequest, opts ...grpc.CallOption) (*CreateScreenResponse, error)
	GetScreen(ctx context.Context, in *GetScreenRequest, opts ...grpc.CallOption) (*GetScreenResponse, error)
	DeleteScreen(ctx context.Context, in *DeleteScreenRequest, opts ...grpc.CallOption) (*DeleteScreenResponse, error)
	GetSeat(ctx context.Context, in *GetSeatRequest, opts ...grpc.CallOption) (*GetSeatResponse, error)
	CreateAllSeatOfScreen(ctx context.Context, in *CreateAllSeatOfScreenRequest, opts ...grpc.CallOption) (*CreateAllSeatOfScreenResponse, error)
	CreateShowtime(ctx context.Context, in *CreateShowtimeRequest, opts ...grpc.CallOption) (*CreateShowtimeResponse, error)
	DeleteShowtime(ctx context.Context, in *DeleteShowtimeRequest, opts ...grpc.CallOption) (*DeleteShowtimeResponse, error)
	GetShowtime(ctx context.Context, in *GetShowtimeRequest, opts ...grpc.CallOption) (*GetShowtimeResponse, error)
	GetShowtimeListOfTheaterByMovieId(ctx context.Context, in *GetShowtimeListOfTheaterByMovieIdRequest, opts ...grpc.CallOption) (*GetShowtimeListOfTheaterByMovieIdResponse, error)
	GetShowtimeListOfTheater(ctx context.Context, in *GetShowtimeListOfTheaterRequest, opts ...grpc.CallOption) (*GetShowtimeListOfTheaterResponse, error)
	GetShowtimeMetadata(ctx context.Context, in *GetShowtimeMetadataRequest, opts ...grpc.CallOption) (*GetShowtimeMetadataResponse, error)
	GetPrice(ctx context.Context, in *GetPriceRequest, opts ...grpc.CallOption) (*GetPriceResponse, error)
	SearchMovie(ctx context.Context, in *SearchMovieRequest, opts ...grpc.CallOption) (*SearchMovieResponse, error)
}

type movieServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMovieServiceClient(cc grpc.ClientConnInterface) MovieServiceClient {
	return &movieServiceClient{cc}
}

func (c *movieServiceClient) CreateMovieGenre(ctx context.Context, in *CreateMovieGenreRequest, opts ...grpc.CallOption) (*CreateMovieGenreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateMovieGenreResponse)
	err := c.cc.Invoke(ctx, MovieService_CreateMovieGenre_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) UpdateMovieGenre(ctx context.Context, in *UpdateMovieGenreRequest, opts ...grpc.CallOption) (*UpdateMovieGenreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateMovieGenreResponse)
	err := c.cc.Invoke(ctx, MovieService_UpdateMovieGenre_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) DeleteMovieGenre(ctx context.Context, in *DeleteMovieGenreRequest, opts ...grpc.CallOption) (*DeleteMovieGenreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteMovieGenreResponse)
	err := c.cc.Invoke(ctx, MovieService_DeleteMovieGenre_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) CreateMovie(ctx context.Context, in *CreateMovieRequest, opts ...grpc.CallOption) (*CreateMovieResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateMovieResponse)
	err := c.cc.Invoke(ctx, MovieService_CreateMovie_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) GetMovie(ctx context.Context, in *GetMovieRequest, opts ...grpc.CallOption) (*GetMovieResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMovieResponse)
	err := c.cc.Invoke(ctx, MovieService_GetMovie_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) DeleteMovie(ctx context.Context, in *DeleteMovieRequest, opts ...grpc.CallOption) (*DeleteMovieResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteMovieResponse)
	err := c.cc.Invoke(ctx, MovieService_DeleteMovie_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) GetCurrentShowingMovieList(ctx context.Context, in *GetCurrentShowingMovieListRequest, opts ...grpc.CallOption) (*GetCurrentShowingMovieListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCurrentShowingMovieListResponse)
	err := c.cc.Invoke(ctx, MovieService_GetCurrentShowingMovieList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) GetUpcomingMovieList(ctx context.Context, in *GetUpcomingMovieListRequest, opts ...grpc.CallOption) (*GetUpcomingMovieListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUpcomingMovieListResponse)
	err := c.cc.Invoke(ctx, MovieService_GetUpcomingMovieList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) CreateScreenType(ctx context.Context, in *CreateScreenTypeRequest, opts ...grpc.CallOption) (*CreateScreenTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateScreenTypeResponse)
	err := c.cc.Invoke(ctx, MovieService_CreateScreenType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) DeleteScreenType(ctx context.Context, in *DeleteScreenTypeRequest, opts ...grpc.CallOption) (*DeleteScreenTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteScreenTypeResponse)
	err := c.cc.Invoke(ctx, MovieService_DeleteScreenType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) CreateTheater(ctx context.Context, in *CreateTheaterRequest, opts ...grpc.CallOption) (*CreateTheaterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTheaterResponse)
	err := c.cc.Invoke(ctx, MovieService_CreateTheater_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) GetTheater(ctx context.Context, in *GetTheaterRequest, opts ...grpc.CallOption) (*GetTheaterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTheaterResponse)
	err := c.cc.Invoke(ctx, MovieService_GetTheater_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) GetTheaterList(ctx context.Context, in *GetTheaterListRequest, opts ...grpc.CallOption) (*GetTheaterListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTheaterListResponse)
	err := c.cc.Invoke(ctx, MovieService_GetTheaterList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) DeleteTheater(ctx context.Context, in *DeleteTheaterRequest, opts ...grpc.CallOption) (*DeleteTheaterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTheaterResponse)
	err := c.cc.Invoke(ctx, MovieService_DeleteTheater_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) CreateScreen(ctx context.Context, in *CreateScreenRequest, opts ...grpc.CallOption) (*CreateScreenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateScreenResponse)
	err := c.cc.Invoke(ctx, MovieService_CreateScreen_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) GetScreen(ctx context.Context, in *GetScreenRequest, opts ...grpc.CallOption) (*GetScreenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetScreenResponse)
	err := c.cc.Invoke(ctx, MovieService_GetScreen_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) DeleteScreen(ctx context.Context, in *DeleteScreenRequest, opts ...grpc.CallOption) (*DeleteScreenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteScreenResponse)
	err := c.cc.Invoke(ctx, MovieService_DeleteScreen_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) GetSeat(ctx context.Context, in *GetSeatRequest, opts ...grpc.CallOption) (*GetSeatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSeatResponse)
	err := c.cc.Invoke(ctx, MovieService_GetSeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) CreateAllSeatOfScreen(ctx context.Context, in *CreateAllSeatOfScreenRequest, opts ...grpc.CallOption) (*CreateAllSeatOfScreenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAllSeatOfScreenResponse)
	err := c.cc.Invoke(ctx, MovieService_CreateAllSeatOfScreen_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) CreateShowtime(ctx context.Context, in *CreateShowtimeRequest, opts ...grpc.CallOption) (*CreateShowtimeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateShowtimeResponse)
	err := c.cc.Invoke(ctx, MovieService_CreateShowtime_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) DeleteShowtime(ctx context.Context, in *DeleteShowtimeRequest, opts ...grpc.CallOption) (*DeleteShowtimeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteShowtimeResponse)
	err := c.cc.Invoke(ctx, MovieService_DeleteShowtime_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) GetShowtime(ctx context.Context, in *GetShowtimeRequest, opts ...grpc.CallOption) (*GetShowtimeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetShowtimeResponse)
	err := c.cc.Invoke(ctx, MovieService_GetShowtime_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) GetShowtimeListOfTheaterByMovieId(ctx context.Context, in *GetShowtimeListOfTheaterByMovieIdRequest, opts ...grpc.CallOption) (*GetShowtimeListOfTheaterByMovieIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetShowtimeListOfTheaterByMovieIdResponse)
	err := c.cc.Invoke(ctx, MovieService_GetShowtimeListOfTheaterByMovieId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) GetShowtimeListOfTheater(ctx context.Context, in *GetShowtimeListOfTheaterRequest, opts ...grpc.CallOption) (*GetShowtimeListOfTheaterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetShowtimeListOfTheaterResponse)
	err := c.cc.Invoke(ctx, MovieService_GetShowtimeListOfTheater_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) GetShowtimeMetadata(ctx context.Context, in *GetShowtimeMetadataRequest, opts ...grpc.CallOption) (*GetShowtimeMetadataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetShowtimeMetadataResponse)
	err := c.cc.Invoke(ctx, MovieService_GetShowtimeMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) GetPrice(ctx context.Context, in *GetPriceRequest, opts ...grpc.CallOption) (*GetPriceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPriceResponse)
	err := c.cc.Invoke(ctx, MovieService_GetPrice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) SearchMovie(ctx context.Context, in *SearchMovieRequest, opts ...grpc.CallOption) (*SearchMovieResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchMovieResponse)
	err := c.cc.Invoke(ctx, MovieService_SearchMovie_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MovieServiceServer is the server API for MovieService service.
// All implementations must embed UnimplementedMovieServiceServer
// for forward compatibility
type MovieServiceServer interface {
	CreateMovieGenre(context.Context, *CreateMovieGenreRequest) (*CreateMovieGenreResponse, error)
	UpdateMovieGenre(context.Context, *UpdateMovieGenreRequest) (*UpdateMovieGenreResponse, error)
	DeleteMovieGenre(context.Context, *DeleteMovieGenreRequest) (*DeleteMovieGenreResponse, error)
	CreateMovie(context.Context, *CreateMovieRequest) (*CreateMovieResponse, error)
	GetMovie(context.Context, *GetMovieRequest) (*GetMovieResponse, error)
	DeleteMovie(context.Context, *DeleteMovieRequest) (*DeleteMovieResponse, error)
	GetCurrentShowingMovieList(context.Context, *GetCurrentShowingMovieListRequest) (*GetCurrentShowingMovieListResponse, error)
	GetUpcomingMovieList(context.Context, *GetUpcomingMovieListRequest) (*GetUpcomingMovieListResponse, error)
	CreateScreenType(context.Context, *CreateScreenTypeRequest) (*CreateScreenTypeResponse, error)
	DeleteScreenType(context.Context, *DeleteScreenTypeRequest) (*DeleteScreenTypeResponse, error)
	CreateTheater(context.Context, *CreateTheaterRequest) (*CreateTheaterResponse, error)
	GetTheater(context.Context, *GetTheaterRequest) (*GetTheaterResponse, error)
	GetTheaterList(context.Context, *GetTheaterListRequest) (*GetTheaterListResponse, error)
	DeleteTheater(context.Context, *DeleteTheaterRequest) (*DeleteTheaterResponse, error)
	CreateScreen(context.Context, *CreateScreenRequest) (*CreateScreenResponse, error)
	GetScreen(context.Context, *GetScreenRequest) (*GetScreenResponse, error)
	DeleteScreen(context.Context, *DeleteScreenRequest) (*DeleteScreenResponse, error)
	GetSeat(context.Context, *GetSeatRequest) (*GetSeatResponse, error)
	CreateAllSeatOfScreen(context.Context, *CreateAllSeatOfScreenRequest) (*CreateAllSeatOfScreenResponse, error)
	CreateShowtime(context.Context, *CreateShowtimeRequest) (*CreateShowtimeResponse, error)
	DeleteShowtime(context.Context, *DeleteShowtimeRequest) (*DeleteShowtimeResponse, error)
	GetShowtime(context.Context, *GetShowtimeRequest) (*GetShowtimeResponse, error)
	GetShowtimeListOfTheaterByMovieId(context.Context, *GetShowtimeListOfTheaterByMovieIdRequest) (*GetShowtimeListOfTheaterByMovieIdResponse, error)
	GetShowtimeListOfTheater(context.Context, *GetShowtimeListOfTheaterRequest) (*GetShowtimeListOfTheaterResponse, error)
	GetShowtimeMetadata(context.Context, *GetShowtimeMetadataRequest) (*GetShowtimeMetadataResponse, error)
	GetPrice(context.Context, *GetPriceRequest) (*GetPriceResponse, error)
	SearchMovie(context.Context, *SearchMovieRequest) (*SearchMovieResponse, error)
	mustEmbedUnimplementedMovieServiceServer()
}

// UnimplementedMovieServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMovieServiceServer struct {
}

func (UnimplementedMovieServiceServer) CreateMovieGenre(context.Context, *CreateMovieGenreRequest) (*CreateMovieGenreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMovieGenre not implemented")
}
func (UnimplementedMovieServiceServer) UpdateMovieGenre(context.Context, *UpdateMovieGenreRequest) (*UpdateMovieGenreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMovieGenre not implemented")
}
func (UnimplementedMovieServiceServer) DeleteMovieGenre(context.Context, *DeleteMovieGenreRequest) (*DeleteMovieGenreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMovieGenre not implemented")
}
func (UnimplementedMovieServiceServer) CreateMovie(context.Context, *CreateMovieRequest) (*CreateMovieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMovie not implemented")
}
func (UnimplementedMovieServiceServer) GetMovie(context.Context, *GetMovieRequest) (*GetMovieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMovie not implemented")
}
func (UnimplementedMovieServiceServer) DeleteMovie(context.Context, *DeleteMovieRequest) (*DeleteMovieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMovie not implemented")
}
func (UnimplementedMovieServiceServer) GetCurrentShowingMovieList(context.Context, *GetCurrentShowingMovieListRequest) (*GetCurrentShowingMovieListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentShowingMovieList not implemented")
}
func (UnimplementedMovieServiceServer) GetUpcomingMovieList(context.Context, *GetUpcomingMovieListRequest) (*GetUpcomingMovieListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUpcomingMovieList not implemented")
}
func (UnimplementedMovieServiceServer) CreateScreenType(context.Context, *CreateScreenTypeRequest) (*CreateScreenTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateScreenType not implemented")
}
func (UnimplementedMovieServiceServer) DeleteScreenType(context.Context, *DeleteScreenTypeRequest) (*DeleteScreenTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteScreenType not implemented")
}
func (UnimplementedMovieServiceServer) CreateTheater(context.Context, *CreateTheaterRequest) (*CreateTheaterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTheater not implemented")
}
func (UnimplementedMovieServiceServer) GetTheater(context.Context, *GetTheaterRequest) (*GetTheaterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTheater not implemented")
}
func (UnimplementedMovieServiceServer) GetTheaterList(context.Context, *GetTheaterListRequest) (*GetTheaterListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTheaterList not implemented")
}
func (UnimplementedMovieServiceServer) DeleteTheater(context.Context, *DeleteTheaterRequest) (*DeleteTheaterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTheater not implemented")
}
func (UnimplementedMovieServiceServer) CreateScreen(context.Context, *CreateScreenRequest) (*CreateScreenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateScreen not implemented")
}
func (UnimplementedMovieServiceServer) GetScreen(context.Context, *GetScreenRequest) (*GetScreenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScreen not implemented")
}
func (UnimplementedMovieServiceServer) DeleteScreen(context.Context, *DeleteScreenRequest) (*DeleteScreenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteScreen not implemented")
}
func (UnimplementedMovieServiceServer) GetSeat(context.Context, *GetSeatRequest) (*GetSeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSeat not implemented")
}
func (UnimplementedMovieServiceServer) CreateAllSeatOfScreen(context.Context, *CreateAllSeatOfScreenRequest) (*CreateAllSeatOfScreenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAllSeatOfScreen not implemented")
}
func (UnimplementedMovieServiceServer) CreateShowtime(context.Context, *CreateShowtimeRequest) (*CreateShowtimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShowtime not implemented")
}
func (UnimplementedMovieServiceServer) DeleteShowtime(context.Context, *DeleteShowtimeRequest) (*DeleteShowtimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteShowtime not implemented")
}
func (UnimplementedMovieServiceServer) GetShowtime(context.Context, *GetShowtimeRequest) (*GetShowtimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShowtime not implemented")
}
func (UnimplementedMovieServiceServer) GetShowtimeListOfTheaterByMovieId(context.Context, *GetShowtimeListOfTheaterByMovieIdRequest) (*GetShowtimeListOfTheaterByMovieIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShowtimeListOfTheaterByMovieId not implemented")
}
func (UnimplementedMovieServiceServer) GetShowtimeListOfTheater(context.Context, *GetShowtimeListOfTheaterRequest) (*GetShowtimeListOfTheaterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShowtimeListOfTheater not implemented")
}
func (UnimplementedMovieServiceServer) GetShowtimeMetadata(context.Context, *GetShowtimeMetadataRequest) (*GetShowtimeMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShowtimeMetadata not implemented")
}
func (UnimplementedMovieServiceServer) GetPrice(context.Context, *GetPriceRequest) (*GetPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrice not implemented")
}
func (UnimplementedMovieServiceServer) SearchMovie(context.Context, *SearchMovieRequest) (*SearchMovieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchMovie not implemented")
}
func (UnimplementedMovieServiceServer) mustEmbedUnimplementedMovieServiceServer() {}

// UnsafeMovieServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MovieServiceServer will
// result in compilation errors.
type UnsafeMovieServiceServer interface {
	mustEmbedUnimplementedMovieServiceServer()
}

func RegisterMovieServiceServer(s grpc.ServiceRegistrar, srv MovieServiceServer) {
	s.RegisterService(&MovieService_ServiceDesc, srv)
}

func _MovieService_CreateMovieGenre_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMovieGenreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).CreateMovieGenre(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieService_CreateMovieGenre_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).CreateMovieGenre(ctx, req.(*CreateMovieGenreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_UpdateMovieGenre_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMovieGenreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).UpdateMovieGenre(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieService_UpdateMovieGenre_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).UpdateMovieGenre(ctx, req.(*UpdateMovieGenreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_DeleteMovieGenre_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMovieGenreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).DeleteMovieGenre(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieService_DeleteMovieGenre_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).DeleteMovieGenre(ctx, req.(*DeleteMovieGenreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_CreateMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).CreateMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieService_CreateMovie_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).CreateMovie(ctx, req.(*CreateMovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_GetMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).GetMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieService_GetMovie_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).GetMovie(ctx, req.(*GetMovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_DeleteMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).DeleteMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieService_DeleteMovie_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).DeleteMovie(ctx, req.(*DeleteMovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_GetCurrentShowingMovieList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentShowingMovieListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).GetCurrentShowingMovieList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieService_GetCurrentShowingMovieList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).GetCurrentShowingMovieList(ctx, req.(*GetCurrentShowingMovieListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_GetUpcomingMovieList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUpcomingMovieListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).GetUpcomingMovieList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieService_GetUpcomingMovieList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).GetUpcomingMovieList(ctx, req.(*GetUpcomingMovieListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_CreateScreenType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateScreenTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).CreateScreenType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieService_CreateScreenType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).CreateScreenType(ctx, req.(*CreateScreenTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_DeleteScreenType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteScreenTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).DeleteScreenType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieService_DeleteScreenType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).DeleteScreenType(ctx, req.(*DeleteScreenTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_CreateTheater_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTheaterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).CreateTheater(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieService_CreateTheater_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).CreateTheater(ctx, req.(*CreateTheaterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_GetTheater_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTheaterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).GetTheater(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieService_GetTheater_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).GetTheater(ctx, req.(*GetTheaterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_GetTheaterList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTheaterListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).GetTheaterList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieService_GetTheaterList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).GetTheaterList(ctx, req.(*GetTheaterListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_DeleteTheater_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTheaterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).DeleteTheater(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieService_DeleteTheater_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).DeleteTheater(ctx, req.(*DeleteTheaterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_CreateScreen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateScreenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).CreateScreen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieService_CreateScreen_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).CreateScreen(ctx, req.(*CreateScreenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_GetScreen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScreenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).GetScreen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieService_GetScreen_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).GetScreen(ctx, req.(*GetScreenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_DeleteScreen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteScreenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).DeleteScreen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieService_DeleteScreen_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).DeleteScreen(ctx, req.(*DeleteScreenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_GetSeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).GetSeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieService_GetSeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).GetSeat(ctx, req.(*GetSeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_CreateAllSeatOfScreen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAllSeatOfScreenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).CreateAllSeatOfScreen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieService_CreateAllSeatOfScreen_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).CreateAllSeatOfScreen(ctx, req.(*CreateAllSeatOfScreenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_CreateShowtime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShowtimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).CreateShowtime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieService_CreateShowtime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).CreateShowtime(ctx, req.(*CreateShowtimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_DeleteShowtime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteShowtimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).DeleteShowtime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieService_DeleteShowtime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).DeleteShowtime(ctx, req.(*DeleteShowtimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_GetShowtime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShowtimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).GetShowtime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieService_GetShowtime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).GetShowtime(ctx, req.(*GetShowtimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_GetShowtimeListOfTheaterByMovieId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShowtimeListOfTheaterByMovieIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).GetShowtimeListOfTheaterByMovieId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieService_GetShowtimeListOfTheaterByMovieId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).GetShowtimeListOfTheaterByMovieId(ctx, req.(*GetShowtimeListOfTheaterByMovieIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_GetShowtimeListOfTheater_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShowtimeListOfTheaterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).GetShowtimeListOfTheater(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieService_GetShowtimeListOfTheater_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).GetShowtimeListOfTheater(ctx, req.(*GetShowtimeListOfTheaterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_GetShowtimeMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShowtimeMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).GetShowtimeMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieService_GetShowtimeMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).GetShowtimeMetadata(ctx, req.(*GetShowtimeMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_GetPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).GetPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieService_GetPrice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).GetPrice(ctx, req.(*GetPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_SearchMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchMovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).SearchMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieService_SearchMovie_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).SearchMovie(ctx, req.(*SearchMovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MovieService_ServiceDesc is the grpc.ServiceDesc for MovieService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MovieService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "movie_service.MovieService",
	HandlerType: (*MovieServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMovieGenre",
			Handler:    _MovieService_CreateMovieGenre_Handler,
		},
		{
			MethodName: "UpdateMovieGenre",
			Handler:    _MovieService_UpdateMovieGenre_Handler,
		},
		{
			MethodName: "DeleteMovieGenre",
			Handler:    _MovieService_DeleteMovieGenre_Handler,
		},
		{
			MethodName: "CreateMovie",
			Handler:    _MovieService_CreateMovie_Handler,
		},
		{
			MethodName: "GetMovie",
			Handler:    _MovieService_GetMovie_Handler,
		},
		{
			MethodName: "DeleteMovie",
			Handler:    _MovieService_DeleteMovie_Handler,
		},
		{
			MethodName: "GetCurrentShowingMovieList",
			Handler:    _MovieService_GetCurrentShowingMovieList_Handler,
		},
		{
			MethodName: "GetUpcomingMovieList",
			Handler:    _MovieService_GetUpcomingMovieList_Handler,
		},
		{
			MethodName: "CreateScreenType",
			Handler:    _MovieService_CreateScreenType_Handler,
		},
		{
			MethodName: "DeleteScreenType",
			Handler:    _MovieService_DeleteScreenType_Handler,
		},
		{
			MethodName: "CreateTheater",
			Handler:    _MovieService_CreateTheater_Handler,
		},
		{
			MethodName: "GetTheater",
			Handler:    _MovieService_GetTheater_Handler,
		},
		{
			MethodName: "GetTheaterList",
			Handler:    _MovieService_GetTheaterList_Handler,
		},
		{
			MethodName: "DeleteTheater",
			Handler:    _MovieService_DeleteTheater_Handler,
		},
		{
			MethodName: "CreateScreen",
			Handler:    _MovieService_CreateScreen_Handler,
		},
		{
			MethodName: "GetScreen",
			Handler:    _MovieService_GetScreen_Handler,
		},
		{
			MethodName: "DeleteScreen",
			Handler:    _MovieService_DeleteScreen_Handler,
		},
		{
			MethodName: "GetSeat",
			Handler:    _MovieService_GetSeat_Handler,
		},
		{
			MethodName: "CreateAllSeatOfScreen",
			Handler:    _MovieService_CreateAllSeatOfScreen_Handler,
		},
		{
			MethodName: "CreateShowtime",
			Handler:    _MovieService_CreateShowtime_Handler,
		},
		{
			MethodName: "DeleteShowtime",
			Handler:    _MovieService_DeleteShowtime_Handler,
		},
		{
			MethodName: "GetShowtime",
			Handler:    _MovieService_GetShowtime_Handler,
		},
		{
			MethodName: "GetShowtimeListOfTheaterByMovieId",
			Handler:    _MovieService_GetShowtimeListOfTheaterByMovieId_Handler,
		},
		{
			MethodName: "GetShowtimeListOfTheater",
			Handler:    _MovieService_GetShowtimeListOfTheater_Handler,
		},
		{
			MethodName: "GetShowtimeMetadata",
			Handler:    _MovieService_GetShowtimeMetadata_Handler,
		},
		{
			MethodName: "GetPrice",
			Handler:    _MovieService_GetPrice_Handler,
		},
		{
			MethodName: "SearchMovie",
			Handler:    _MovieService_SearchMovie_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "movie_service/movie_service.proto",
}
