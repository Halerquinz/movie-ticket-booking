// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: movie_service/movie_service.proto

package movie_service

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on MovieGenre with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MovieGenre) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MovieGenre with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MovieGenreMultiError, or
// nil if none found.
func (m *MovieGenre) ValidateAll() error {
	return m.validate(true)
}

func (m *MovieGenre) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for DisplayName

	if len(errors) > 0 {
		return MovieGenreMultiError(errors)
	}

	return nil
}

// MovieGenreMultiError is an error wrapping multiple validation errors
// returned by MovieGenre.ValidateAll() if the designated constraints aren't met.
type MovieGenreMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MovieGenreMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MovieGenreMultiError) AllErrors() []error { return m }

// MovieGenreValidationError is the validation error returned by
// MovieGenre.Validate if the designated constraints aren't met.
type MovieGenreValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MovieGenreValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MovieGenreValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MovieGenreValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MovieGenreValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MovieGenreValidationError) ErrorName() string { return "MovieGenreValidationError" }

// Error satisfies the builtin error interface
func (e MovieGenreValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMovieGenre.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MovieGenreValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MovieGenreValidationError{}

// Validate checks the field values on MovieType with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MovieType) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MovieType with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MovieTypeMultiError, or nil
// if none found.
func (m *MovieType) ValidateAll() error {
	return m.validate(true)
}

func (m *MovieType) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for DisplayName

	if len(errors) > 0 {
		return MovieTypeMultiError(errors)
	}

	return nil
}

// MovieTypeMultiError is an error wrapping multiple validation errors returned
// by MovieType.ValidateAll() if the designated constraints aren't met.
type MovieTypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MovieTypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MovieTypeMultiError) AllErrors() []error { return m }

// MovieTypeValidationError is the validation error returned by
// MovieType.Validate if the designated constraints aren't met.
type MovieTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MovieTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MovieTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MovieTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MovieTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MovieTypeValidationError) ErrorName() string { return "MovieTypeValidationError" }

// Error satisfies the builtin error interface
func (e MovieTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMovieType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MovieTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MovieTypeValidationError{}

// Validate checks the field values on MovieImage with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MovieImage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MovieImage with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MovieImageMultiError, or
// nil if none found.
func (m *MovieImage) ValidateAll() error {
	return m.validate(true)
}

func (m *MovieImage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for OfMovieId

	// no validation rules for OriginalFileName

	// no validation rules for OriginalImageFileName

	if len(errors) > 0 {
		return MovieImageMultiError(errors)
	}

	return nil
}

// MovieImageMultiError is an error wrapping multiple validation errors
// returned by MovieImage.ValidateAll() if the designated constraints aren't met.
type MovieImageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MovieImageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MovieImageMultiError) AllErrors() []error { return m }

// MovieImageValidationError is the validation error returned by
// MovieImage.Validate if the designated constraints aren't met.
type MovieImageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MovieImageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MovieImageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MovieImageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MovieImageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MovieImageValidationError) ErrorName() string { return "MovieImageValidationError" }

// Error satisfies the builtin error interface
func (e MovieImageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMovieImage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MovieImageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MovieImageValidationError{}

// Validate checks the field values on MoviePoster with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MoviePoster) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MoviePoster with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MoviePosterMultiError, or
// nil if none found.
func (m *MoviePoster) ValidateAll() error {
	return m.validate(true)
}

func (m *MoviePoster) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OfMovieId

	// no validation rules for OriginalFileName

	// no validation rules for OriginalImageFileName

	if len(errors) > 0 {
		return MoviePosterMultiError(errors)
	}

	return nil
}

// MoviePosterMultiError is an error wrapping multiple validation errors
// returned by MoviePoster.ValidateAll() if the designated constraints aren't met.
type MoviePosterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MoviePosterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MoviePosterMultiError) AllErrors() []error { return m }

// MoviePosterValidationError is the validation error returned by
// MoviePoster.Validate if the designated constraints aren't met.
type MoviePosterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MoviePosterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MoviePosterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MoviePosterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MoviePosterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MoviePosterValidationError) ErrorName() string { return "MoviePosterValidationError" }

// Error satisfies the builtin error interface
func (e MoviePosterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMoviePoster.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MoviePosterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MoviePosterValidationError{}

// Validate checks the field values on MovieTrailer with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MovieTrailer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MovieTrailer with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MovieTrailerMultiError, or
// nil if none found.
func (m *MovieTrailer) ValidateAll() error {
	return m.validate(true)
}

func (m *MovieTrailer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OfMovieId

	// no validation rules for YoutubeLinkUrl

	if len(errors) > 0 {
		return MovieTrailerMultiError(errors)
	}

	return nil
}

// MovieTrailerMultiError is an error wrapping multiple validation errors
// returned by MovieTrailer.ValidateAll() if the designated constraints aren't met.
type MovieTrailerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MovieTrailerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MovieTrailerMultiError) AllErrors() []error { return m }

// MovieTrailerValidationError is the validation error returned by
// MovieTrailer.Validate if the designated constraints aren't met.
type MovieTrailerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MovieTrailerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MovieTrailerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MovieTrailerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MovieTrailerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MovieTrailerValidationError) ErrorName() string { return "MovieTrailerValidationError" }

// Error satisfies the builtin error interface
func (e MovieTrailerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMovieTrailer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MovieTrailerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MovieTrailerValidationError{}

// Validate checks the field values on Movie with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Movie) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Movie with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MovieMultiError, or nil if none found.
func (m *Movie) ValidateAll() error {
	return m.validate(true)
}

func (m *Movie) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Description

	// no validation rules for Duration

	// no validation rules for ReleaseDate

	if all {
		switch v := interface{}(m.GetPoster()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MovieValidationError{
					field:  "Poster",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MovieValidationError{
					field:  "Poster",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPoster()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MovieValidationError{
				field:  "Poster",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTrailer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MovieValidationError{
					field:  "Trailer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MovieValidationError{
					field:  "Trailer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTrailer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MovieValidationError{
				field:  "Trailer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMovieType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MovieValidationError{
					field:  "MovieType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MovieValidationError{
					field:  "MovieType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMovieType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MovieValidationError{
				field:  "MovieType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MovieMultiError(errors)
	}

	return nil
}

// MovieMultiError is an error wrapping multiple validation errors returned by
// Movie.ValidateAll() if the designated constraints aren't met.
type MovieMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MovieMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MovieMultiError) AllErrors() []error { return m }

// MovieValidationError is the validation error returned by Movie.Validate if
// the designated constraints aren't met.
type MovieValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MovieValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MovieValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MovieValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MovieValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MovieValidationError) ErrorName() string { return "MovieValidationError" }

// Error satisfies the builtin error interface
func (e MovieValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMovie.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MovieValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MovieValidationError{}

// Validate checks the field values on ShowtimeDayOfTheWeek with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ShowtimeDayOfTheWeek) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShowtimeDayOfTheWeek with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ShowtimeDayOfTheWeekMultiError, or nil if none found.
func (m *ShowtimeDayOfTheWeek) ValidateAll() error {
	return m.validate(true)
}

func (m *ShowtimeDayOfTheWeek) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for DisplayName

	if len(errors) > 0 {
		return ShowtimeDayOfTheWeekMultiError(errors)
	}

	return nil
}

// ShowtimeDayOfTheWeekMultiError is an error wrapping multiple validation
// errors returned by ShowtimeDayOfTheWeek.ValidateAll() if the designated
// constraints aren't met.
type ShowtimeDayOfTheWeekMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShowtimeDayOfTheWeekMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShowtimeDayOfTheWeekMultiError) AllErrors() []error { return m }

// ShowtimeDayOfTheWeekValidationError is the validation error returned by
// ShowtimeDayOfTheWeek.Validate if the designated constraints aren't met.
type ShowtimeDayOfTheWeekValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShowtimeDayOfTheWeekValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShowtimeDayOfTheWeekValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShowtimeDayOfTheWeekValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShowtimeDayOfTheWeekValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShowtimeDayOfTheWeekValidationError) ErrorName() string {
	return "ShowtimeDayOfTheWeekValidationError"
}

// Error satisfies the builtin error interface
func (e ShowtimeDayOfTheWeekValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShowtimeDayOfTheWeek.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShowtimeDayOfTheWeekValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShowtimeDayOfTheWeekValidationError{}

// Validate checks the field values on ShowtimeSlot with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ShowtimeSlot) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShowtimeSlot with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ShowtimeSlotMultiError, or
// nil if none found.
func (m *ShowtimeSlot) ValidateAll() error {
	return m.validate(true)
}

func (m *ShowtimeSlot) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for DisplayName

	if len(errors) > 0 {
		return ShowtimeSlotMultiError(errors)
	}

	return nil
}

// ShowtimeSlotMultiError is an error wrapping multiple validation errors
// returned by ShowtimeSlot.ValidateAll() if the designated constraints aren't met.
type ShowtimeSlotMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShowtimeSlotMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShowtimeSlotMultiError) AllErrors() []error { return m }

// ShowtimeSlotValidationError is the validation error returned by
// ShowtimeSlot.Validate if the designated constraints aren't met.
type ShowtimeSlotValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShowtimeSlotValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShowtimeSlotValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShowtimeSlotValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShowtimeSlotValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShowtimeSlotValidationError) ErrorName() string { return "ShowtimeSlotValidationError" }

// Error satisfies the builtin error interface
func (e ShowtimeSlotValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShowtimeSlot.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShowtimeSlotValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShowtimeSlotValidationError{}

// Validate checks the field values on Showtime with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Showtime) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Showtime with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ShowtimeMultiError, or nil
// if none found.
func (m *Showtime) ValidateAll() error {
	return m.validate(true)
}

func (m *Showtime) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for OfMovieId

	// no validation rules for OfScreenId

	// no validation rules for TimeStart

	// no validation rules for TimeEnd

	if all {
		switch v := interface{}(m.GetShowtimeSlot()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShowtimeValidationError{
					field:  "ShowtimeSlot",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShowtimeValidationError{
					field:  "ShowtimeSlot",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShowtimeSlot()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShowtimeValidationError{
				field:  "ShowtimeSlot",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetShowtimeDayOfTheWeek()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShowtimeValidationError{
					field:  "ShowtimeDayOfTheWeek",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShowtimeValidationError{
					field:  "ShowtimeDayOfTheWeek",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShowtimeDayOfTheWeek()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShowtimeValidationError{
				field:  "ShowtimeDayOfTheWeek",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ShowtimeMultiError(errors)
	}

	return nil
}

// ShowtimeMultiError is an error wrapping multiple validation errors returned
// by Showtime.ValidateAll() if the designated constraints aren't met.
type ShowtimeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShowtimeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShowtimeMultiError) AllErrors() []error { return m }

// ShowtimeValidationError is the validation error returned by
// Showtime.Validate if the designated constraints aren't met.
type ShowtimeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShowtimeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShowtimeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShowtimeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShowtimeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShowtimeValidationError) ErrorName() string { return "ShowtimeValidationError" }

// Error satisfies the builtin error interface
func (e ShowtimeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShowtime.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShowtimeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShowtimeValidationError{}

// Validate checks the field values on Theater with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Theater) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Theater with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TheaterMultiError, or nil if none found.
func (m *Theater) ValidateAll() error {
	return m.validate(true)
}

func (m *Theater) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for DisplayName

	// no validation rules for Location

	// no validation rules for ScreenCount

	// no validation rules for SeatCount

	if len(errors) > 0 {
		return TheaterMultiError(errors)
	}

	return nil
}

// TheaterMultiError is an error wrapping multiple validation errors returned
// by Theater.ValidateAll() if the designated constraints aren't met.
type TheaterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TheaterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TheaterMultiError) AllErrors() []error { return m }

// TheaterValidationError is the validation error returned by Theater.Validate
// if the designated constraints aren't met.
type TheaterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TheaterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TheaterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TheaterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TheaterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TheaterValidationError) ErrorName() string { return "TheaterValidationError" }

// Error satisfies the builtin error interface
func (e TheaterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTheater.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TheaterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TheaterValidationError{}

// Validate checks the field values on ScreenType with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ScreenType) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScreenType with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ScreenTypeMultiError, or
// nil if none found.
func (m *ScreenType) ValidateAll() error {
	return m.validate(true)
}

func (m *ScreenType) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for DisplayName

	// no validation rules for Description

	// no validation rules for SeatCount

	// no validation rules for RowCount

	// no validation rules for SeatOfRowCount

	if len(errors) > 0 {
		return ScreenTypeMultiError(errors)
	}

	return nil
}

// ScreenTypeMultiError is an error wrapping multiple validation errors
// returned by ScreenType.ValidateAll() if the designated constraints aren't met.
type ScreenTypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScreenTypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScreenTypeMultiError) AllErrors() []error { return m }

// ScreenTypeValidationError is the validation error returned by
// ScreenType.Validate if the designated constraints aren't met.
type ScreenTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScreenTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScreenTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScreenTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScreenTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScreenTypeValidationError) ErrorName() string { return "ScreenTypeValidationError" }

// Error satisfies the builtin error interface
func (e ScreenTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScreenType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScreenTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScreenTypeValidationError{}

// Validate checks the field values on Screen with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Screen) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Screen with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ScreenMultiError, or nil if none found.
func (m *Screen) ValidateAll() error {
	return m.validate(true)
}

func (m *Screen) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for OfTheaterId

	if all {
		switch v := interface{}(m.GetScreenType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ScreenValidationError{
					field:  "ScreenType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ScreenValidationError{
					field:  "ScreenType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetScreenType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScreenValidationError{
				field:  "ScreenType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DisplayName

	if len(errors) > 0 {
		return ScreenMultiError(errors)
	}

	return nil
}

// ScreenMultiError is an error wrapping multiple validation errors returned by
// Screen.ValidateAll() if the designated constraints aren't met.
type ScreenMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScreenMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScreenMultiError) AllErrors() []error { return m }

// ScreenValidationError is the validation error returned by Screen.Validate if
// the designated constraints aren't met.
type ScreenValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScreenValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScreenValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScreenValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScreenValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScreenValidationError) ErrorName() string { return "ScreenValidationError" }

// Error satisfies the builtin error interface
func (e ScreenValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScreen.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScreenValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScreenValidationError{}

// Validate checks the field values on SeatType with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SeatType) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SeatType with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SeatTypeMultiError, or nil
// if none found.
func (m *SeatType) ValidateAll() error {
	return m.validate(true)
}

func (m *SeatType) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for DisplayName

	if len(errors) > 0 {
		return SeatTypeMultiError(errors)
	}

	return nil
}

// SeatTypeMultiError is an error wrapping multiple validation errors returned
// by SeatType.ValidateAll() if the designated constraints aren't met.
type SeatTypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SeatTypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SeatTypeMultiError) AllErrors() []error { return m }

// SeatTypeValidationError is the validation error returned by
// SeatType.Validate if the designated constraints aren't met.
type SeatTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SeatTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SeatTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SeatTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SeatTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SeatTypeValidationError) ErrorName() string { return "SeatTypeValidationError" }

// Error satisfies the builtin error interface
func (e SeatTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSeatType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SeatTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SeatTypeValidationError{}

// Validate checks the field values on Seat with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Seat) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Seat with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SeatMultiError, or nil if none found.
func (m *Seat) ValidateAll() error {
	return m.validate(true)
}

func (m *Seat) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetSeatType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SeatValidationError{
					field:  "SeatType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SeatValidationError{
					field:  "SeatType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSeatType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SeatValidationError{
				field:  "SeatType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for OfScreenId

	// no validation rules for Column

	// no validation rules for Row

	// no validation rules for No

	if len(errors) > 0 {
		return SeatMultiError(errors)
	}

	return nil
}

// SeatMultiError is an error wrapping multiple validation errors returned by
// Seat.ValidateAll() if the designated constraints aren't met.
type SeatMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SeatMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SeatMultiError) AllErrors() []error { return m }

// SeatValidationError is the validation error returned by Seat.Validate if the
// designated constraints aren't met.
type SeatValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SeatValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SeatValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SeatValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SeatValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SeatValidationError) ErrorName() string { return "SeatValidationError" }

// Error satisfies the builtin error interface
func (e SeatValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSeat.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SeatValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SeatValidationError{}

// Validate checks the field values on CreateMovieGenreRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateMovieGenreRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMovieGenreRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateMovieGenreRequestMultiError, or nil if none found.
func (m *CreateMovieGenreRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMovieGenreRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DisplayName

	if len(errors) > 0 {
		return CreateMovieGenreRequestMultiError(errors)
	}

	return nil
}

// CreateMovieGenreRequestMultiError is an error wrapping multiple validation
// errors returned by CreateMovieGenreRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateMovieGenreRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMovieGenreRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMovieGenreRequestMultiError) AllErrors() []error { return m }

// CreateMovieGenreRequestValidationError is the validation error returned by
// CreateMovieGenreRequest.Validate if the designated constraints aren't met.
type CreateMovieGenreRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMovieGenreRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMovieGenreRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMovieGenreRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMovieGenreRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMovieGenreRequestValidationError) ErrorName() string {
	return "CreateMovieGenreRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMovieGenreRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMovieGenreRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMovieGenreRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMovieGenreRequestValidationError{}

// Validate checks the field values on CreateMovieGenreResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateMovieGenreResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMovieGenreResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateMovieGenreResponseMultiError, or nil if none found.
func (m *CreateMovieGenreResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMovieGenreResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMovieGenre()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateMovieGenreResponseValidationError{
					field:  "MovieGenre",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateMovieGenreResponseValidationError{
					field:  "MovieGenre",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMovieGenre()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateMovieGenreResponseValidationError{
				field:  "MovieGenre",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateMovieGenreResponseMultiError(errors)
	}

	return nil
}

// CreateMovieGenreResponseMultiError is an error wrapping multiple validation
// errors returned by CreateMovieGenreResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateMovieGenreResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMovieGenreResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMovieGenreResponseMultiError) AllErrors() []error { return m }

// CreateMovieGenreResponseValidationError is the validation error returned by
// CreateMovieGenreResponse.Validate if the designated constraints aren't met.
type CreateMovieGenreResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMovieGenreResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMovieGenreResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMovieGenreResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMovieGenreResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMovieGenreResponseValidationError) ErrorName() string {
	return "CreateMovieGenreResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMovieGenreResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMovieGenreResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMovieGenreResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMovieGenreResponseValidationError{}

// Validate checks the field values on UpdateMovieGenreRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateMovieGenreRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateMovieGenreRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateMovieGenreRequestMultiError, or nil if none found.
func (m *UpdateMovieGenreRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateMovieGenreRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for DisplayName

	if len(errors) > 0 {
		return UpdateMovieGenreRequestMultiError(errors)
	}

	return nil
}

// UpdateMovieGenreRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateMovieGenreRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateMovieGenreRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateMovieGenreRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateMovieGenreRequestMultiError) AllErrors() []error { return m }

// UpdateMovieGenreRequestValidationError is the validation error returned by
// UpdateMovieGenreRequest.Validate if the designated constraints aren't met.
type UpdateMovieGenreRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMovieGenreRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMovieGenreRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMovieGenreRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateMovieGenreRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMovieGenreRequestValidationError) ErrorName() string {
	return "UpdateMovieGenreRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateMovieGenreRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMovieGenreRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMovieGenreRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateMovieGenreRequestValidationError{}

// Validate checks the field values on UpdateMovieGenreResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateMovieGenreResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateMovieGenreResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateMovieGenreResponseMultiError, or nil if none found.
func (m *UpdateMovieGenreResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateMovieGenreResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMovieGenre()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateMovieGenreResponseValidationError{
					field:  "MovieGenre",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateMovieGenreResponseValidationError{
					field:  "MovieGenre",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMovieGenre()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateMovieGenreResponseValidationError{
				field:  "MovieGenre",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateMovieGenreResponseMultiError(errors)
	}

	return nil
}

// UpdateMovieGenreResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateMovieGenreResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateMovieGenreResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateMovieGenreResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateMovieGenreResponseMultiError) AllErrors() []error { return m }

// UpdateMovieGenreResponseValidationError is the validation error returned by
// UpdateMovieGenreResponse.Validate if the designated constraints aren't met.
type UpdateMovieGenreResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMovieGenreResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMovieGenreResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMovieGenreResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateMovieGenreResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMovieGenreResponseValidationError) ErrorName() string {
	return "UpdateMovieGenreResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateMovieGenreResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMovieGenreResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMovieGenreResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateMovieGenreResponseValidationError{}

// Validate checks the field values on DeleteMovieGenreRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteMovieGenreRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteMovieGenreRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteMovieGenreRequestMultiError, or nil if none found.
func (m *DeleteMovieGenreRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteMovieGenreRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteMovieGenreRequestMultiError(errors)
	}

	return nil
}

// DeleteMovieGenreRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteMovieGenreRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteMovieGenreRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteMovieGenreRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteMovieGenreRequestMultiError) AllErrors() []error { return m }

// DeleteMovieGenreRequestValidationError is the validation error returned by
// DeleteMovieGenreRequest.Validate if the designated constraints aren't met.
type DeleteMovieGenreRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteMovieGenreRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteMovieGenreRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteMovieGenreRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteMovieGenreRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteMovieGenreRequestValidationError) ErrorName() string {
	return "DeleteMovieGenreRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteMovieGenreRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteMovieGenreRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteMovieGenreRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteMovieGenreRequestValidationError{}

// Validate checks the field values on DeleteMovieGenreResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteMovieGenreResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteMovieGenreResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteMovieGenreResponseMultiError, or nil if none found.
func (m *DeleteMovieGenreResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteMovieGenreResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteMovieGenreResponseMultiError(errors)
	}

	return nil
}

// DeleteMovieGenreResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteMovieGenreResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteMovieGenreResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteMovieGenreResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteMovieGenreResponseMultiError) AllErrors() []error { return m }

// DeleteMovieGenreResponseValidationError is the validation error returned by
// DeleteMovieGenreResponse.Validate if the designated constraints aren't met.
type DeleteMovieGenreResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteMovieGenreResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteMovieGenreResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteMovieGenreResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteMovieGenreResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteMovieGenreResponseValidationError) ErrorName() string {
	return "DeleteMovieGenreResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteMovieGenreResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteMovieGenreResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteMovieGenreResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteMovieGenreResponseValidationError{}

// Validate checks the field values on GetShowtimeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetShowtimeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetShowtimeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetShowtimeRequestMultiError, or nil if none found.
func (m *GetShowtimeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetShowtimeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ShowtimeId

	if len(errors) > 0 {
		return GetShowtimeRequestMultiError(errors)
	}

	return nil
}

// GetShowtimeRequestMultiError is an error wrapping multiple validation errors
// returned by GetShowtimeRequest.ValidateAll() if the designated constraints
// aren't met.
type GetShowtimeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetShowtimeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetShowtimeRequestMultiError) AllErrors() []error { return m }

// GetShowtimeRequestValidationError is the validation error returned by
// GetShowtimeRequest.Validate if the designated constraints aren't met.
type GetShowtimeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetShowtimeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetShowtimeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetShowtimeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetShowtimeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetShowtimeRequestValidationError) ErrorName() string {
	return "GetShowtimeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetShowtimeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetShowtimeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetShowtimeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetShowtimeRequestValidationError{}

// Validate checks the field values on GetShowtimeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetShowtimeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetShowtimeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetShowtimeResponseMultiError, or nil if none found.
func (m *GetShowtimeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetShowtimeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetShowtime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetShowtimeResponseValidationError{
					field:  "Showtime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetShowtimeResponseValidationError{
					field:  "Showtime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShowtime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetShowtimeResponseValidationError{
				field:  "Showtime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetShowtimeResponseMultiError(errors)
	}

	return nil
}

// GetShowtimeResponseMultiError is an error wrapping multiple validation
// errors returned by GetShowtimeResponse.ValidateAll() if the designated
// constraints aren't met.
type GetShowtimeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetShowtimeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetShowtimeResponseMultiError) AllErrors() []error { return m }

// GetShowtimeResponseValidationError is the validation error returned by
// GetShowtimeResponse.Validate if the designated constraints aren't met.
type GetShowtimeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetShowtimeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetShowtimeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetShowtimeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetShowtimeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetShowtimeResponseValidationError) ErrorName() string {
	return "GetShowtimeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetShowtimeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetShowtimeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetShowtimeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetShowtimeResponseValidationError{}

// Validate checks the field values on CreateImageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateImageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateImageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateImageRequestMultiError, or nil if none found.
func (m *CreateImageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateImageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OfMovieId

	// no validation rules for OriginalFileName

	// no validation rules for ImageData

	if len(errors) > 0 {
		return CreateImageRequestMultiError(errors)
	}

	return nil
}

// CreateImageRequestMultiError is an error wrapping multiple validation errors
// returned by CreateImageRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateImageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateImageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateImageRequestMultiError) AllErrors() []error { return m }

// CreateImageRequestValidationError is the validation error returned by
// CreateImageRequest.Validate if the designated constraints aren't met.
type CreateImageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateImageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateImageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateImageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateImageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateImageRequestValidationError) ErrorName() string {
	return "CreateImageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateImageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateImageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateImageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateImageRequestValidationError{}

// Validate checks the field values on CreateImageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateImageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateImageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateImageResponseMultiError, or nil if none found.
func (m *CreateImageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateImageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMovieImage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateImageResponseValidationError{
					field:  "MovieImage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateImageResponseValidationError{
					field:  "MovieImage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMovieImage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateImageResponseValidationError{
				field:  "MovieImage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateImageResponseMultiError(errors)
	}

	return nil
}

// CreateImageResponseMultiError is an error wrapping multiple validation
// errors returned by CreateImageResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateImageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateImageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateImageResponseMultiError) AllErrors() []error { return m }

// CreateImageResponseValidationError is the validation error returned by
// CreateImageResponse.Validate if the designated constraints aren't met.
type CreateImageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateImageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateImageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateImageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateImageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateImageResponseValidationError) ErrorName() string {
	return "CreateImageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateImageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateImageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateImageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateImageResponseValidationError{}

// Validate checks the field values on GetImageRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetImageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetImageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetImageRequestMultiError, or nil if none found.
func (m *GetImageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetImageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MovieId

	if len(errors) > 0 {
		return GetImageRequestMultiError(errors)
	}

	return nil
}

// GetImageRequestMultiError is an error wrapping multiple validation errors
// returned by GetImageRequest.ValidateAll() if the designated constraints
// aren't met.
type GetImageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetImageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetImageRequestMultiError) AllErrors() []error { return m }

// GetImageRequestValidationError is the validation error returned by
// GetImageRequest.Validate if the designated constraints aren't met.
type GetImageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetImageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetImageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetImageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetImageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetImageRequestValidationError) ErrorName() string { return "GetImageRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetImageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetImageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetImageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetImageRequestValidationError{}

// Validate checks the field values on GetImageResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetImageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetImageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetImageResponseMultiError, or nil if none found.
func (m *GetImageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetImageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMovieImageList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetImageResponseValidationError{
						field:  fmt.Sprintf("MovieImageList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetImageResponseValidationError{
						field:  fmt.Sprintf("MovieImageList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetImageResponseValidationError{
					field:  fmt.Sprintf("MovieImageList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetImageResponseMultiError(errors)
	}

	return nil
}

// GetImageResponseMultiError is an error wrapping multiple validation errors
// returned by GetImageResponse.ValidateAll() if the designated constraints
// aren't met.
type GetImageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetImageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetImageResponseMultiError) AllErrors() []error { return m }

// GetImageResponseValidationError is the validation error returned by
// GetImageResponse.Validate if the designated constraints aren't met.
type GetImageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetImageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetImageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetImageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetImageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetImageResponseValidationError) ErrorName() string { return "GetImageResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetImageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetImageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetImageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetImageResponseValidationError{}

// Validate checks the field values on DeleteImageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteImageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteImageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteImageRequestMultiError, or nil if none found.
func (m *DeleteImageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteImageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteImageRequestMultiError(errors)
	}

	return nil
}

// DeleteImageRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteImageRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteImageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteImageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteImageRequestMultiError) AllErrors() []error { return m }

// DeleteImageRequestValidationError is the validation error returned by
// DeleteImageRequest.Validate if the designated constraints aren't met.
type DeleteImageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteImageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteImageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteImageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteImageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteImageRequestValidationError) ErrorName() string {
	return "DeleteImageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteImageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteImageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteImageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteImageRequestValidationError{}

// Validate checks the field values on DeleteImageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteImageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteImageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteImageResponseMultiError, or nil if none found.
func (m *DeleteImageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteImageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteImageResponseMultiError(errors)
	}

	return nil
}

// DeleteImageResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteImageResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteImageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteImageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteImageResponseMultiError) AllErrors() []error { return m }

// DeleteImageResponseValidationError is the validation error returned by
// DeleteImageResponse.Validate if the designated constraints aren't met.
type DeleteImageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteImageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteImageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteImageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteImageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteImageResponseValidationError) ErrorName() string {
	return "DeleteImageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteImageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteImageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteImageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteImageResponseValidationError{}

// Validate checks the field values on CreatePosterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePosterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePosterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePosterRequestMultiError, or nil if none found.
func (m *CreatePosterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePosterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OfMovieId

	// no validation rules for OriginalFileName

	// no validation rules for ImageData

	if len(errors) > 0 {
		return CreatePosterRequestMultiError(errors)
	}

	return nil
}

// CreatePosterRequestMultiError is an error wrapping multiple validation
// errors returned by CreatePosterRequest.ValidateAll() if the designated
// constraints aren't met.
type CreatePosterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePosterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePosterRequestMultiError) AllErrors() []error { return m }

// CreatePosterRequestValidationError is the validation error returned by
// CreatePosterRequest.Validate if the designated constraints aren't met.
type CreatePosterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePosterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePosterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePosterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePosterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePosterRequestValidationError) ErrorName() string {
	return "CreatePosterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePosterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePosterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePosterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePosterRequestValidationError{}

// Validate checks the field values on CreatePosterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePosterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePosterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePosterResponseMultiError, or nil if none found.
func (m *CreatePosterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePosterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMoviePoster()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePosterResponseValidationError{
					field:  "MoviePoster",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePosterResponseValidationError{
					field:  "MoviePoster",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMoviePoster()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePosterResponseValidationError{
				field:  "MoviePoster",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePosterResponseMultiError(errors)
	}

	return nil
}

// CreatePosterResponseMultiError is an error wrapping multiple validation
// errors returned by CreatePosterResponse.ValidateAll() if the designated
// constraints aren't met.
type CreatePosterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePosterResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePosterResponseMultiError) AllErrors() []error { return m }

// CreatePosterResponseValidationError is the validation error returned by
// CreatePosterResponse.Validate if the designated constraints aren't met.
type CreatePosterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePosterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePosterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePosterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePosterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePosterResponseValidationError) ErrorName() string {
	return "CreatePosterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePosterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePosterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePosterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePosterResponseValidationError{}

// Validate checks the field values on GetPosterRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetPosterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPosterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPosterRequestMultiError, or nil if none found.
func (m *GetPosterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPosterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MovieId

	if len(errors) > 0 {
		return GetPosterRequestMultiError(errors)
	}

	return nil
}

// GetPosterRequestMultiError is an error wrapping multiple validation errors
// returned by GetPosterRequest.ValidateAll() if the designated constraints
// aren't met.
type GetPosterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPosterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPosterRequestMultiError) AllErrors() []error { return m }

// GetPosterRequestValidationError is the validation error returned by
// GetPosterRequest.Validate if the designated constraints aren't met.
type GetPosterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPosterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPosterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPosterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPosterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPosterRequestValidationError) ErrorName() string { return "GetPosterRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetPosterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPosterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPosterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPosterRequestValidationError{}

// Validate checks the field values on GetPosterResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetPosterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPosterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPosterResponseMultiError, or nil if none found.
func (m *GetPosterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPosterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMoviePoster()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPosterResponseValidationError{
					field:  "MoviePoster",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPosterResponseValidationError{
					field:  "MoviePoster",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMoviePoster()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPosterResponseValidationError{
				field:  "MoviePoster",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPosterResponseMultiError(errors)
	}

	return nil
}

// GetPosterResponseMultiError is an error wrapping multiple validation errors
// returned by GetPosterResponse.ValidateAll() if the designated constraints
// aren't met.
type GetPosterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPosterResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPosterResponseMultiError) AllErrors() []error { return m }

// GetPosterResponseValidationError is the validation error returned by
// GetPosterResponse.Validate if the designated constraints aren't met.
type GetPosterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPosterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPosterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPosterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPosterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPosterResponseValidationError) ErrorName() string {
	return "GetPosterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPosterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPosterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPosterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPosterResponseValidationError{}

// Validate checks the field values on DeletePosterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletePosterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePosterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePosterRequestMultiError, or nil if none found.
func (m *DeletePosterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePosterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OfMovieId

	if len(errors) > 0 {
		return DeletePosterRequestMultiError(errors)
	}

	return nil
}

// DeletePosterRequestMultiError is an error wrapping multiple validation
// errors returned by DeletePosterRequest.ValidateAll() if the designated
// constraints aren't met.
type DeletePosterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePosterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePosterRequestMultiError) AllErrors() []error { return m }

// DeletePosterRequestValidationError is the validation error returned by
// DeletePosterRequest.Validate if the designated constraints aren't met.
type DeletePosterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePosterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePosterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePosterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePosterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePosterRequestValidationError) ErrorName() string {
	return "DeletePosterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePosterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePosterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePosterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePosterRequestValidationError{}

// Validate checks the field values on DeletePosterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletePosterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePosterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePosterResponseMultiError, or nil if none found.
func (m *DeletePosterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePosterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeletePosterResponseMultiError(errors)
	}

	return nil
}

// DeletePosterResponseMultiError is an error wrapping multiple validation
// errors returned by DeletePosterResponse.ValidateAll() if the designated
// constraints aren't met.
type DeletePosterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePosterResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePosterResponseMultiError) AllErrors() []error { return m }

// DeletePosterResponseValidationError is the validation error returned by
// DeletePosterResponse.Validate if the designated constraints aren't met.
type DeletePosterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePosterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePosterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePosterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePosterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePosterResponseValidationError) ErrorName() string {
	return "DeletePosterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePosterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePosterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePosterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePosterResponseValidationError{}

// Validate checks the field values on PosterInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PosterInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PosterInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PosterInfoMultiError, or
// nil if none found.
func (m *PosterInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *PosterInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OriginalFileName

	// no validation rules for ImageData

	if len(errors) > 0 {
		return PosterInfoMultiError(errors)
	}

	return nil
}

// PosterInfoMultiError is an error wrapping multiple validation errors
// returned by PosterInfo.ValidateAll() if the designated constraints aren't met.
type PosterInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PosterInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PosterInfoMultiError) AllErrors() []error { return m }

// PosterInfoValidationError is the validation error returned by
// PosterInfo.Validate if the designated constraints aren't met.
type PosterInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PosterInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PosterInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PosterInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PosterInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PosterInfoValidationError) ErrorName() string { return "PosterInfoValidationError" }

// Error satisfies the builtin error interface
func (e PosterInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPosterInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PosterInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PosterInfoValidationError{}

// Validate checks the field values on ImageInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ImageInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImageInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ImageInfoMultiError, or nil
// if none found.
func (m *ImageInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *ImageInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OriginalFileName

	// no validation rules for ImageData

	if len(errors) > 0 {
		return ImageInfoMultiError(errors)
	}

	return nil
}

// ImageInfoMultiError is an error wrapping multiple validation errors returned
// by ImageInfo.ValidateAll() if the designated constraints aren't met.
type ImageInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImageInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImageInfoMultiError) AllErrors() []error { return m }

// ImageInfoValidationError is the validation error returned by
// ImageInfo.Validate if the designated constraints aren't met.
type ImageInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImageInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImageInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImageInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImageInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImageInfoValidationError) ErrorName() string { return "ImageInfoValidationError" }

// Error satisfies the builtin error interface
func (e ImageInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImageInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImageInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImageInfoValidationError{}

// Validate checks the field values on CreateMovieRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateMovieRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMovieRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateMovieRequestMultiError, or nil if none found.
func (m *CreateMovieRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMovieRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Title

	// no validation rules for Description

	// no validation rules for Duration

	// no validation rules for ReleaseDate

	for idx, item := range m.GetImageList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateMovieRequestValidationError{
						field:  fmt.Sprintf("ImageList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateMovieRequestValidationError{
						field:  fmt.Sprintf("ImageList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateMovieRequestValidationError{
					field:  fmt.Sprintf("ImageList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetPoster()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateMovieRequestValidationError{
					field:  "Poster",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateMovieRequestValidationError{
					field:  "Poster",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPoster()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateMovieRequestValidationError{
				field:  "Poster",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TypeId

	// no validation rules for Trailer

	if len(errors) > 0 {
		return CreateMovieRequestMultiError(errors)
	}

	return nil
}

// CreateMovieRequestMultiError is an error wrapping multiple validation errors
// returned by CreateMovieRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateMovieRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMovieRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMovieRequestMultiError) AllErrors() []error { return m }

// CreateMovieRequestValidationError is the validation error returned by
// CreateMovieRequest.Validate if the designated constraints aren't met.
type CreateMovieRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMovieRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMovieRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMovieRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMovieRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMovieRequestValidationError) ErrorName() string {
	return "CreateMovieRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMovieRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMovieRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMovieRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMovieRequestValidationError{}

// Validate checks the field values on CreateMovieResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateMovieResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMovieResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateMovieResponseMultiError, or nil if none found.
func (m *CreateMovieResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMovieResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMovie()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateMovieResponseValidationError{
					field:  "Movie",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateMovieResponseValidationError{
					field:  "Movie",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMovie()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateMovieResponseValidationError{
				field:  "Movie",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateMovieResponseMultiError(errors)
	}

	return nil
}

// CreateMovieResponseMultiError is an error wrapping multiple validation
// errors returned by CreateMovieResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateMovieResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMovieResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMovieResponseMultiError) AllErrors() []error { return m }

// CreateMovieResponseValidationError is the validation error returned by
// CreateMovieResponse.Validate if the designated constraints aren't met.
type CreateMovieResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMovieResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMovieResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMovieResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMovieResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMovieResponseValidationError) ErrorName() string {
	return "CreateMovieResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMovieResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMovieResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMovieResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMovieResponseValidationError{}

// Validate checks the field values on GetMovieRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetMovieRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMovieRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMovieRequestMultiError, or nil if none found.
func (m *GetMovieRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMovieRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetMovieRequestMultiError(errors)
	}

	return nil
}

// GetMovieRequestMultiError is an error wrapping multiple validation errors
// returned by GetMovieRequest.ValidateAll() if the designated constraints
// aren't met.
type GetMovieRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMovieRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMovieRequestMultiError) AllErrors() []error { return m }

// GetMovieRequestValidationError is the validation error returned by
// GetMovieRequest.Validate if the designated constraints aren't met.
type GetMovieRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMovieRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMovieRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMovieRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMovieRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMovieRequestValidationError) ErrorName() string { return "GetMovieRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetMovieRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMovieRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMovieRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMovieRequestValidationError{}

// Validate checks the field values on GetMovieResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetMovieResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMovieResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMovieResponseMultiError, or nil if none found.
func (m *GetMovieResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMovieResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMovie()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetMovieResponseValidationError{
					field:  "Movie",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetMovieResponseValidationError{
					field:  "Movie",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMovie()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMovieResponseValidationError{
				field:  "Movie",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetGenreList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetMovieResponseValidationError{
						field:  fmt.Sprintf("GenreList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetMovieResponseValidationError{
						field:  fmt.Sprintf("GenreList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetMovieResponseValidationError{
					field:  fmt.Sprintf("GenreList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetImageList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetMovieResponseValidationError{
						field:  fmt.Sprintf("ImageList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetMovieResponseValidationError{
						field:  fmt.Sprintf("ImageList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetMovieResponseValidationError{
					field:  fmt.Sprintf("ImageList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetMovieResponseMultiError(errors)
	}

	return nil
}

// GetMovieResponseMultiError is an error wrapping multiple validation errors
// returned by GetMovieResponse.ValidateAll() if the designated constraints
// aren't met.
type GetMovieResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMovieResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMovieResponseMultiError) AllErrors() []error { return m }

// GetMovieResponseValidationError is the validation error returned by
// GetMovieResponse.Validate if the designated constraints aren't met.
type GetMovieResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMovieResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMovieResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMovieResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMovieResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMovieResponseValidationError) ErrorName() string { return "GetMovieResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetMovieResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMovieResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMovieResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMovieResponseValidationError{}

// Validate checks the field values on GetCurrentShowingMovieListRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetCurrentShowingMovieListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCurrentShowingMovieListRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetCurrentShowingMovieListRequestMultiError, or nil if none found.
func (m *GetCurrentShowingMovieListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCurrentShowingMovieListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Offset

	// no validation rules for Limit

	if len(errors) > 0 {
		return GetCurrentShowingMovieListRequestMultiError(errors)
	}

	return nil
}

// GetCurrentShowingMovieListRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetCurrentShowingMovieListRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCurrentShowingMovieListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCurrentShowingMovieListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCurrentShowingMovieListRequestMultiError) AllErrors() []error { return m }

// GetCurrentShowingMovieListRequestValidationError is the validation error
// returned by GetCurrentShowingMovieListRequest.Validate if the designated
// constraints aren't met.
type GetCurrentShowingMovieListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCurrentShowingMovieListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCurrentShowingMovieListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCurrentShowingMovieListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCurrentShowingMovieListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCurrentShowingMovieListRequestValidationError) ErrorName() string {
	return "GetCurrentShowingMovieListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCurrentShowingMovieListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCurrentShowingMovieListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCurrentShowingMovieListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCurrentShowingMovieListRequestValidationError{}

// Validate checks the field values on GetCurrentShowingMovieListResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetCurrentShowingMovieListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCurrentShowingMovieListResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetCurrentShowingMovieListResponseMultiError, or nil if none found.
func (m *GetCurrentShowingMovieListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCurrentShowingMovieListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMovieList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetCurrentShowingMovieListResponseValidationError{
						field:  fmt.Sprintf("MovieList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetCurrentShowingMovieListResponseValidationError{
						field:  fmt.Sprintf("MovieList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCurrentShowingMovieListResponseValidationError{
					field:  fmt.Sprintf("MovieList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetCurrentShowingMovieListResponseMultiError(errors)
	}

	return nil
}

// GetCurrentShowingMovieListResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetCurrentShowingMovieListResponse.ValidateAll() if the designated
// constraints aren't met.
type GetCurrentShowingMovieListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCurrentShowingMovieListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCurrentShowingMovieListResponseMultiError) AllErrors() []error { return m }

// GetCurrentShowingMovieListResponseValidationError is the validation error
// returned by GetCurrentShowingMovieListResponse.Validate if the designated
// constraints aren't met.
type GetCurrentShowingMovieListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCurrentShowingMovieListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCurrentShowingMovieListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCurrentShowingMovieListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCurrentShowingMovieListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCurrentShowingMovieListResponseValidationError) ErrorName() string {
	return "GetCurrentShowingMovieListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCurrentShowingMovieListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCurrentShowingMovieListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCurrentShowingMovieListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCurrentShowingMovieListResponseValidationError{}

// Validate checks the field values on GetUpcomingMovieListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUpcomingMovieListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUpcomingMovieListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUpcomingMovieListRequestMultiError, or nil if none found.
func (m *GetUpcomingMovieListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUpcomingMovieListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Offset

	// no validation rules for Limit

	if len(errors) > 0 {
		return GetUpcomingMovieListRequestMultiError(errors)
	}

	return nil
}

// GetUpcomingMovieListRequestMultiError is an error wrapping multiple
// validation errors returned by GetUpcomingMovieListRequest.ValidateAll() if
// the designated constraints aren't met.
type GetUpcomingMovieListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUpcomingMovieListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUpcomingMovieListRequestMultiError) AllErrors() []error { return m }

// GetUpcomingMovieListRequestValidationError is the validation error returned
// by GetUpcomingMovieListRequest.Validate if the designated constraints
// aren't met.
type GetUpcomingMovieListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUpcomingMovieListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUpcomingMovieListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUpcomingMovieListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUpcomingMovieListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUpcomingMovieListRequestValidationError) ErrorName() string {
	return "GetUpcomingMovieListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUpcomingMovieListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUpcomingMovieListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUpcomingMovieListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUpcomingMovieListRequestValidationError{}

// Validate checks the field values on GetUpcomingMovieListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUpcomingMovieListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUpcomingMovieListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUpcomingMovieListResponseMultiError, or nil if none found.
func (m *GetUpcomingMovieListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUpcomingMovieListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMovieList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUpcomingMovieListResponseValidationError{
						field:  fmt.Sprintf("MovieList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUpcomingMovieListResponseValidationError{
						field:  fmt.Sprintf("MovieList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUpcomingMovieListResponseValidationError{
					field:  fmt.Sprintf("MovieList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetUpcomingMovieListResponseMultiError(errors)
	}

	return nil
}

// GetUpcomingMovieListResponseMultiError is an error wrapping multiple
// validation errors returned by GetUpcomingMovieListResponse.ValidateAll() if
// the designated constraints aren't met.
type GetUpcomingMovieListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUpcomingMovieListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUpcomingMovieListResponseMultiError) AllErrors() []error { return m }

// GetUpcomingMovieListResponseValidationError is the validation error returned
// by GetUpcomingMovieListResponse.Validate if the designated constraints
// aren't met.
type GetUpcomingMovieListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUpcomingMovieListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUpcomingMovieListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUpcomingMovieListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUpcomingMovieListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUpcomingMovieListResponseValidationError) ErrorName() string {
	return "GetUpcomingMovieListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUpcomingMovieListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUpcomingMovieListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUpcomingMovieListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUpcomingMovieListResponseValidationError{}

// Validate checks the field values on DeleteMovieRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteMovieRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteMovieRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteMovieRequestMultiError, or nil if none found.
func (m *DeleteMovieRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteMovieRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteMovieRequestMultiError(errors)
	}

	return nil
}

// DeleteMovieRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteMovieRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteMovieRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteMovieRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteMovieRequestMultiError) AllErrors() []error { return m }

// DeleteMovieRequestValidationError is the validation error returned by
// DeleteMovieRequest.Validate if the designated constraints aren't met.
type DeleteMovieRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteMovieRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteMovieRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteMovieRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteMovieRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteMovieRequestValidationError) ErrorName() string {
	return "DeleteMovieRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteMovieRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteMovieRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteMovieRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteMovieRequestValidationError{}

// Validate checks the field values on DeleteMovieResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteMovieResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteMovieResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteMovieResponseMultiError, or nil if none found.
func (m *DeleteMovieResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteMovieResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteMovieResponseMultiError(errors)
	}

	return nil
}

// DeleteMovieResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteMovieResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteMovieResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteMovieResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteMovieResponseMultiError) AllErrors() []error { return m }

// DeleteMovieResponseValidationError is the validation error returned by
// DeleteMovieResponse.Validate if the designated constraints aren't met.
type DeleteMovieResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteMovieResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteMovieResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteMovieResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteMovieResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteMovieResponseValidationError) ErrorName() string {
	return "DeleteMovieResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteMovieResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteMovieResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteMovieResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteMovieResponseValidationError{}

// Validate checks the field values on CreateScreenTypeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateScreenTypeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateScreenTypeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateScreenTypeRequestMultiError, or nil if none found.
func (m *CreateScreenTypeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateScreenTypeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DisplayName

	// no validation rules for Description

	// no validation rules for SeatCount

	// no validation rules for SeatOfRowCount

	// no validation rules for RowCount

	if len(errors) > 0 {
		return CreateScreenTypeRequestMultiError(errors)
	}

	return nil
}

// CreateScreenTypeRequestMultiError is an error wrapping multiple validation
// errors returned by CreateScreenTypeRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateScreenTypeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateScreenTypeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateScreenTypeRequestMultiError) AllErrors() []error { return m }

// CreateScreenTypeRequestValidationError is the validation error returned by
// CreateScreenTypeRequest.Validate if the designated constraints aren't met.
type CreateScreenTypeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateScreenTypeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateScreenTypeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateScreenTypeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateScreenTypeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateScreenTypeRequestValidationError) ErrorName() string {
	return "CreateScreenTypeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateScreenTypeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateScreenTypeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateScreenTypeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateScreenTypeRequestValidationError{}

// Validate checks the field values on CreateScreenTypeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateScreenTypeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateScreenTypeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateScreenTypeResponseMultiError, or nil if none found.
func (m *CreateScreenTypeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateScreenTypeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ScreenTypeId

	// no validation rules for DisplayName

	// no validation rules for Description

	// no validation rules for SeatCount

	// no validation rules for SeatOfRowCount

	// no validation rules for RowCount

	if len(errors) > 0 {
		return CreateScreenTypeResponseMultiError(errors)
	}

	return nil
}

// CreateScreenTypeResponseMultiError is an error wrapping multiple validation
// errors returned by CreateScreenTypeResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateScreenTypeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateScreenTypeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateScreenTypeResponseMultiError) AllErrors() []error { return m }

// CreateScreenTypeResponseValidationError is the validation error returned by
// CreateScreenTypeResponse.Validate if the designated constraints aren't met.
type CreateScreenTypeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateScreenTypeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateScreenTypeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateScreenTypeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateScreenTypeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateScreenTypeResponseValidationError) ErrorName() string {
	return "CreateScreenTypeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateScreenTypeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateScreenTypeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateScreenTypeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateScreenTypeResponseValidationError{}

// Validate checks the field values on DeleteScreenTypeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteScreenTypeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteScreenTypeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteScreenTypeRequestMultiError, or nil if none found.
func (m *DeleteScreenTypeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteScreenTypeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteScreenTypeRequestMultiError(errors)
	}

	return nil
}

// DeleteScreenTypeRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteScreenTypeRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteScreenTypeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteScreenTypeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteScreenTypeRequestMultiError) AllErrors() []error { return m }

// DeleteScreenTypeRequestValidationError is the validation error returned by
// DeleteScreenTypeRequest.Validate if the designated constraints aren't met.
type DeleteScreenTypeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteScreenTypeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteScreenTypeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteScreenTypeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteScreenTypeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteScreenTypeRequestValidationError) ErrorName() string {
	return "DeleteScreenTypeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteScreenTypeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteScreenTypeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteScreenTypeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteScreenTypeRequestValidationError{}

// Validate checks the field values on DeleteScreenTypeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteScreenTypeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteScreenTypeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteScreenTypeResponseMultiError, or nil if none found.
func (m *DeleteScreenTypeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteScreenTypeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteScreenTypeResponseMultiError(errors)
	}

	return nil
}

// DeleteScreenTypeResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteScreenTypeResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteScreenTypeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteScreenTypeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteScreenTypeResponseMultiError) AllErrors() []error { return m }

// DeleteScreenTypeResponseValidationError is the validation error returned by
// DeleteScreenTypeResponse.Validate if the designated constraints aren't met.
type DeleteScreenTypeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteScreenTypeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteScreenTypeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteScreenTypeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteScreenTypeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteScreenTypeResponseValidationError) ErrorName() string {
	return "DeleteScreenTypeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteScreenTypeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteScreenTypeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteScreenTypeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteScreenTypeResponseValidationError{}

// Validate checks the field values on CreateTheaterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTheaterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTheaterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTheaterRequestMultiError, or nil if none found.
func (m *CreateTheaterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTheaterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DisplayName

	// no validation rules for Location

	if len(errors) > 0 {
		return CreateTheaterRequestMultiError(errors)
	}

	return nil
}

// CreateTheaterRequestMultiError is an error wrapping multiple validation
// errors returned by CreateTheaterRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateTheaterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTheaterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTheaterRequestMultiError) AllErrors() []error { return m }

// CreateTheaterRequestValidationError is the validation error returned by
// CreateTheaterRequest.Validate if the designated constraints aren't met.
type CreateTheaterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTheaterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTheaterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTheaterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTheaterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTheaterRequestValidationError) ErrorName() string {
	return "CreateTheaterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTheaterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTheaterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTheaterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTheaterRequestValidationError{}

// Validate checks the field values on CreateTheaterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTheaterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTheaterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTheaterResponseMultiError, or nil if none found.
func (m *CreateTheaterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTheaterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TheaterId

	// no validation rules for DisplayName

	// no validation rules for Location

	// no validation rules for ScreenCount

	// no validation rules for SeatCount

	if len(errors) > 0 {
		return CreateTheaterResponseMultiError(errors)
	}

	return nil
}

// CreateTheaterResponseMultiError is an error wrapping multiple validation
// errors returned by CreateTheaterResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateTheaterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTheaterResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTheaterResponseMultiError) AllErrors() []error { return m }

// CreateTheaterResponseValidationError is the validation error returned by
// CreateTheaterResponse.Validate if the designated constraints aren't met.
type CreateTheaterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTheaterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTheaterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTheaterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTheaterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTheaterResponseValidationError) ErrorName() string {
	return "CreateTheaterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTheaterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTheaterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTheaterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTheaterResponseValidationError{}

// Validate checks the field values on GetTheaterRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetTheaterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTheaterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTheaterRequestMultiError, or nil if none found.
func (m *GetTheaterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTheaterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TheaterId

	if len(errors) > 0 {
		return GetTheaterRequestMultiError(errors)
	}

	return nil
}

// GetTheaterRequestMultiError is an error wrapping multiple validation errors
// returned by GetTheaterRequest.ValidateAll() if the designated constraints
// aren't met.
type GetTheaterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTheaterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTheaterRequestMultiError) AllErrors() []error { return m }

// GetTheaterRequestValidationError is the validation error returned by
// GetTheaterRequest.Validate if the designated constraints aren't met.
type GetTheaterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTheaterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTheaterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTheaterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTheaterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTheaterRequestValidationError) ErrorName() string {
	return "GetTheaterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTheaterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTheaterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTheaterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTheaterRequestValidationError{}

// Validate checks the field values on GetTheaterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTheaterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTheaterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTheaterResponseMultiError, or nil if none found.
func (m *GetTheaterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTheaterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTheater()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTheaterResponseValidationError{
					field:  "Theater",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTheaterResponseValidationError{
					field:  "Theater",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTheater()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTheaterResponseValidationError{
				field:  "Theater",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTheaterResponseMultiError(errors)
	}

	return nil
}

// GetTheaterResponseMultiError is an error wrapping multiple validation errors
// returned by GetTheaterResponse.ValidateAll() if the designated constraints
// aren't met.
type GetTheaterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTheaterResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTheaterResponseMultiError) AllErrors() []error { return m }

// GetTheaterResponseValidationError is the validation error returned by
// GetTheaterResponse.Validate if the designated constraints aren't met.
type GetTheaterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTheaterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTheaterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTheaterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTheaterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTheaterResponseValidationError) ErrorName() string {
	return "GetTheaterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTheaterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTheaterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTheaterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTheaterResponseValidationError{}

// Validate checks the field values on GetTheaterListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTheaterListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTheaterListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTheaterListRequestMultiError, or nil if none found.
func (m *GetTheaterListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTheaterListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetTheaterListRequestMultiError(errors)
	}

	return nil
}

// GetTheaterListRequestMultiError is an error wrapping multiple validation
// errors returned by GetTheaterListRequest.ValidateAll() if the designated
// constraints aren't met.
type GetTheaterListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTheaterListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTheaterListRequestMultiError) AllErrors() []error { return m }

// GetTheaterListRequestValidationError is the validation error returned by
// GetTheaterListRequest.Validate if the designated constraints aren't met.
type GetTheaterListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTheaterListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTheaterListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTheaterListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTheaterListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTheaterListRequestValidationError) ErrorName() string {
	return "GetTheaterListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTheaterListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTheaterListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTheaterListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTheaterListRequestValidationError{}

// Validate checks the field values on GetTheaterListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTheaterListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTheaterListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTheaterListResponseMultiError, or nil if none found.
func (m *GetTheaterListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTheaterListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTheaterList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetTheaterListResponseValidationError{
						field:  fmt.Sprintf("TheaterList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetTheaterListResponseValidationError{
						field:  fmt.Sprintf("TheaterList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTheaterListResponseValidationError{
					field:  fmt.Sprintf("TheaterList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetTheaterListResponseMultiError(errors)
	}

	return nil
}

// GetTheaterListResponseMultiError is an error wrapping multiple validation
// errors returned by GetTheaterListResponse.ValidateAll() if the designated
// constraints aren't met.
type GetTheaterListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTheaterListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTheaterListResponseMultiError) AllErrors() []error { return m }

// GetTheaterListResponseValidationError is the validation error returned by
// GetTheaterListResponse.Validate if the designated constraints aren't met.
type GetTheaterListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTheaterListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTheaterListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTheaterListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTheaterListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTheaterListResponseValidationError) ErrorName() string {
	return "GetTheaterListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTheaterListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTheaterListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTheaterListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTheaterListResponseValidationError{}

// Validate checks the field values on DeleteTheaterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTheaterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTheaterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTheaterRequestMultiError, or nil if none found.
func (m *DeleteTheaterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTheaterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteTheaterRequestMultiError(errors)
	}

	return nil
}

// DeleteTheaterRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteTheaterRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteTheaterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTheaterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTheaterRequestMultiError) AllErrors() []error { return m }

// DeleteTheaterRequestValidationError is the validation error returned by
// DeleteTheaterRequest.Validate if the designated constraints aren't met.
type DeleteTheaterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTheaterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTheaterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTheaterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTheaterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTheaterRequestValidationError) ErrorName() string {
	return "DeleteTheaterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTheaterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTheaterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTheaterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTheaterRequestValidationError{}

// Validate checks the field values on DeleteTheaterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTheaterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTheaterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTheaterResponseMultiError, or nil if none found.
func (m *DeleteTheaterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTheaterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteTheaterResponseMultiError(errors)
	}

	return nil
}

// DeleteTheaterResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteTheaterResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteTheaterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTheaterResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTheaterResponseMultiError) AllErrors() []error { return m }

// DeleteTheaterResponseValidationError is the validation error returned by
// DeleteTheaterResponse.Validate if the designated constraints aren't met.
type DeleteTheaterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTheaterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTheaterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTheaterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTheaterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTheaterResponseValidationError) ErrorName() string {
	return "DeleteTheaterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTheaterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTheaterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTheaterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTheaterResponseValidationError{}

// Validate checks the field values on CreateScreenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateScreenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateScreenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateScreenRequestMultiError, or nil if none found.
func (m *CreateScreenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateScreenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TheaterId

	// no validation rules for ScreenTypeId

	// no validation rules for DisplayName

	if len(errors) > 0 {
		return CreateScreenRequestMultiError(errors)
	}

	return nil
}

// CreateScreenRequestMultiError is an error wrapping multiple validation
// errors returned by CreateScreenRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateScreenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateScreenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateScreenRequestMultiError) AllErrors() []error { return m }

// CreateScreenRequestValidationError is the validation error returned by
// CreateScreenRequest.Validate if the designated constraints aren't met.
type CreateScreenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateScreenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateScreenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateScreenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateScreenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateScreenRequestValidationError) ErrorName() string {
	return "CreateScreenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateScreenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateScreenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateScreenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateScreenRequestValidationError{}

// Validate checks the field values on CreateScreenResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateScreenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateScreenResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateScreenResponseMultiError, or nil if none found.
func (m *CreateScreenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateScreenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetScreen()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateScreenResponseValidationError{
					field:  "Screen",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateScreenResponseValidationError{
					field:  "Screen",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetScreen()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateScreenResponseValidationError{
				field:  "Screen",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateScreenResponseMultiError(errors)
	}

	return nil
}

// CreateScreenResponseMultiError is an error wrapping multiple validation
// errors returned by CreateScreenResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateScreenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateScreenResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateScreenResponseMultiError) AllErrors() []error { return m }

// CreateScreenResponseValidationError is the validation error returned by
// CreateScreenResponse.Validate if the designated constraints aren't met.
type CreateScreenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateScreenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateScreenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateScreenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateScreenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateScreenResponseValidationError) ErrorName() string {
	return "CreateScreenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateScreenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateScreenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateScreenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateScreenResponseValidationError{}

// Validate checks the field values on GetScreenRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetScreenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetScreenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetScreenRequestMultiError, or nil if none found.
func (m *GetScreenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetScreenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ScreenId

	if len(errors) > 0 {
		return GetScreenRequestMultiError(errors)
	}

	return nil
}

// GetScreenRequestMultiError is an error wrapping multiple validation errors
// returned by GetScreenRequest.ValidateAll() if the designated constraints
// aren't met.
type GetScreenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetScreenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetScreenRequestMultiError) AllErrors() []error { return m }

// GetScreenRequestValidationError is the validation error returned by
// GetScreenRequest.Validate if the designated constraints aren't met.
type GetScreenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetScreenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetScreenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetScreenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetScreenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetScreenRequestValidationError) ErrorName() string { return "GetScreenRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetScreenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetScreenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetScreenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetScreenRequestValidationError{}

// Validate checks the field values on GetScreenResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetScreenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetScreenResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetScreenResponseMultiError, or nil if none found.
func (m *GetScreenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetScreenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetScreen()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetScreenResponseValidationError{
					field:  "Screen",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetScreenResponseValidationError{
					field:  "Screen",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetScreen()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetScreenResponseValidationError{
				field:  "Screen",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetScreenResponseMultiError(errors)
	}

	return nil
}

// GetScreenResponseMultiError is an error wrapping multiple validation errors
// returned by GetScreenResponse.ValidateAll() if the designated constraints
// aren't met.
type GetScreenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetScreenResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetScreenResponseMultiError) AllErrors() []error { return m }

// GetScreenResponseValidationError is the validation error returned by
// GetScreenResponse.Validate if the designated constraints aren't met.
type GetScreenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetScreenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetScreenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetScreenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetScreenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetScreenResponseValidationError) ErrorName() string {
	return "GetScreenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetScreenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetScreenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetScreenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetScreenResponseValidationError{}

// Validate checks the field values on DeleteScreenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteScreenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteScreenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteScreenRequestMultiError, or nil if none found.
func (m *DeleteScreenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteScreenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteScreenRequestMultiError(errors)
	}

	return nil
}

// DeleteScreenRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteScreenRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteScreenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteScreenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteScreenRequestMultiError) AllErrors() []error { return m }

// DeleteScreenRequestValidationError is the validation error returned by
// DeleteScreenRequest.Validate if the designated constraints aren't met.
type DeleteScreenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteScreenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteScreenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteScreenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteScreenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteScreenRequestValidationError) ErrorName() string {
	return "DeleteScreenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteScreenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteScreenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteScreenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteScreenRequestValidationError{}

// Validate checks the field values on DeleteScreenResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteScreenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteScreenResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteScreenResponseMultiError, or nil if none found.
func (m *DeleteScreenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteScreenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteScreenResponseMultiError(errors)
	}

	return nil
}

// DeleteScreenResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteScreenResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteScreenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteScreenResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteScreenResponseMultiError) AllErrors() []error { return m }

// DeleteScreenResponseValidationError is the validation error returned by
// DeleteScreenResponse.Validate if the designated constraints aren't met.
type DeleteScreenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteScreenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteScreenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteScreenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteScreenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteScreenResponseValidationError) ErrorName() string {
	return "DeleteScreenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteScreenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteScreenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteScreenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteScreenResponseValidationError{}

// Validate checks the field values on GetSeatRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetSeatRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSeatRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetSeatRequestMultiError,
// or nil if none found.
func (m *GetSeatRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSeatRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SeatId

	if len(errors) > 0 {
		return GetSeatRequestMultiError(errors)
	}

	return nil
}

// GetSeatRequestMultiError is an error wrapping multiple validation errors
// returned by GetSeatRequest.ValidateAll() if the designated constraints
// aren't met.
type GetSeatRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSeatRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSeatRequestMultiError) AllErrors() []error { return m }

// GetSeatRequestValidationError is the validation error returned by
// GetSeatRequest.Validate if the designated constraints aren't met.
type GetSeatRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSeatRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSeatRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSeatRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSeatRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSeatRequestValidationError) ErrorName() string { return "GetSeatRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetSeatRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSeatRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSeatRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSeatRequestValidationError{}

// Validate checks the field values on GetSeatResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetSeatResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSeatResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSeatResponseMultiError, or nil if none found.
func (m *GetSeatResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSeatResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSeat()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSeatResponseValidationError{
					field:  "Seat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSeatResponseValidationError{
					field:  "Seat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSeat()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSeatResponseValidationError{
				field:  "Seat",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetSeatResponseMultiError(errors)
	}

	return nil
}

// GetSeatResponseMultiError is an error wrapping multiple validation errors
// returned by GetSeatResponse.ValidateAll() if the designated constraints
// aren't met.
type GetSeatResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSeatResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSeatResponseMultiError) AllErrors() []error { return m }

// GetSeatResponseValidationError is the validation error returned by
// GetSeatResponse.Validate if the designated constraints aren't met.
type GetSeatResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSeatResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSeatResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSeatResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSeatResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSeatResponseValidationError) ErrorName() string { return "GetSeatResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetSeatResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSeatResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSeatResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSeatResponseValidationError{}

// Validate checks the field values on CreateAllSeatOfScreenRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAllSeatOfScreenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAllSeatOfScreenRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAllSeatOfScreenRequestMultiError, or nil if none found.
func (m *CreateAllSeatOfScreenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAllSeatOfScreenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ScreenId

	// no validation rules for ScreenTypeId

	if len(errors) > 0 {
		return CreateAllSeatOfScreenRequestMultiError(errors)
	}

	return nil
}

// CreateAllSeatOfScreenRequestMultiError is an error wrapping multiple
// validation errors returned by CreateAllSeatOfScreenRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateAllSeatOfScreenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAllSeatOfScreenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAllSeatOfScreenRequestMultiError) AllErrors() []error { return m }

// CreateAllSeatOfScreenRequestValidationError is the validation error returned
// by CreateAllSeatOfScreenRequest.Validate if the designated constraints
// aren't met.
type CreateAllSeatOfScreenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAllSeatOfScreenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAllSeatOfScreenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAllSeatOfScreenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAllSeatOfScreenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAllSeatOfScreenRequestValidationError) ErrorName() string {
	return "CreateAllSeatOfScreenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAllSeatOfScreenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAllSeatOfScreenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAllSeatOfScreenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAllSeatOfScreenRequestValidationError{}

// Validate checks the field values on CreateAllSeatOfScreenResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAllSeatOfScreenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAllSeatOfScreenResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateAllSeatOfScreenResponseMultiError, or nil if none found.
func (m *CreateAllSeatOfScreenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAllSeatOfScreenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateAllSeatOfScreenResponseMultiError(errors)
	}

	return nil
}

// CreateAllSeatOfScreenResponseMultiError is an error wrapping multiple
// validation errors returned by CreateAllSeatOfScreenResponse.ValidateAll()
// if the designated constraints aren't met.
type CreateAllSeatOfScreenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAllSeatOfScreenResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAllSeatOfScreenResponseMultiError) AllErrors() []error { return m }

// CreateAllSeatOfScreenResponseValidationError is the validation error
// returned by CreateAllSeatOfScreenResponse.Validate if the designated
// constraints aren't met.
type CreateAllSeatOfScreenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAllSeatOfScreenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAllSeatOfScreenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAllSeatOfScreenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAllSeatOfScreenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAllSeatOfScreenResponseValidationError) ErrorName() string {
	return "CreateAllSeatOfScreenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAllSeatOfScreenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAllSeatOfScreenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAllSeatOfScreenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAllSeatOfScreenResponseValidationError{}

// Validate checks the field values on CreateShowtimeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateShowtimeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateShowtimeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateShowtimeRequestMultiError, or nil if none found.
func (m *CreateShowtimeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateShowtimeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MovieId

	// no validation rules for ScreenId

	// no validation rules for TimeStart

	if len(errors) > 0 {
		return CreateShowtimeRequestMultiError(errors)
	}

	return nil
}

// CreateShowtimeRequestMultiError is an error wrapping multiple validation
// errors returned by CreateShowtimeRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateShowtimeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateShowtimeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateShowtimeRequestMultiError) AllErrors() []error { return m }

// CreateShowtimeRequestValidationError is the validation error returned by
// CreateShowtimeRequest.Validate if the designated constraints aren't met.
type CreateShowtimeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateShowtimeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateShowtimeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateShowtimeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateShowtimeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateShowtimeRequestValidationError) ErrorName() string {
	return "CreateShowtimeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateShowtimeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateShowtimeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateShowtimeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateShowtimeRequestValidationError{}

// Validate checks the field values on CreateShowtimeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateShowtimeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateShowtimeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateShowtimeResponseMultiError, or nil if none found.
func (m *CreateShowtimeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateShowtimeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetShowtime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateShowtimeResponseValidationError{
					field:  "Showtime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateShowtimeResponseValidationError{
					field:  "Showtime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShowtime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateShowtimeResponseValidationError{
				field:  "Showtime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateShowtimeResponseMultiError(errors)
	}

	return nil
}

// CreateShowtimeResponseMultiError is an error wrapping multiple validation
// errors returned by CreateShowtimeResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateShowtimeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateShowtimeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateShowtimeResponseMultiError) AllErrors() []error { return m }

// CreateShowtimeResponseValidationError is the validation error returned by
// CreateShowtimeResponse.Validate if the designated constraints aren't met.
type CreateShowtimeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateShowtimeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateShowtimeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateShowtimeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateShowtimeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateShowtimeResponseValidationError) ErrorName() string {
	return "CreateShowtimeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateShowtimeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateShowtimeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateShowtimeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateShowtimeResponseValidationError{}

// Validate checks the field values on DeleteShowtimeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteShowtimeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteShowtimeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteShowtimeRequestMultiError, or nil if none found.
func (m *DeleteShowtimeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteShowtimeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteShowtimeRequestMultiError(errors)
	}

	return nil
}

// DeleteShowtimeRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteShowtimeRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteShowtimeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteShowtimeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteShowtimeRequestMultiError) AllErrors() []error { return m }

// DeleteShowtimeRequestValidationError is the validation error returned by
// DeleteShowtimeRequest.Validate if the designated constraints aren't met.
type DeleteShowtimeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteShowtimeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteShowtimeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteShowtimeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteShowtimeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteShowtimeRequestValidationError) ErrorName() string {
	return "DeleteShowtimeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteShowtimeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteShowtimeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteShowtimeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteShowtimeRequestValidationError{}

// Validate checks the field values on DeleteShowtimeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteShowtimeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteShowtimeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteShowtimeResponseMultiError, or nil if none found.
func (m *DeleteShowtimeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteShowtimeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteShowtimeResponseMultiError(errors)
	}

	return nil
}

// DeleteShowtimeResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteShowtimeResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteShowtimeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteShowtimeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteShowtimeResponseMultiError) AllErrors() []error { return m }

// DeleteShowtimeResponseValidationError is the validation error returned by
// DeleteShowtimeResponse.Validate if the designated constraints aren't met.
type DeleteShowtimeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteShowtimeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteShowtimeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteShowtimeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteShowtimeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteShowtimeResponseValidationError) ErrorName() string {
	return "DeleteShowtimeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteShowtimeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteShowtimeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteShowtimeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteShowtimeResponseValidationError{}

// Validate checks the field values on GetShowtimeListOfTheaterByMovieIdRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetShowtimeListOfTheaterByMovieIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetShowtimeListOfTheaterByMovieIdRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetShowtimeListOfTheaterByMovieIdRequestMultiError, or nil if none found.
func (m *GetShowtimeListOfTheaterByMovieIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetShowtimeListOfTheaterByMovieIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TheaterId

	// no validation rules for MovieId

	// no validation rules for RequestTime

	if len(errors) > 0 {
		return GetShowtimeListOfTheaterByMovieIdRequestMultiError(errors)
	}

	return nil
}

// GetShowtimeListOfTheaterByMovieIdRequestMultiError is an error wrapping
// multiple validation errors returned by
// GetShowtimeListOfTheaterByMovieIdRequest.ValidateAll() if the designated
// constraints aren't met.
type GetShowtimeListOfTheaterByMovieIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetShowtimeListOfTheaterByMovieIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetShowtimeListOfTheaterByMovieIdRequestMultiError) AllErrors() []error { return m }

// GetShowtimeListOfTheaterByMovieIdRequestValidationError is the validation
// error returned by GetShowtimeListOfTheaterByMovieIdRequest.Validate if the
// designated constraints aren't met.
type GetShowtimeListOfTheaterByMovieIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetShowtimeListOfTheaterByMovieIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetShowtimeListOfTheaterByMovieIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetShowtimeListOfTheaterByMovieIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetShowtimeListOfTheaterByMovieIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetShowtimeListOfTheaterByMovieIdRequestValidationError) ErrorName() string {
	return "GetShowtimeListOfTheaterByMovieIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetShowtimeListOfTheaterByMovieIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetShowtimeListOfTheaterByMovieIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetShowtimeListOfTheaterByMovieIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetShowtimeListOfTheaterByMovieIdRequestValidationError{}

// Validate checks the field values on ShowtimeDetail with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ShowtimeDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShowtimeDetail with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ShowtimeDetailMultiError,
// or nil if none found.
func (m *ShowtimeDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *ShowtimeDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for TheaterName

	// no validation rules for MovieName

	if all {
		switch v := interface{}(m.GetMovieType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShowtimeDetailValidationError{
					field:  "MovieType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShowtimeDetailValidationError{
					field:  "MovieType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMovieType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShowtimeDetailValidationError{
				field:  "MovieType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ScreenName

	// no validation rules for TimeStart

	// no validation rules for TimeEnd

	// no validation rules for SeatCount

	if len(errors) > 0 {
		return ShowtimeDetailMultiError(errors)
	}

	return nil
}

// ShowtimeDetailMultiError is an error wrapping multiple validation errors
// returned by ShowtimeDetail.ValidateAll() if the designated constraints
// aren't met.
type ShowtimeDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShowtimeDetailMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShowtimeDetailMultiError) AllErrors() []error { return m }

// ShowtimeDetailValidationError is the validation error returned by
// ShowtimeDetail.Validate if the designated constraints aren't met.
type ShowtimeDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShowtimeDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShowtimeDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShowtimeDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShowtimeDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShowtimeDetailValidationError) ErrorName() string { return "ShowtimeDetailValidationError" }

// Error satisfies the builtin error interface
func (e ShowtimeDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShowtimeDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShowtimeDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShowtimeDetailValidationError{}

// Validate checks the field values on
// GetShowtimeListOfTheaterByMovieIdResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetShowtimeListOfTheaterByMovieIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetShowtimeListOfTheaterByMovieIdResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetShowtimeListOfTheaterByMovieIdResponseMultiError, or nil if none found.
func (m *GetShowtimeListOfTheaterByMovieIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetShowtimeListOfTheaterByMovieIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTheater()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetShowtimeListOfTheaterByMovieIdResponseValidationError{
					field:  "Theater",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetShowtimeListOfTheaterByMovieIdResponseValidationError{
					field:  "Theater",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTheater()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetShowtimeListOfTheaterByMovieIdResponseValidationError{
				field:  "Theater",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetShowtimeListOfTheater() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetShowtimeListOfTheaterByMovieIdResponseValidationError{
						field:  fmt.Sprintf("ShowtimeListOfTheater[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetShowtimeListOfTheaterByMovieIdResponseValidationError{
						field:  fmt.Sprintf("ShowtimeListOfTheater[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetShowtimeListOfTheaterByMovieIdResponseValidationError{
					field:  fmt.Sprintf("ShowtimeListOfTheater[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetShowtimeListOfTheaterByMovieIdResponseMultiError(errors)
	}

	return nil
}

// GetShowtimeListOfTheaterByMovieIdResponseMultiError is an error wrapping
// multiple validation errors returned by
// GetShowtimeListOfTheaterByMovieIdResponse.ValidateAll() if the designated
// constraints aren't met.
type GetShowtimeListOfTheaterByMovieIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetShowtimeListOfTheaterByMovieIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetShowtimeListOfTheaterByMovieIdResponseMultiError) AllErrors() []error { return m }

// GetShowtimeListOfTheaterByMovieIdResponseValidationError is the validation
// error returned by GetShowtimeListOfTheaterByMovieIdResponse.Validate if the
// designated constraints aren't met.
type GetShowtimeListOfTheaterByMovieIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetShowtimeListOfTheaterByMovieIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetShowtimeListOfTheaterByMovieIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetShowtimeListOfTheaterByMovieIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetShowtimeListOfTheaterByMovieIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetShowtimeListOfTheaterByMovieIdResponseValidationError) ErrorName() string {
	return "GetShowtimeListOfTheaterByMovieIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetShowtimeListOfTheaterByMovieIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetShowtimeListOfTheaterByMovieIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetShowtimeListOfTheaterByMovieIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetShowtimeListOfTheaterByMovieIdResponseValidationError{}

// Validate checks the field values on GetShowtimeListOfTheaterRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetShowtimeListOfTheaterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetShowtimeListOfTheaterRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetShowtimeListOfTheaterRequestMultiError, or nil if none found.
func (m *GetShowtimeListOfTheaterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetShowtimeListOfTheaterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TheaterId

	// no validation rules for RequestTime

	if len(errors) > 0 {
		return GetShowtimeListOfTheaterRequestMultiError(errors)
	}

	return nil
}

// GetShowtimeListOfTheaterRequestMultiError is an error wrapping multiple
// validation errors returned by GetShowtimeListOfTheaterRequest.ValidateAll()
// if the designated constraints aren't met.
type GetShowtimeListOfTheaterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetShowtimeListOfTheaterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetShowtimeListOfTheaterRequestMultiError) AllErrors() []error { return m }

// GetShowtimeListOfTheaterRequestValidationError is the validation error
// returned by GetShowtimeListOfTheaterRequest.Validate if the designated
// constraints aren't met.
type GetShowtimeListOfTheaterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetShowtimeListOfTheaterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetShowtimeListOfTheaterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetShowtimeListOfTheaterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetShowtimeListOfTheaterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetShowtimeListOfTheaterRequestValidationError) ErrorName() string {
	return "GetShowtimeListOfTheaterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetShowtimeListOfTheaterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetShowtimeListOfTheaterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetShowtimeListOfTheaterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetShowtimeListOfTheaterRequestValidationError{}

// Validate checks the field values on GetShowtimeListOfTheaterResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetShowtimeListOfTheaterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetShowtimeListOfTheaterResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetShowtimeListOfTheaterResponseMultiError, or nil if none found.
func (m *GetShowtimeListOfTheaterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetShowtimeListOfTheaterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTheater()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetShowtimeListOfTheaterResponseValidationError{
					field:  "Theater",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetShowtimeListOfTheaterResponseValidationError{
					field:  "Theater",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTheater()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetShowtimeListOfTheaterResponseValidationError{
				field:  "Theater",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetShowtimeListOfTheater() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetShowtimeListOfTheaterResponseValidationError{
						field:  fmt.Sprintf("ShowtimeListOfTheater[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetShowtimeListOfTheaterResponseValidationError{
						field:  fmt.Sprintf("ShowtimeListOfTheater[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetShowtimeListOfTheaterResponseValidationError{
					field:  fmt.Sprintf("ShowtimeListOfTheater[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetShowtimeListOfTheaterResponseMultiError(errors)
	}

	return nil
}

// GetShowtimeListOfTheaterResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetShowtimeListOfTheaterResponse.ValidateAll() if the designated
// constraints aren't met.
type GetShowtimeListOfTheaterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetShowtimeListOfTheaterResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetShowtimeListOfTheaterResponseMultiError) AllErrors() []error { return m }

// GetShowtimeListOfTheaterResponseValidationError is the validation error
// returned by GetShowtimeListOfTheaterResponse.Validate if the designated
// constraints aren't met.
type GetShowtimeListOfTheaterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetShowtimeListOfTheaterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetShowtimeListOfTheaterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetShowtimeListOfTheaterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetShowtimeListOfTheaterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetShowtimeListOfTheaterResponseValidationError) ErrorName() string {
	return "GetShowtimeListOfTheaterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetShowtimeListOfTheaterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetShowtimeListOfTheaterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetShowtimeListOfTheaterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetShowtimeListOfTheaterResponseValidationError{}

// Validate checks the field values on GetPriceRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetPriceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPriceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPriceRequestMultiError, or nil if none found.
func (m *GetPriceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPriceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ShowtimeId

	// no validation rules for SeatId

	if len(errors) > 0 {
		return GetPriceRequestMultiError(errors)
	}

	return nil
}

// GetPriceRequestMultiError is an error wrapping multiple validation errors
// returned by GetPriceRequest.ValidateAll() if the designated constraints
// aren't met.
type GetPriceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPriceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPriceRequestMultiError) AllErrors() []error { return m }

// GetPriceRequestValidationError is the validation error returned by
// GetPriceRequest.Validate if the designated constraints aren't met.
type GetPriceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPriceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPriceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPriceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPriceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPriceRequestValidationError) ErrorName() string { return "GetPriceRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetPriceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPriceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPriceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPriceRequestValidationError{}

// Validate checks the field values on Price with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Price) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Price with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PriceMultiError, or nil if none found.
func (m *Price) ValidateAll() error {
	return m.validate(true)
}

func (m *Price) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for OfMovieTypeId

	// no validation rules for OfSeatTypeId

	// no validation rules for OfShowtimeSlotId

	// no validation rules for OfShowtimeDayOfTheWeekId

	// no validation rules for Price

	if len(errors) > 0 {
		return PriceMultiError(errors)
	}

	return nil
}

// PriceMultiError is an error wrapping multiple validation errors returned by
// Price.ValidateAll() if the designated constraints aren't met.
type PriceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PriceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PriceMultiError) AllErrors() []error { return m }

// PriceValidationError is the validation error returned by Price.Validate if
// the designated constraints aren't met.
type PriceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PriceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PriceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PriceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PriceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PriceValidationError) ErrorName() string { return "PriceValidationError" }

// Error satisfies the builtin error interface
func (e PriceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPrice.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PriceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PriceValidationError{}

// Validate checks the field values on GetPriceResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetPriceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPriceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPriceResponseMultiError, or nil if none found.
func (m *GetPriceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPriceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPrice()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPriceResponseValidationError{
					field:  "Price",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPriceResponseValidationError{
					field:  "Price",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPrice()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPriceResponseValidationError{
				field:  "Price",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPriceResponseMultiError(errors)
	}

	return nil
}

// GetPriceResponseMultiError is an error wrapping multiple validation errors
// returned by GetPriceResponse.ValidateAll() if the designated constraints
// aren't met.
type GetPriceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPriceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPriceResponseMultiError) AllErrors() []error { return m }

// GetPriceResponseValidationError is the validation error returned by
// GetPriceResponse.Validate if the designated constraints aren't met.
type GetPriceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPriceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPriceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPriceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPriceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPriceResponseValidationError) ErrorName() string { return "GetPriceResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetPriceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPriceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPriceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPriceResponseValidationError{}

// Validate checks the field values on SeatStatus with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SeatStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SeatStatus with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SeatStatusMultiError, or
// nil if none found.
func (m *SeatStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *SeatStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SeatStatusMultiError(errors)
	}

	return nil
}

// SeatStatusMultiError is an error wrapping multiple validation errors
// returned by SeatStatus.ValidateAll() if the designated constraints aren't met.
type SeatStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SeatStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SeatStatusMultiError) AllErrors() []error { return m }

// SeatStatusValidationError is the validation error returned by
// SeatStatus.Validate if the designated constraints aren't met.
type SeatStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SeatStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SeatStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SeatStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SeatStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SeatStatusValidationError) ErrorName() string { return "SeatStatusValidationError" }

// Error satisfies the builtin error interface
func (e SeatStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSeatStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SeatStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SeatStatusValidationError{}

// Validate checks the field values on SeatMetadata with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SeatMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SeatMetadata with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SeatMetadataMultiError, or
// nil if none found.
func (m *SeatMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *SeatMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetSeatType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SeatMetadataValidationError{
					field:  "SeatType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SeatMetadataValidationError{
					field:  "SeatType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSeatType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SeatMetadataValidationError{
				field:  "SeatType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for OfScreenId

	// no validation rules for Column

	// no validation rules for Row

	// no validation rules for No

	// no validation rules for Status

	// no validation rules for Price

	if len(errors) > 0 {
		return SeatMetadataMultiError(errors)
	}

	return nil
}

// SeatMetadataMultiError is an error wrapping multiple validation errors
// returned by SeatMetadata.ValidateAll() if the designated constraints aren't met.
type SeatMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SeatMetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SeatMetadataMultiError) AllErrors() []error { return m }

// SeatMetadataValidationError is the validation error returned by
// SeatMetadata.Validate if the designated constraints aren't met.
type SeatMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SeatMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SeatMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SeatMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SeatMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SeatMetadataValidationError) ErrorName() string { return "SeatMetadataValidationError" }

// Error satisfies the builtin error interface
func (e SeatMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSeatMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SeatMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SeatMetadataValidationError{}

// Validate checks the field values on ShowtimeMetadata with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ShowtimeMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShowtimeMetadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ShowtimeMetadataMultiError, or nil if none found.
func (m *ShowtimeMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *ShowtimeMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTheater()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShowtimeMetadataValidationError{
					field:  "Theater",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShowtimeMetadataValidationError{
					field:  "Theater",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTheater()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShowtimeMetadataValidationError{
				field:  "Theater",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetShowtime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShowtimeMetadataValidationError{
					field:  "Showtime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShowtimeMetadataValidationError{
					field:  "Showtime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShowtime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShowtimeMetadataValidationError{
				field:  "Showtime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMovie()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShowtimeMetadataValidationError{
					field:  "Movie",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShowtimeMetadataValidationError{
					field:  "Movie",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMovie()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShowtimeMetadataValidationError{
				field:  "Movie",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetScreen()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShowtimeMetadataValidationError{
					field:  "Screen",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShowtimeMetadataValidationError{
					field:  "Screen",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetScreen()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShowtimeMetadataValidationError{
				field:  "Screen",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetSeats() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ShowtimeMetadataValidationError{
						field:  fmt.Sprintf("Seats[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ShowtimeMetadataValidationError{
						field:  fmt.Sprintf("Seats[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ShowtimeMetadataValidationError{
					field:  fmt.Sprintf("Seats[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ShowtimeMetadataMultiError(errors)
	}

	return nil
}

// ShowtimeMetadataMultiError is an error wrapping multiple validation errors
// returned by ShowtimeMetadata.ValidateAll() if the designated constraints
// aren't met.
type ShowtimeMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShowtimeMetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShowtimeMetadataMultiError) AllErrors() []error { return m }

// ShowtimeMetadataValidationError is the validation error returned by
// ShowtimeMetadata.Validate if the designated constraints aren't met.
type ShowtimeMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShowtimeMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShowtimeMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShowtimeMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShowtimeMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShowtimeMetadataValidationError) ErrorName() string { return "ShowtimeMetadataValidationError" }

// Error satisfies the builtin error interface
func (e ShowtimeMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShowtimeMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShowtimeMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShowtimeMetadataValidationError{}

// Validate checks the field values on GetShowtimeMetadataRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetShowtimeMetadataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetShowtimeMetadataRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetShowtimeMetadataRequestMultiError, or nil if none found.
func (m *GetShowtimeMetadataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetShowtimeMetadataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ShowtimeId

	if len(errors) > 0 {
		return GetShowtimeMetadataRequestMultiError(errors)
	}

	return nil
}

// GetShowtimeMetadataRequestMultiError is an error wrapping multiple
// validation errors returned by GetShowtimeMetadataRequest.ValidateAll() if
// the designated constraints aren't met.
type GetShowtimeMetadataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetShowtimeMetadataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetShowtimeMetadataRequestMultiError) AllErrors() []error { return m }

// GetShowtimeMetadataRequestValidationError is the validation error returned
// by GetShowtimeMetadataRequest.Validate if the designated constraints aren't met.
type GetShowtimeMetadataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetShowtimeMetadataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetShowtimeMetadataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetShowtimeMetadataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetShowtimeMetadataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetShowtimeMetadataRequestValidationError) ErrorName() string {
	return "GetShowtimeMetadataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetShowtimeMetadataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetShowtimeMetadataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetShowtimeMetadataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetShowtimeMetadataRequestValidationError{}

// Validate checks the field values on GetShowtimeMetadataResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetShowtimeMetadataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetShowtimeMetadataResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetShowtimeMetadataResponseMultiError, or nil if none found.
func (m *GetShowtimeMetadataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetShowtimeMetadataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetShowtimeMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetShowtimeMetadataResponseValidationError{
					field:  "ShowtimeMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetShowtimeMetadataResponseValidationError{
					field:  "ShowtimeMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShowtimeMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetShowtimeMetadataResponseValidationError{
				field:  "ShowtimeMetadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetShowtimeMetadataResponseMultiError(errors)
	}

	return nil
}

// GetShowtimeMetadataResponseMultiError is an error wrapping multiple
// validation errors returned by GetShowtimeMetadataResponse.ValidateAll() if
// the designated constraints aren't met.
type GetShowtimeMetadataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetShowtimeMetadataResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetShowtimeMetadataResponseMultiError) AllErrors() []error { return m }

// GetShowtimeMetadataResponseValidationError is the validation error returned
// by GetShowtimeMetadataResponse.Validate if the designated constraints
// aren't met.
type GetShowtimeMetadataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetShowtimeMetadataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetShowtimeMetadataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetShowtimeMetadataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetShowtimeMetadataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetShowtimeMetadataResponseValidationError) ErrorName() string {
	return "GetShowtimeMetadataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetShowtimeMetadataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetShowtimeMetadataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetShowtimeMetadataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetShowtimeMetadataResponseValidationError{}

// Validate checks the field values on SearchMovieRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchMovieRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchMovieRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchMovieRequestMultiError, or nil if none found.
func (m *SearchMovieRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchMovieRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Query

	// no validation rules for Limit

	if len(errors) > 0 {
		return SearchMovieRequestMultiError(errors)
	}

	return nil
}

// SearchMovieRequestMultiError is an error wrapping multiple validation errors
// returned by SearchMovieRequest.ValidateAll() if the designated constraints
// aren't met.
type SearchMovieRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchMovieRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchMovieRequestMultiError) AllErrors() []error { return m }

// SearchMovieRequestValidationError is the validation error returned by
// SearchMovieRequest.Validate if the designated constraints aren't met.
type SearchMovieRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchMovieRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchMovieRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchMovieRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchMovieRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchMovieRequestValidationError) ErrorName() string {
	return "SearchMovieRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SearchMovieRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchMovieRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchMovieRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchMovieRequestValidationError{}

// Validate checks the field values on SearchMovieResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchMovieResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchMovieResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchMovieResponseMultiError, or nil if none found.
func (m *SearchMovieResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchMovieResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMovieList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchMovieResponseValidationError{
						field:  fmt.Sprintf("MovieList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchMovieResponseValidationError{
						field:  fmt.Sprintf("MovieList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchMovieResponseValidationError{
					field:  fmt.Sprintf("MovieList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SearchMovieResponseMultiError(errors)
	}

	return nil
}

// SearchMovieResponseMultiError is an error wrapping multiple validation
// errors returned by SearchMovieResponse.ValidateAll() if the designated
// constraints aren't met.
type SearchMovieResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchMovieResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchMovieResponseMultiError) AllErrors() []error { return m }

// SearchMovieResponseValidationError is the validation error returned by
// SearchMovieResponse.Validate if the designated constraints aren't met.
type SearchMovieResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchMovieResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchMovieResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchMovieResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchMovieResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchMovieResponseValidationError) ErrorName() string {
	return "SearchMovieResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SearchMovieResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchMovieResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchMovieResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchMovieResponseValidationError{}
