// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: booking_service/booking_service.proto

package booking_service

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on BookingStatus with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BookingStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BookingStatus with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BookingStatusMultiError, or
// nil if none found.
func (m *BookingStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *BookingStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return BookingStatusMultiError(errors)
	}

	return nil
}

// BookingStatusMultiError is an error wrapping multiple validation errors
// returned by BookingStatus.ValidateAll() if the designated constraints
// aren't met.
type BookingStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BookingStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BookingStatusMultiError) AllErrors() []error { return m }

// BookingStatusValidationError is the validation error returned by
// BookingStatus.Validate if the designated constraints aren't met.
type BookingStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BookingStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BookingStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BookingStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BookingStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BookingStatusValidationError) ErrorName() string { return "BookingStatusValidationError" }

// Error satisfies the builtin error interface
func (e BookingStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBookingStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BookingStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BookingStatusValidationError{}

// Validate checks the field values on Booking with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Booking) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Booking with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in BookingMultiError, or nil if none found.
func (m *Booking) ValidateAll() error {
	return m.validate(true)
}

func (m *Booking) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for OfUserId

	// no validation rules for OfShowtimeId

	// no validation rules for OfSeatId

	// no validation rules for BookingTime

	// no validation rules for ExpireAt

	// no validation rules for BookingStatus

	// no validation rules for Amount

	// no validation rules for Currency

	if len(errors) > 0 {
		return BookingMultiError(errors)
	}

	return nil
}

// BookingMultiError is an error wrapping multiple validation errors returned
// by Booking.ValidateAll() if the designated constraints aren't met.
type BookingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BookingMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BookingMultiError) AllErrors() []error { return m }

// BookingValidationError is the validation error returned by Booking.Validate
// if the designated constraints aren't met.
type BookingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BookingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BookingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BookingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BookingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BookingValidationError) ErrorName() string { return "BookingValidationError" }

// Error satisfies the builtin error interface
func (e BookingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBooking.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BookingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BookingValidationError{}

// Validate checks the field values on CreateBookingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateBookingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBookingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateBookingRequestMultiError, or nil if none found.
func (m *CreateBookingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBookingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for ShowtimeId

	// no validation rules for SeatId

	// no validation rules for Amount

	// no validation rules for Currency

	if len(errors) > 0 {
		return CreateBookingRequestMultiError(errors)
	}

	return nil
}

// CreateBookingRequestMultiError is an error wrapping multiple validation
// errors returned by CreateBookingRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateBookingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBookingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBookingRequestMultiError) AllErrors() []error { return m }

// CreateBookingRequestValidationError is the validation error returned by
// CreateBookingRequest.Validate if the designated constraints aren't met.
type CreateBookingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBookingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBookingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBookingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBookingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBookingRequestValidationError) ErrorName() string {
	return "CreateBookingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBookingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBookingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBookingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBookingRequestValidationError{}

// Validate checks the field values on CreateBookingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateBookingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBookingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateBookingResponseMultiError, or nil if none found.
func (m *CreateBookingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBookingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBooking()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateBookingResponseValidationError{
					field:  "Booking",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateBookingResponseValidationError{
					field:  "Booking",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBooking()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateBookingResponseValidationError{
				field:  "Booking",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateBookingResponseMultiError(errors)
	}

	return nil
}

// CreateBookingResponseMultiError is an error wrapping multiple validation
// errors returned by CreateBookingResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateBookingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBookingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBookingResponseMultiError) AllErrors() []error { return m }

// CreateBookingResponseValidationError is the validation error returned by
// CreateBookingResponse.Validate if the designated constraints aren't met.
type CreateBookingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBookingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBookingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBookingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBookingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBookingResponseValidationError) ErrorName() string {
	return "CreateBookingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBookingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBookingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBookingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBookingResponseValidationError{}

// Validate checks the field values on GetBookingByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBookingByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBookingByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBookingByIdRequestMultiError, or nil if none found.
func (m *GetBookingByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBookingByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BookingId

	if len(errors) > 0 {
		return GetBookingByIdRequestMultiError(errors)
	}

	return nil
}

// GetBookingByIdRequestMultiError is an error wrapping multiple validation
// errors returned by GetBookingByIdRequest.ValidateAll() if the designated
// constraints aren't met.
type GetBookingByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBookingByIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBookingByIdRequestMultiError) AllErrors() []error { return m }

// GetBookingByIdRequestValidationError is the validation error returned by
// GetBookingByIdRequest.Validate if the designated constraints aren't met.
type GetBookingByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBookingByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBookingByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBookingByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBookingByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBookingByIdRequestValidationError) ErrorName() string {
	return "GetBookingByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBookingByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBookingByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBookingByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBookingByIdRequestValidationError{}

// Validate checks the field values on GetBookingByIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBookingByIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBookingByIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBookingByIdResponseMultiError, or nil if none found.
func (m *GetBookingByIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBookingByIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBooking()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetBookingByIdResponseValidationError{
					field:  "Booking",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetBookingByIdResponseValidationError{
					field:  "Booking",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBooking()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetBookingByIdResponseValidationError{
				field:  "Booking",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetBookingByIdResponseMultiError(errors)
	}

	return nil
}

// GetBookingByIdResponseMultiError is an error wrapping multiple validation
// errors returned by GetBookingByIdResponse.ValidateAll() if the designated
// constraints aren't met.
type GetBookingByIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBookingByIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBookingByIdResponseMultiError) AllErrors() []error { return m }

// GetBookingByIdResponseValidationError is the validation error returned by
// GetBookingByIdResponse.Validate if the designated constraints aren't met.
type GetBookingByIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBookingByIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBookingByIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBookingByIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBookingByIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBookingByIdResponseValidationError) ErrorName() string {
	return "GetBookingByIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetBookingByIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBookingByIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBookingByIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBookingByIdResponseValidationError{}

// Validate checks the field values on GetBookingWithStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBookingWithStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBookingWithStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBookingWithStatusRequestMultiError, or nil if none found.
func (m *GetBookingWithStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBookingWithStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BookingId

	// no validation rules for UserId

	// no validation rules for BookingStatus

	if len(errors) > 0 {
		return GetBookingWithStatusRequestMultiError(errors)
	}

	return nil
}

// GetBookingWithStatusRequestMultiError is an error wrapping multiple
// validation errors returned by GetBookingWithStatusRequest.ValidateAll() if
// the designated constraints aren't met.
type GetBookingWithStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBookingWithStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBookingWithStatusRequestMultiError) AllErrors() []error { return m }

// GetBookingWithStatusRequestValidationError is the validation error returned
// by GetBookingWithStatusRequest.Validate if the designated constraints
// aren't met.
type GetBookingWithStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBookingWithStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBookingWithStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBookingWithStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBookingWithStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBookingWithStatusRequestValidationError) ErrorName() string {
	return "GetBookingWithStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBookingWithStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBookingWithStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBookingWithStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBookingWithStatusRequestValidationError{}

// Validate checks the field values on GetBookingWithStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBookingWithStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBookingWithStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBookingWithStatusResponseMultiError, or nil if none found.
func (m *GetBookingWithStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBookingWithStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBooking()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetBookingWithStatusResponseValidationError{
					field:  "Booking",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetBookingWithStatusResponseValidationError{
					field:  "Booking",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBooking()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetBookingWithStatusResponseValidationError{
				field:  "Booking",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetBookingWithStatusResponseMultiError(errors)
	}

	return nil
}

// GetBookingWithStatusResponseMultiError is an error wrapping multiple
// validation errors returned by GetBookingWithStatusResponse.ValidateAll() if
// the designated constraints aren't met.
type GetBookingWithStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBookingWithStatusResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBookingWithStatusResponseMultiError) AllErrors() []error { return m }

// GetBookingWithStatusResponseValidationError is the validation error returned
// by GetBookingWithStatusResponse.Validate if the designated constraints
// aren't met.
type GetBookingWithStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBookingWithStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBookingWithStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBookingWithStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBookingWithStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBookingWithStatusResponseValidationError) ErrorName() string {
	return "GetBookingWithStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetBookingWithStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBookingWithStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBookingWithStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBookingWithStatusResponseValidationError{}

// Validate checks the field values on
// UpdateBookingStatusFromInitializingToPendingRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateBookingStatusFromInitializingToPendingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdateBookingStatusFromInitializingToPendingRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// UpdateBookingStatusFromInitializingToPendingRequestMultiError, or nil if
// none found.
func (m *UpdateBookingStatusFromInitializingToPendingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBookingStatusFromInitializingToPendingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BookingId

	if len(errors) > 0 {
		return UpdateBookingStatusFromInitializingToPendingRequestMultiError(errors)
	}

	return nil
}

// UpdateBookingStatusFromInitializingToPendingRequestMultiError is an error
// wrapping multiple validation errors returned by
// UpdateBookingStatusFromInitializingToPendingRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateBookingStatusFromInitializingToPendingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBookingStatusFromInitializingToPendingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBookingStatusFromInitializingToPendingRequestMultiError) AllErrors() []error { return m }

// UpdateBookingStatusFromInitializingToPendingRequestValidationError is the
// validation error returned by
// UpdateBookingStatusFromInitializingToPendingRequest.Validate if the
// designated constraints aren't met.
type UpdateBookingStatusFromInitializingToPendingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBookingStatusFromInitializingToPendingRequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e UpdateBookingStatusFromInitializingToPendingRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e UpdateBookingStatusFromInitializingToPendingRequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e UpdateBookingStatusFromInitializingToPendingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBookingStatusFromInitializingToPendingRequestValidationError) ErrorName() string {
	return "UpdateBookingStatusFromInitializingToPendingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBookingStatusFromInitializingToPendingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBookingStatusFromInitializingToPendingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBookingStatusFromInitializingToPendingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBookingStatusFromInitializingToPendingRequestValidationError{}

// Validate checks the field values on
// UpdateBookingStatusFromInitializingToPendingResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateBookingStatusFromInitializingToPendingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdateBookingStatusFromInitializingToPendingResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// UpdateBookingStatusFromInitializingToPendingResponseMultiError, or nil if
// none found.
func (m *UpdateBookingStatusFromInitializingToPendingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBookingStatusFromInitializingToPendingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateBookingStatusFromInitializingToPendingResponseMultiError(errors)
	}

	return nil
}

// UpdateBookingStatusFromInitializingToPendingResponseMultiError is an error
// wrapping multiple validation errors returned by
// UpdateBookingStatusFromInitializingToPendingResponse.ValidateAll() if the
// designated constraints aren't met.
type UpdateBookingStatusFromInitializingToPendingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBookingStatusFromInitializingToPendingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBookingStatusFromInitializingToPendingResponseMultiError) AllErrors() []error { return m }

// UpdateBookingStatusFromInitializingToPendingResponseValidationError is the
// validation error returned by
// UpdateBookingStatusFromInitializingToPendingResponse.Validate if the
// designated constraints aren't met.
type UpdateBookingStatusFromInitializingToPendingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBookingStatusFromInitializingToPendingResponseValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e UpdateBookingStatusFromInitializingToPendingResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e UpdateBookingStatusFromInitializingToPendingResponseValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e UpdateBookingStatusFromInitializingToPendingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBookingStatusFromInitializingToPendingResponseValidationError) ErrorName() string {
	return "UpdateBookingStatusFromInitializingToPendingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBookingStatusFromInitializingToPendingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBookingStatusFromInitializingToPendingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBookingStatusFromInitializingToPendingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBookingStatusFromInitializingToPendingResponseValidationError{}

// Validate checks the field values on
// GetBookingListProcessingAndConfirmedByShowtimeIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBookingListProcessingAndConfirmedByShowtimeIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetBookingListProcessingAndConfirmedByShowtimeIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBookingListProcessingAndConfirmedByShowtimeIdRequestMultiError, or nil
// if none found.
func (m *GetBookingListProcessingAndConfirmedByShowtimeIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBookingListProcessingAndConfirmedByShowtimeIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ShowtimeId

	if len(errors) > 0 {
		return GetBookingListProcessingAndConfirmedByShowtimeIdRequestMultiError(errors)
	}

	return nil
}

// GetBookingListProcessingAndConfirmedByShowtimeIdRequestMultiError is an
// error wrapping multiple validation errors returned by
// GetBookingListProcessingAndConfirmedByShowtimeIdRequest.ValidateAll() if
// the designated constraints aren't met.
type GetBookingListProcessingAndConfirmedByShowtimeIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBookingListProcessingAndConfirmedByShowtimeIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBookingListProcessingAndConfirmedByShowtimeIdRequestMultiError) AllErrors() []error {
	return m
}

// GetBookingListProcessingAndConfirmedByShowtimeIdRequestValidationError is
// the validation error returned by
// GetBookingListProcessingAndConfirmedByShowtimeIdRequest.Validate if the
// designated constraints aren't met.
type GetBookingListProcessingAndConfirmedByShowtimeIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBookingListProcessingAndConfirmedByShowtimeIdRequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e GetBookingListProcessingAndConfirmedByShowtimeIdRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetBookingListProcessingAndConfirmedByShowtimeIdRequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e GetBookingListProcessingAndConfirmedByShowtimeIdRequestValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e GetBookingListProcessingAndConfirmedByShowtimeIdRequestValidationError) ErrorName() string {
	return "GetBookingListProcessingAndConfirmedByShowtimeIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBookingListProcessingAndConfirmedByShowtimeIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBookingListProcessingAndConfirmedByShowtimeIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBookingListProcessingAndConfirmedByShowtimeIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBookingListProcessingAndConfirmedByShowtimeIdRequestValidationError{}

// Validate checks the field values on
// GetBookingListProcessingAndConfirmedByShowtimeIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBookingListProcessingAndConfirmedByShowtimeIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetBookingListProcessingAndConfirmedByShowtimeIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBookingListProcessingAndConfirmedByShowtimeIdResponseMultiError, or nil
// if none found.
func (m *GetBookingListProcessingAndConfirmedByShowtimeIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBookingListProcessingAndConfirmedByShowtimeIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetBookingList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetBookingListProcessingAndConfirmedByShowtimeIdResponseValidationError{
						field:  fmt.Sprintf("BookingList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetBookingListProcessingAndConfirmedByShowtimeIdResponseValidationError{
						field:  fmt.Sprintf("BookingList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetBookingListProcessingAndConfirmedByShowtimeIdResponseValidationError{
					field:  fmt.Sprintf("BookingList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetBookingListProcessingAndConfirmedByShowtimeIdResponseMultiError(errors)
	}

	return nil
}

// GetBookingListProcessingAndConfirmedByShowtimeIdResponseMultiError is an
// error wrapping multiple validation errors returned by
// GetBookingListProcessingAndConfirmedByShowtimeIdResponse.ValidateAll() if
// the designated constraints aren't met.
type GetBookingListProcessingAndConfirmedByShowtimeIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBookingListProcessingAndConfirmedByShowtimeIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBookingListProcessingAndConfirmedByShowtimeIdResponseMultiError) AllErrors() []error {
	return m
}

// GetBookingListProcessingAndConfirmedByShowtimeIdResponseValidationError is
// the validation error returned by
// GetBookingListProcessingAndConfirmedByShowtimeIdResponse.Validate if the
// designated constraints aren't met.
type GetBookingListProcessingAndConfirmedByShowtimeIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBookingListProcessingAndConfirmedByShowtimeIdResponseValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e GetBookingListProcessingAndConfirmedByShowtimeIdResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetBookingListProcessingAndConfirmedByShowtimeIdResponseValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e GetBookingListProcessingAndConfirmedByShowtimeIdResponseValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e GetBookingListProcessingAndConfirmedByShowtimeIdResponseValidationError) ErrorName() string {
	return "GetBookingListProcessingAndConfirmedByShowtimeIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetBookingListProcessingAndConfirmedByShowtimeIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBookingListProcessingAndConfirmedByShowtimeIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBookingListProcessingAndConfirmedByShowtimeIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBookingListProcessingAndConfirmedByShowtimeIdResponseValidationError{}

// Validate checks the field values on Theater with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Theater) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Theater with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TheaterMultiError, or nil if none found.
func (m *Theater) ValidateAll() error {
	return m.validate(true)
}

func (m *Theater) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for DisplayName

	// no validation rules for Location

	// no validation rules for ScreenCount

	// no validation rules for SeatCount

	if len(errors) > 0 {
		return TheaterMultiError(errors)
	}

	return nil
}

// TheaterMultiError is an error wrapping multiple validation errors returned
// by Theater.ValidateAll() if the designated constraints aren't met.
type TheaterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TheaterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TheaterMultiError) AllErrors() []error { return m }

// TheaterValidationError is the validation error returned by Theater.Validate
// if the designated constraints aren't met.
type TheaterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TheaterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TheaterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TheaterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TheaterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TheaterValidationError) ErrorName() string { return "TheaterValidationError" }

// Error satisfies the builtin error interface
func (e TheaterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTheater.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TheaterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TheaterValidationError{}

// Validate checks the field values on ShowtimeDayOfTheWeek with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ShowtimeDayOfTheWeek) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShowtimeDayOfTheWeek with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ShowtimeDayOfTheWeekMultiError, or nil if none found.
func (m *ShowtimeDayOfTheWeek) ValidateAll() error {
	return m.validate(true)
}

func (m *ShowtimeDayOfTheWeek) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for DisplayName

	if len(errors) > 0 {
		return ShowtimeDayOfTheWeekMultiError(errors)
	}

	return nil
}

// ShowtimeDayOfTheWeekMultiError is an error wrapping multiple validation
// errors returned by ShowtimeDayOfTheWeek.ValidateAll() if the designated
// constraints aren't met.
type ShowtimeDayOfTheWeekMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShowtimeDayOfTheWeekMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShowtimeDayOfTheWeekMultiError) AllErrors() []error { return m }

// ShowtimeDayOfTheWeekValidationError is the validation error returned by
// ShowtimeDayOfTheWeek.Validate if the designated constraints aren't met.
type ShowtimeDayOfTheWeekValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShowtimeDayOfTheWeekValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShowtimeDayOfTheWeekValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShowtimeDayOfTheWeekValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShowtimeDayOfTheWeekValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShowtimeDayOfTheWeekValidationError) ErrorName() string {
	return "ShowtimeDayOfTheWeekValidationError"
}

// Error satisfies the builtin error interface
func (e ShowtimeDayOfTheWeekValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShowtimeDayOfTheWeek.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShowtimeDayOfTheWeekValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShowtimeDayOfTheWeekValidationError{}

// Validate checks the field values on ShowtimeSlot with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ShowtimeSlot) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShowtimeSlot with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ShowtimeSlotMultiError, or
// nil if none found.
func (m *ShowtimeSlot) ValidateAll() error {
	return m.validate(true)
}

func (m *ShowtimeSlot) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for DisplayName

	if len(errors) > 0 {
		return ShowtimeSlotMultiError(errors)
	}

	return nil
}

// ShowtimeSlotMultiError is an error wrapping multiple validation errors
// returned by ShowtimeSlot.ValidateAll() if the designated constraints aren't met.
type ShowtimeSlotMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShowtimeSlotMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShowtimeSlotMultiError) AllErrors() []error { return m }

// ShowtimeSlotValidationError is the validation error returned by
// ShowtimeSlot.Validate if the designated constraints aren't met.
type ShowtimeSlotValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShowtimeSlotValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShowtimeSlotValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShowtimeSlotValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShowtimeSlotValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShowtimeSlotValidationError) ErrorName() string { return "ShowtimeSlotValidationError" }

// Error satisfies the builtin error interface
func (e ShowtimeSlotValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShowtimeSlot.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShowtimeSlotValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShowtimeSlotValidationError{}

// Validate checks the field values on Showtime with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Showtime) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Showtime with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ShowtimeMultiError, or nil
// if none found.
func (m *Showtime) ValidateAll() error {
	return m.validate(true)
}

func (m *Showtime) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for OfMovieId

	// no validation rules for OfScreenId

	// no validation rules for TimeStart

	// no validation rules for TimeEnd

	if all {
		switch v := interface{}(m.GetShowtimeSlot()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShowtimeValidationError{
					field:  "ShowtimeSlot",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShowtimeValidationError{
					field:  "ShowtimeSlot",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShowtimeSlot()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShowtimeValidationError{
				field:  "ShowtimeSlot",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetShowtimeDayOfTheWeek()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShowtimeValidationError{
					field:  "ShowtimeDayOfTheWeek",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShowtimeValidationError{
					field:  "ShowtimeDayOfTheWeek",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShowtimeDayOfTheWeek()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShowtimeValidationError{
				field:  "ShowtimeDayOfTheWeek",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ShowtimeMultiError(errors)
	}

	return nil
}

// ShowtimeMultiError is an error wrapping multiple validation errors returned
// by Showtime.ValidateAll() if the designated constraints aren't met.
type ShowtimeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShowtimeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShowtimeMultiError) AllErrors() []error { return m }

// ShowtimeValidationError is the validation error returned by
// Showtime.Validate if the designated constraints aren't met.
type ShowtimeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShowtimeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShowtimeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShowtimeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShowtimeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShowtimeValidationError) ErrorName() string { return "ShowtimeValidationError" }

// Error satisfies the builtin error interface
func (e ShowtimeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShowtime.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShowtimeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShowtimeValidationError{}

// Validate checks the field values on ScreenType with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ScreenType) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScreenType with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ScreenTypeMultiError, or
// nil if none found.
func (m *ScreenType) ValidateAll() error {
	return m.validate(true)
}

func (m *ScreenType) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for DisplayName

	// no validation rules for Description

	// no validation rules for SeatCount

	// no validation rules for RowCount

	// no validation rules for SeatOfRowCount

	if len(errors) > 0 {
		return ScreenTypeMultiError(errors)
	}

	return nil
}

// ScreenTypeMultiError is an error wrapping multiple validation errors
// returned by ScreenType.ValidateAll() if the designated constraints aren't met.
type ScreenTypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScreenTypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScreenTypeMultiError) AllErrors() []error { return m }

// ScreenTypeValidationError is the validation error returned by
// ScreenType.Validate if the designated constraints aren't met.
type ScreenTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScreenTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScreenTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScreenTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScreenTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScreenTypeValidationError) ErrorName() string { return "ScreenTypeValidationError" }

// Error satisfies the builtin error interface
func (e ScreenTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScreenType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScreenTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScreenTypeValidationError{}

// Validate checks the field values on Screen with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Screen) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Screen with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ScreenMultiError, or nil if none found.
func (m *Screen) ValidateAll() error {
	return m.validate(true)
}

func (m *Screen) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for OfTheaterId

	if all {
		switch v := interface{}(m.GetScreenType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ScreenValidationError{
					field:  "ScreenType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ScreenValidationError{
					field:  "ScreenType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetScreenType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScreenValidationError{
				field:  "ScreenType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DisplayName

	if len(errors) > 0 {
		return ScreenMultiError(errors)
	}

	return nil
}

// ScreenMultiError is an error wrapping multiple validation errors returned by
// Screen.ValidateAll() if the designated constraints aren't met.
type ScreenMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScreenMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScreenMultiError) AllErrors() []error { return m }

// ScreenValidationError is the validation error returned by Screen.Validate if
// the designated constraints aren't met.
type ScreenValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScreenValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScreenValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScreenValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScreenValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScreenValidationError) ErrorName() string { return "ScreenValidationError" }

// Error satisfies the builtin error interface
func (e ScreenValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScreen.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScreenValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScreenValidationError{}

// Validate checks the field values on SeatType with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SeatType) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SeatType with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SeatTypeMultiError, or nil
// if none found.
func (m *SeatType) ValidateAll() error {
	return m.validate(true)
}

func (m *SeatType) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for DisplayName

	if len(errors) > 0 {
		return SeatTypeMultiError(errors)
	}

	return nil
}

// SeatTypeMultiError is an error wrapping multiple validation errors returned
// by SeatType.ValidateAll() if the designated constraints aren't met.
type SeatTypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SeatTypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SeatTypeMultiError) AllErrors() []error { return m }

// SeatTypeValidationError is the validation error returned by
// SeatType.Validate if the designated constraints aren't met.
type SeatTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SeatTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SeatTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SeatTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SeatTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SeatTypeValidationError) ErrorName() string { return "SeatTypeValidationError" }

// Error satisfies the builtin error interface
func (e SeatTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSeatType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SeatTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SeatTypeValidationError{}

// Validate checks the field values on Seat with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Seat) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Seat with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SeatMultiError, or nil if none found.
func (m *Seat) ValidateAll() error {
	return m.validate(true)
}

func (m *Seat) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetSeatType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SeatValidationError{
					field:  "SeatType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SeatValidationError{
					field:  "SeatType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSeatType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SeatValidationError{
				field:  "SeatType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for OfScreenId

	// no validation rules for Column

	// no validation rules for Row

	// no validation rules for No

	if len(errors) > 0 {
		return SeatMultiError(errors)
	}

	return nil
}

// SeatMultiError is an error wrapping multiple validation errors returned by
// Seat.ValidateAll() if the designated constraints aren't met.
type SeatMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SeatMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SeatMultiError) AllErrors() []error { return m }

// SeatValidationError is the validation error returned by Seat.Validate if the
// designated constraints aren't met.
type SeatValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SeatValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SeatValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SeatValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SeatValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SeatValidationError) ErrorName() string { return "SeatValidationError" }

// Error satisfies the builtin error interface
func (e SeatValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSeat.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SeatValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SeatValidationError{}

// Validate checks the field values on MovieType with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MovieType) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MovieType with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MovieTypeMultiError, or nil
// if none found.
func (m *MovieType) ValidateAll() error {
	return m.validate(true)
}

func (m *MovieType) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for DisplayName

	if len(errors) > 0 {
		return MovieTypeMultiError(errors)
	}

	return nil
}

// MovieTypeMultiError is an error wrapping multiple validation errors returned
// by MovieType.ValidateAll() if the designated constraints aren't met.
type MovieTypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MovieTypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MovieTypeMultiError) AllErrors() []error { return m }

// MovieTypeValidationError is the validation error returned by
// MovieType.Validate if the designated constraints aren't met.
type MovieTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MovieTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MovieTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MovieTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MovieTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MovieTypeValidationError) ErrorName() string { return "MovieTypeValidationError" }

// Error satisfies the builtin error interface
func (e MovieTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMovieType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MovieTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MovieTypeValidationError{}

// Validate checks the field values on MovieImage with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MovieImage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MovieImage with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MovieImageMultiError, or
// nil if none found.
func (m *MovieImage) ValidateAll() error {
	return m.validate(true)
}

func (m *MovieImage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for OfMovieId

	// no validation rules for OriginalFileName

	// no validation rules for OriginalImageFileName

	if len(errors) > 0 {
		return MovieImageMultiError(errors)
	}

	return nil
}

// MovieImageMultiError is an error wrapping multiple validation errors
// returned by MovieImage.ValidateAll() if the designated constraints aren't met.
type MovieImageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MovieImageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MovieImageMultiError) AllErrors() []error { return m }

// MovieImageValidationError is the validation error returned by
// MovieImage.Validate if the designated constraints aren't met.
type MovieImageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MovieImageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MovieImageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MovieImageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MovieImageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MovieImageValidationError) ErrorName() string { return "MovieImageValidationError" }

// Error satisfies the builtin error interface
func (e MovieImageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMovieImage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MovieImageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MovieImageValidationError{}

// Validate checks the field values on MoviePoster with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MoviePoster) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MoviePoster with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MoviePosterMultiError, or
// nil if none found.
func (m *MoviePoster) ValidateAll() error {
	return m.validate(true)
}

func (m *MoviePoster) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OfMovieId

	// no validation rules for OriginalFileName

	// no validation rules for OriginalImageFileName

	if len(errors) > 0 {
		return MoviePosterMultiError(errors)
	}

	return nil
}

// MoviePosterMultiError is an error wrapping multiple validation errors
// returned by MoviePoster.ValidateAll() if the designated constraints aren't met.
type MoviePosterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MoviePosterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MoviePosterMultiError) AllErrors() []error { return m }

// MoviePosterValidationError is the validation error returned by
// MoviePoster.Validate if the designated constraints aren't met.
type MoviePosterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MoviePosterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MoviePosterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MoviePosterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MoviePosterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MoviePosterValidationError) ErrorName() string { return "MoviePosterValidationError" }

// Error satisfies the builtin error interface
func (e MoviePosterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMoviePoster.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MoviePosterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MoviePosterValidationError{}

// Validate checks the field values on MovieTrailer with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MovieTrailer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MovieTrailer with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MovieTrailerMultiError, or
// nil if none found.
func (m *MovieTrailer) ValidateAll() error {
	return m.validate(true)
}

func (m *MovieTrailer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OfMovieId

	// no validation rules for YoutubeLinkUrl

	if len(errors) > 0 {
		return MovieTrailerMultiError(errors)
	}

	return nil
}

// MovieTrailerMultiError is an error wrapping multiple validation errors
// returned by MovieTrailer.ValidateAll() if the designated constraints aren't met.
type MovieTrailerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MovieTrailerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MovieTrailerMultiError) AllErrors() []error { return m }

// MovieTrailerValidationError is the validation error returned by
// MovieTrailer.Validate if the designated constraints aren't met.
type MovieTrailerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MovieTrailerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MovieTrailerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MovieTrailerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MovieTrailerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MovieTrailerValidationError) ErrorName() string { return "MovieTrailerValidationError" }

// Error satisfies the builtin error interface
func (e MovieTrailerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMovieTrailer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MovieTrailerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MovieTrailerValidationError{}

// Validate checks the field values on Movie with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Movie) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Movie with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MovieMultiError, or nil if none found.
func (m *Movie) ValidateAll() error {
	return m.validate(true)
}

func (m *Movie) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Description

	// no validation rules for Duration

	// no validation rules for ReleaseDate

	if all {
		switch v := interface{}(m.GetPoster()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MovieValidationError{
					field:  "Poster",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MovieValidationError{
					field:  "Poster",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPoster()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MovieValidationError{
				field:  "Poster",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTrailer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MovieValidationError{
					field:  "Trailer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MovieValidationError{
					field:  "Trailer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTrailer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MovieValidationError{
				field:  "Trailer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMovieType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MovieValidationError{
					field:  "MovieType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MovieValidationError{
					field:  "MovieType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMovieType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MovieValidationError{
				field:  "MovieType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MovieMultiError(errors)
	}

	return nil
}

// MovieMultiError is an error wrapping multiple validation errors returned by
// Movie.ValidateAll() if the designated constraints aren't met.
type MovieMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MovieMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MovieMultiError) AllErrors() []error { return m }

// MovieValidationError is the validation error returned by Movie.Validate if
// the designated constraints aren't met.
type MovieValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MovieValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MovieValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MovieValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MovieValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MovieValidationError) ErrorName() string { return "MovieValidationError" }

// Error satisfies the builtin error interface
func (e MovieValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMovie.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MovieValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MovieValidationError{}

// Validate checks the field values on BookingMetadata with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *BookingMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BookingMetadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BookingMetadataMultiError, or nil if none found.
func (m *BookingMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *BookingMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBooking()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BookingMetadataValidationError{
					field:  "Booking",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BookingMetadataValidationError{
					field:  "Booking",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBooking()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BookingMetadataValidationError{
				field:  "Booking",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTheater()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BookingMetadataValidationError{
					field:  "Theater",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BookingMetadataValidationError{
					field:  "Theater",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTheater()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BookingMetadataValidationError{
				field:  "Theater",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetScreen()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BookingMetadataValidationError{
					field:  "Screen",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BookingMetadataValidationError{
					field:  "Screen",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetScreen()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BookingMetadataValidationError{
				field:  "Screen",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetShowtime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BookingMetadataValidationError{
					field:  "Showtime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BookingMetadataValidationError{
					field:  "Showtime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShowtime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BookingMetadataValidationError{
				field:  "Showtime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMovie()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BookingMetadataValidationError{
					field:  "Movie",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BookingMetadataValidationError{
					field:  "Movie",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMovie()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BookingMetadataValidationError{
				field:  "Movie",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSeat()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BookingMetadataValidationError{
					field:  "Seat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BookingMetadataValidationError{
					field:  "Seat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSeat()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BookingMetadataValidationError{
				field:  "Seat",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BookingMetadataMultiError(errors)
	}

	return nil
}

// BookingMetadataMultiError is an error wrapping multiple validation errors
// returned by BookingMetadata.ValidateAll() if the designated constraints
// aren't met.
type BookingMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BookingMetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BookingMetadataMultiError) AllErrors() []error { return m }

// BookingMetadataValidationError is the validation error returned by
// BookingMetadata.Validate if the designated constraints aren't met.
type BookingMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BookingMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BookingMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BookingMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BookingMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BookingMetadataValidationError) ErrorName() string { return "BookingMetadataValidationError" }

// Error satisfies the builtin error interface
func (e BookingMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBookingMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BookingMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BookingMetadataValidationError{}

// Validate checks the field values on GetBookingListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBookingListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBookingListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBookingListRequestMultiError, or nil if none found.
func (m *GetBookingListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBookingListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for BookingStatus

	// no validation rules for Offset

	// no validation rules for Limit

	if len(errors) > 0 {
		return GetBookingListRequestMultiError(errors)
	}

	return nil
}

// GetBookingListRequestMultiError is an error wrapping multiple validation
// errors returned by GetBookingListRequest.ValidateAll() if the designated
// constraints aren't met.
type GetBookingListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBookingListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBookingListRequestMultiError) AllErrors() []error { return m }

// GetBookingListRequestValidationError is the validation error returned by
// GetBookingListRequest.Validate if the designated constraints aren't met.
type GetBookingListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBookingListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBookingListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBookingListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBookingListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBookingListRequestValidationError) ErrorName() string {
	return "GetBookingListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBookingListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBookingListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBookingListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBookingListRequestValidationError{}

// Validate checks the field values on GetBookingListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBookingListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBookingListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBookingListResponseMultiError, or nil if none found.
func (m *GetBookingListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBookingListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetBookingList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetBookingListResponseValidationError{
						field:  fmt.Sprintf("BookingList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetBookingListResponseValidationError{
						field:  fmt.Sprintf("BookingList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetBookingListResponseValidationError{
					field:  fmt.Sprintf("BookingList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetBookingListResponseMultiError(errors)
	}

	return nil
}

// GetBookingListResponseMultiError is an error wrapping multiple validation
// errors returned by GetBookingListResponse.ValidateAll() if the designated
// constraints aren't met.
type GetBookingListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBookingListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBookingListResponseMultiError) AllErrors() []error { return m }

// GetBookingListResponseValidationError is the validation error returned by
// GetBookingListResponse.Validate if the designated constraints aren't met.
type GetBookingListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBookingListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBookingListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBookingListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBookingListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBookingListResponseValidationError) ErrorName() string {
	return "GetBookingListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetBookingListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBookingListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBookingListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBookingListResponseValidationError{}
