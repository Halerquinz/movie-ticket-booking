// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: booking_service/booking_service.proto

package booking_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	BookingService_CreateBooking_FullMethodName                                    = "/booking_service.BookingService/CreateBooking"
	BookingService_GetBookingById_FullMethodName                                   = "/booking_service.BookingService/GetBookingById"
	BookingService_GetBookingWithStatus_FullMethodName                             = "/booking_service.BookingService/GetBookingWithStatus"
	BookingService_UpdateBookingStatusFromInitializingToPending_FullMethodName     = "/booking_service.BookingService/UpdateBookingStatusFromInitializingToPending"
	BookingService_GetBookingListProcessingAndConfirmedByShowtimeId_FullMethodName = "/booking_service.BookingService/GetBookingListProcessingAndConfirmedByShowtimeId"
	BookingService_GetBookingList_FullMethodName                                   = "/booking_service.BookingService/GetBookingList"
)

// BookingServiceClient is the client API for BookingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookingServiceClient interface {
	CreateBooking(ctx context.Context, in *CreateBookingRequest, opts ...grpc.CallOption) (*CreateBookingResponse, error)
	GetBookingById(ctx context.Context, in *GetBookingByIdRequest, opts ...grpc.CallOption) (*GetBookingByIdResponse, error)
	GetBookingWithStatus(ctx context.Context, in *GetBookingWithStatusRequest, opts ...grpc.CallOption) (*GetBookingWithStatusResponse, error)
	UpdateBookingStatusFromInitializingToPending(ctx context.Context, in *UpdateBookingStatusFromInitializingToPendingRequest, opts ...grpc.CallOption) (*UpdateBookingStatusFromInitializingToPendingResponse, error)
	GetBookingListProcessingAndConfirmedByShowtimeId(ctx context.Context, in *GetBookingListProcessingAndConfirmedByShowtimeIdRequest, opts ...grpc.CallOption) (*GetBookingListProcessingAndConfirmedByShowtimeIdResponse, error)
	GetBookingList(ctx context.Context, in *GetBookingListRequest, opts ...grpc.CallOption) (*GetBookingListResponse, error)
}

type bookingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBookingServiceClient(cc grpc.ClientConnInterface) BookingServiceClient {
	return &bookingServiceClient{cc}
}

func (c *bookingServiceClient) CreateBooking(ctx context.Context, in *CreateBookingRequest, opts ...grpc.CallOption) (*CreateBookingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBookingResponse)
	err := c.cc.Invoke(ctx, BookingService_CreateBooking_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingServiceClient) GetBookingById(ctx context.Context, in *GetBookingByIdRequest, opts ...grpc.CallOption) (*GetBookingByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBookingByIdResponse)
	err := c.cc.Invoke(ctx, BookingService_GetBookingById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingServiceClient) GetBookingWithStatus(ctx context.Context, in *GetBookingWithStatusRequest, opts ...grpc.CallOption) (*GetBookingWithStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBookingWithStatusResponse)
	err := c.cc.Invoke(ctx, BookingService_GetBookingWithStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingServiceClient) UpdateBookingStatusFromInitializingToPending(ctx context.Context, in *UpdateBookingStatusFromInitializingToPendingRequest, opts ...grpc.CallOption) (*UpdateBookingStatusFromInitializingToPendingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateBookingStatusFromInitializingToPendingResponse)
	err := c.cc.Invoke(ctx, BookingService_UpdateBookingStatusFromInitializingToPending_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingServiceClient) GetBookingListProcessingAndConfirmedByShowtimeId(ctx context.Context, in *GetBookingListProcessingAndConfirmedByShowtimeIdRequest, opts ...grpc.CallOption) (*GetBookingListProcessingAndConfirmedByShowtimeIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBookingListProcessingAndConfirmedByShowtimeIdResponse)
	err := c.cc.Invoke(ctx, BookingService_GetBookingListProcessingAndConfirmedByShowtimeId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingServiceClient) GetBookingList(ctx context.Context, in *GetBookingListRequest, opts ...grpc.CallOption) (*GetBookingListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBookingListResponse)
	err := c.cc.Invoke(ctx, BookingService_GetBookingList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookingServiceServer is the server API for BookingService service.
// All implementations must embed UnimplementedBookingServiceServer
// for forward compatibility
type BookingServiceServer interface {
	CreateBooking(context.Context, *CreateBookingRequest) (*CreateBookingResponse, error)
	GetBookingById(context.Context, *GetBookingByIdRequest) (*GetBookingByIdResponse, error)
	GetBookingWithStatus(context.Context, *GetBookingWithStatusRequest) (*GetBookingWithStatusResponse, error)
	UpdateBookingStatusFromInitializingToPending(context.Context, *UpdateBookingStatusFromInitializingToPendingRequest) (*UpdateBookingStatusFromInitializingToPendingResponse, error)
	GetBookingListProcessingAndConfirmedByShowtimeId(context.Context, *GetBookingListProcessingAndConfirmedByShowtimeIdRequest) (*GetBookingListProcessingAndConfirmedByShowtimeIdResponse, error)
	GetBookingList(context.Context, *GetBookingListRequest) (*GetBookingListResponse, error)
	mustEmbedUnimplementedBookingServiceServer()
}

// UnimplementedBookingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBookingServiceServer struct {
}

func (UnimplementedBookingServiceServer) CreateBooking(context.Context, *CreateBookingRequest) (*CreateBookingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBooking not implemented")
}
func (UnimplementedBookingServiceServer) GetBookingById(context.Context, *GetBookingByIdRequest) (*GetBookingByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBookingById not implemented")
}
func (UnimplementedBookingServiceServer) GetBookingWithStatus(context.Context, *GetBookingWithStatusRequest) (*GetBookingWithStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBookingWithStatus not implemented")
}
func (UnimplementedBookingServiceServer) UpdateBookingStatusFromInitializingToPending(context.Context, *UpdateBookingStatusFromInitializingToPendingRequest) (*UpdateBookingStatusFromInitializingToPendingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBookingStatusFromInitializingToPending not implemented")
}
func (UnimplementedBookingServiceServer) GetBookingListProcessingAndConfirmedByShowtimeId(context.Context, *GetBookingListProcessingAndConfirmedByShowtimeIdRequest) (*GetBookingListProcessingAndConfirmedByShowtimeIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBookingListProcessingAndConfirmedByShowtimeId not implemented")
}
func (UnimplementedBookingServiceServer) GetBookingList(context.Context, *GetBookingListRequest) (*GetBookingListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBookingList not implemented")
}
func (UnimplementedBookingServiceServer) mustEmbedUnimplementedBookingServiceServer() {}

// UnsafeBookingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookingServiceServer will
// result in compilation errors.
type UnsafeBookingServiceServer interface {
	mustEmbedUnimplementedBookingServiceServer()
}

func RegisterBookingServiceServer(s grpc.ServiceRegistrar, srv BookingServiceServer) {
	s.RegisterService(&BookingService_ServiceDesc, srv)
}

func _BookingService_CreateBooking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBookingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServiceServer).CreateBooking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookingService_CreateBooking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServiceServer).CreateBooking(ctx, req.(*CreateBookingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingService_GetBookingById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBookingByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServiceServer).GetBookingById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookingService_GetBookingById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServiceServer).GetBookingById(ctx, req.(*GetBookingByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingService_GetBookingWithStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBookingWithStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServiceServer).GetBookingWithStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookingService_GetBookingWithStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServiceServer).GetBookingWithStatus(ctx, req.(*GetBookingWithStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingService_UpdateBookingStatusFromInitializingToPending_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBookingStatusFromInitializingToPendingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServiceServer).UpdateBookingStatusFromInitializingToPending(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookingService_UpdateBookingStatusFromInitializingToPending_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServiceServer).UpdateBookingStatusFromInitializingToPending(ctx, req.(*UpdateBookingStatusFromInitializingToPendingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingService_GetBookingListProcessingAndConfirmedByShowtimeId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBookingListProcessingAndConfirmedByShowtimeIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServiceServer).GetBookingListProcessingAndConfirmedByShowtimeId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookingService_GetBookingListProcessingAndConfirmedByShowtimeId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServiceServer).GetBookingListProcessingAndConfirmedByShowtimeId(ctx, req.(*GetBookingListProcessingAndConfirmedByShowtimeIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingService_GetBookingList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBookingListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServiceServer).GetBookingList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookingService_GetBookingList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServiceServer).GetBookingList(ctx, req.(*GetBookingListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BookingService_ServiceDesc is the grpc.ServiceDesc for BookingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BookingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "booking_service.BookingService",
	HandlerType: (*BookingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBooking",
			Handler:    _BookingService_CreateBooking_Handler,
		},
		{
			MethodName: "GetBookingById",
			Handler:    _BookingService_GetBookingById_Handler,
		},
		{
			MethodName: "GetBookingWithStatus",
			Handler:    _BookingService_GetBookingWithStatus_Handler,
		},
		{
			MethodName: "UpdateBookingStatusFromInitializingToPending",
			Handler:    _BookingService_UpdateBookingStatusFromInitializingToPending_Handler,
		},
		{
			MethodName: "GetBookingListProcessingAndConfirmedByShowtimeId",
			Handler:    _BookingService_GetBookingListProcessingAndConfirmedByShowtimeId_Handler,
		},
		{
			MethodName: "GetBookingList",
			Handler:    _BookingService_GetBookingList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "booking_service/booking_service.proto",
}
