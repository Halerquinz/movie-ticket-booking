// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: user_service/user_service.proto

package user_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	UserService_CreateUser_FullMethodName                          = "/user_service.UserService/CreateUser"
	UserService_UpdateUser_FullMethodName                          = "/user_service.UserService/UpdateUser"
	UserService_GetUserList_FullMethodName                         = "/user_service.UserService/GetUserList"
	UserService_GetUser_FullMethodName                             = "/user_service.UserService/GetUser"
	UserService_SearchUser_FullMethodName                          = "/user_service.UserService/SearchUser"
	UserService_CreateUserPassword_FullMethodName                  = "/user_service.UserService/CreateUserPassword"
	UserService_UpdateUserPassword_FullMethodName                  = "/user_service.UserService/UpdateUserPassword"
	UserService_LoginWithPassword_FullMethodName                   = "/user_service.UserService/LoginWithPassword"
	UserService_GetUserFromToken_FullMethodName                    = "/user_service.UserService/GetUserFromToken"
	UserService_BlacklistToken_FullMethodName                      = "/user_service.UserService/BlacklistToken"
	UserService_CreateUserRole_FullMethodName                      = "/user_service.UserService/CreateUserRole"
	UserService_UpdateUserRole_FullMethodName                      = "/user_service.UserService/UpdateUserRole"
	UserService_DeleteUserRole_FullMethodName                      = "/user_service.UserService/DeleteUserRole"
	UserService_AddUserRoleToUser_FullMethodName                   = "/user_service.UserService/AddUserRoleToUser"
	UserService_RemoveUserRoleFromUser_FullMethodName              = "/user_service.UserService/RemoveUserRoleFromUser"
	UserService_GetUserRoleListOfUserList_FullMethodName           = "/user_service.UserService/GetUserRoleListOfUserList"
	UserService_CreateUserPermission_FullMethodName                = "/user_service.UserService/CreateUserPermission"
	UserService_UpdateUserPermission_FullMethodName                = "/user_service.UserService/UpdateUserPermission"
	UserService_DeleteUserPermission_FullMethodName                = "/user_service.UserService/DeleteUserPermission"
	UserService_GetUserPermissionList_FullMethodName               = "/user_service.UserService/GetUserPermissionList"
	UserService_AddUserPermissionToUserRole_FullMethodName         = "/user_service.UserService/AddUserPermissionToUserRole"
	UserService_RemoveUserPermissionFromUserRole_FullMethodName    = "/user_service.UserService/RemoveUserPermissionFromUserRole"
	UserService_GetUserPermissionListOfUserRoleList_FullMethodName = "/user_service.UserService/GetUserPermissionListOfUserRoleList"
	UserService_GetUserPermissionListOfUser_FullMethodName         = "/user_service.UserService/GetUserPermissionListOfUser"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
	GetUserList(ctx context.Context, in *GetUserListRequest, opts ...grpc.CallOption) (*GetUserListResponse, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	SearchUser(ctx context.Context, in *SearchUserRequest, opts ...grpc.CallOption) (*SearchUserResponse, error)
	CreateUserPassword(ctx context.Context, in *CreateUserPasswordRequest, opts ...grpc.CallOption) (*CreateUserPasswordResponse, error)
	UpdateUserPassword(ctx context.Context, in *UpdateUserPasswordRequest, opts ...grpc.CallOption) (*UpdateUserPasswordResponse, error)
	LoginWithPassword(ctx context.Context, in *LoginWithPasswordRequest, opts ...grpc.CallOption) (*LoginWithPasswordResponse, error)
	GetUserFromToken(ctx context.Context, in *GetUserFromTokenRequest, opts ...grpc.CallOption) (*GetUserFromTokenResponse, error)
	BlacklistToken(ctx context.Context, in *BlacklistTokenRequest, opts ...grpc.CallOption) (*BlacklistTokenResponse, error)
	CreateUserRole(ctx context.Context, in *CreateUserRoleRequest, opts ...grpc.CallOption) (*CreateUserRoleResponse, error)
	UpdateUserRole(ctx context.Context, in *UpdateUserRoleRequest, opts ...grpc.CallOption) (*UpdateUserRoleResponse, error)
	DeleteUserRole(ctx context.Context, in *DeleteUserRoleRequest, opts ...grpc.CallOption) (*DeleteUserRoleResponse, error)
	AddUserRoleToUser(ctx context.Context, in *AddUserRoleToUserRequest, opts ...grpc.CallOption) (*AddUserRoleToUserResponse, error)
	RemoveUserRoleFromUser(ctx context.Context, in *RemoveUserRoleFromUserRequest, opts ...grpc.CallOption) (*RemoveUserRoleFromUserResponse, error)
	GetUserRoleListOfUserList(ctx context.Context, in *GetUserRoleListOfUserListRequest, opts ...grpc.CallOption) (*GetUserRoleListOfUserListResponse, error)
	CreateUserPermission(ctx context.Context, in *CreateUserPermissionRequest, opts ...grpc.CallOption) (*CreateUserPermissionResponse, error)
	UpdateUserPermission(ctx context.Context, in *UpdateUserPermissionRequest, opts ...grpc.CallOption) (*UpdateUserPermissionResponse, error)
	DeleteUserPermission(ctx context.Context, in *DeleteUserPermissionRequest, opts ...grpc.CallOption) (*DeleteUserPermissionResponse, error)
	GetUserPermissionList(ctx context.Context, in *GetUserPermissionListRequest, opts ...grpc.CallOption) (*GetUserPermissionListResponse, error)
	AddUserPermissionToUserRole(ctx context.Context, in *AddUserPermissionToUserRoleRequest, opts ...grpc.CallOption) (*AddUserPermissionToUserRoleResponse, error)
	RemoveUserPermissionFromUserRole(ctx context.Context, in *RemoveUserPermissionFromUserRoleRequest, opts ...grpc.CallOption) (*RemoveUserPermissionFromUserRoleResponse, error)
	GetUserPermissionListOfUserRoleList(ctx context.Context, in *GetUserPermissionListOfUserRoleListRequest, opts ...grpc.CallOption) (*GetUserPermissionListOfUserRoleListResponse, error)
	GetUserPermissionListOfUser(ctx context.Context, in *GetUserPermissionListOfUserRequest, opts ...grpc.CallOption) (*GetUserPermissionListOfUserResponse, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, UserService_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserResponse)
	err := c.cc.Invoke(ctx, UserService_UpdateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserList(ctx context.Context, in *GetUserListRequest, opts ...grpc.CallOption) (*GetUserListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserListResponse)
	err := c.cc.Invoke(ctx, UserService_GetUserList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, UserService_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SearchUser(ctx context.Context, in *SearchUserRequest, opts ...grpc.CallOption) (*SearchUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchUserResponse)
	err := c.cc.Invoke(ctx, UserService_SearchUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreateUserPassword(ctx context.Context, in *CreateUserPasswordRequest, opts ...grpc.CallOption) (*CreateUserPasswordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUserPasswordResponse)
	err := c.cc.Invoke(ctx, UserService_CreateUserPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateUserPassword(ctx context.Context, in *UpdateUserPasswordRequest, opts ...grpc.CallOption) (*UpdateUserPasswordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserPasswordResponse)
	err := c.cc.Invoke(ctx, UserService_UpdateUserPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) LoginWithPassword(ctx context.Context, in *LoginWithPasswordRequest, opts ...grpc.CallOption) (*LoginWithPasswordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginWithPasswordResponse)
	err := c.cc.Invoke(ctx, UserService_LoginWithPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserFromToken(ctx context.Context, in *GetUserFromTokenRequest, opts ...grpc.CallOption) (*GetUserFromTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserFromTokenResponse)
	err := c.cc.Invoke(ctx, UserService_GetUserFromToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) BlacklistToken(ctx context.Context, in *BlacklistTokenRequest, opts ...grpc.CallOption) (*BlacklistTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BlacklistTokenResponse)
	err := c.cc.Invoke(ctx, UserService_BlacklistToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreateUserRole(ctx context.Context, in *CreateUserRoleRequest, opts ...grpc.CallOption) (*CreateUserRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUserRoleResponse)
	err := c.cc.Invoke(ctx, UserService_CreateUserRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateUserRole(ctx context.Context, in *UpdateUserRoleRequest, opts ...grpc.CallOption) (*UpdateUserRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserRoleResponse)
	err := c.cc.Invoke(ctx, UserService_UpdateUserRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteUserRole(ctx context.Context, in *DeleteUserRoleRequest, opts ...grpc.CallOption) (*DeleteUserRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteUserRoleResponse)
	err := c.cc.Invoke(ctx, UserService_DeleteUserRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AddUserRoleToUser(ctx context.Context, in *AddUserRoleToUserRequest, opts ...grpc.CallOption) (*AddUserRoleToUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddUserRoleToUserResponse)
	err := c.cc.Invoke(ctx, UserService_AddUserRoleToUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RemoveUserRoleFromUser(ctx context.Context, in *RemoveUserRoleFromUserRequest, opts ...grpc.CallOption) (*RemoveUserRoleFromUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveUserRoleFromUserResponse)
	err := c.cc.Invoke(ctx, UserService_RemoveUserRoleFromUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserRoleListOfUserList(ctx context.Context, in *GetUserRoleListOfUserListRequest, opts ...grpc.CallOption) (*GetUserRoleListOfUserListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserRoleListOfUserListResponse)
	err := c.cc.Invoke(ctx, UserService_GetUserRoleListOfUserList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreateUserPermission(ctx context.Context, in *CreateUserPermissionRequest, opts ...grpc.CallOption) (*CreateUserPermissionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUserPermissionResponse)
	err := c.cc.Invoke(ctx, UserService_CreateUserPermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateUserPermission(ctx context.Context, in *UpdateUserPermissionRequest, opts ...grpc.CallOption) (*UpdateUserPermissionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserPermissionResponse)
	err := c.cc.Invoke(ctx, UserService_UpdateUserPermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteUserPermission(ctx context.Context, in *DeleteUserPermissionRequest, opts ...grpc.CallOption) (*DeleteUserPermissionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteUserPermissionResponse)
	err := c.cc.Invoke(ctx, UserService_DeleteUserPermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserPermissionList(ctx context.Context, in *GetUserPermissionListRequest, opts ...grpc.CallOption) (*GetUserPermissionListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserPermissionListResponse)
	err := c.cc.Invoke(ctx, UserService_GetUserPermissionList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AddUserPermissionToUserRole(ctx context.Context, in *AddUserPermissionToUserRoleRequest, opts ...grpc.CallOption) (*AddUserPermissionToUserRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddUserPermissionToUserRoleResponse)
	err := c.cc.Invoke(ctx, UserService_AddUserPermissionToUserRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RemoveUserPermissionFromUserRole(ctx context.Context, in *RemoveUserPermissionFromUserRoleRequest, opts ...grpc.CallOption) (*RemoveUserPermissionFromUserRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveUserPermissionFromUserRoleResponse)
	err := c.cc.Invoke(ctx, UserService_RemoveUserPermissionFromUserRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserPermissionListOfUserRoleList(ctx context.Context, in *GetUserPermissionListOfUserRoleListRequest, opts ...grpc.CallOption) (*GetUserPermissionListOfUserRoleListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserPermissionListOfUserRoleListResponse)
	err := c.cc.Invoke(ctx, UserService_GetUserPermissionListOfUserRoleList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserPermissionListOfUser(ctx context.Context, in *GetUserPermissionListOfUserRequest, opts ...grpc.CallOption) (*GetUserPermissionListOfUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserPermissionListOfUserResponse)
	err := c.cc.Invoke(ctx, UserService_GetUserPermissionListOfUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error)
	GetUserList(context.Context, *GetUserListRequest) (*GetUserListResponse, error)
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	SearchUser(context.Context, *SearchUserRequest) (*SearchUserResponse, error)
	CreateUserPassword(context.Context, *CreateUserPasswordRequest) (*CreateUserPasswordResponse, error)
	UpdateUserPassword(context.Context, *UpdateUserPasswordRequest) (*UpdateUserPasswordResponse, error)
	LoginWithPassword(context.Context, *LoginWithPasswordRequest) (*LoginWithPasswordResponse, error)
	GetUserFromToken(context.Context, *GetUserFromTokenRequest) (*GetUserFromTokenResponse, error)
	BlacklistToken(context.Context, *BlacklistTokenRequest) (*BlacklistTokenResponse, error)
	CreateUserRole(context.Context, *CreateUserRoleRequest) (*CreateUserRoleResponse, error)
	UpdateUserRole(context.Context, *UpdateUserRoleRequest) (*UpdateUserRoleResponse, error)
	DeleteUserRole(context.Context, *DeleteUserRoleRequest) (*DeleteUserRoleResponse, error)
	AddUserRoleToUser(context.Context, *AddUserRoleToUserRequest) (*AddUserRoleToUserResponse, error)
	RemoveUserRoleFromUser(context.Context, *RemoveUserRoleFromUserRequest) (*RemoveUserRoleFromUserResponse, error)
	GetUserRoleListOfUserList(context.Context, *GetUserRoleListOfUserListRequest) (*GetUserRoleListOfUserListResponse, error)
	CreateUserPermission(context.Context, *CreateUserPermissionRequest) (*CreateUserPermissionResponse, error)
	UpdateUserPermission(context.Context, *UpdateUserPermissionRequest) (*UpdateUserPermissionResponse, error)
	DeleteUserPermission(context.Context, *DeleteUserPermissionRequest) (*DeleteUserPermissionResponse, error)
	GetUserPermissionList(context.Context, *GetUserPermissionListRequest) (*GetUserPermissionListResponse, error)
	AddUserPermissionToUserRole(context.Context, *AddUserPermissionToUserRoleRequest) (*AddUserPermissionToUserRoleResponse, error)
	RemoveUserPermissionFromUserRole(context.Context, *RemoveUserPermissionFromUserRoleRequest) (*RemoveUserPermissionFromUserRoleResponse, error)
	GetUserPermissionListOfUserRoleList(context.Context, *GetUserPermissionListOfUserRoleListRequest) (*GetUserPermissionListOfUserRoleListResponse, error)
	GetUserPermissionListOfUser(context.Context, *GetUserPermissionListOfUserRequest) (*GetUserPermissionListOfUserResponse, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedUserServiceServer) UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedUserServiceServer) GetUserList(context.Context, *GetUserListRequest) (*GetUserListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserList not implemented")
}
func (UnimplementedUserServiceServer) GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedUserServiceServer) SearchUser(context.Context, *SearchUserRequest) (*SearchUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUser not implemented")
}
func (UnimplementedUserServiceServer) CreateUserPassword(context.Context, *CreateUserPasswordRequest) (*CreateUserPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserPassword not implemented")
}
func (UnimplementedUserServiceServer) UpdateUserPassword(context.Context, *UpdateUserPasswordRequest) (*UpdateUserPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserPassword not implemented")
}
func (UnimplementedUserServiceServer) LoginWithPassword(context.Context, *LoginWithPasswordRequest) (*LoginWithPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginWithPassword not implemented")
}
func (UnimplementedUserServiceServer) GetUserFromToken(context.Context, *GetUserFromTokenRequest) (*GetUserFromTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserFromToken not implemented")
}
func (UnimplementedUserServiceServer) BlacklistToken(context.Context, *BlacklistTokenRequest) (*BlacklistTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlacklistToken not implemented")
}
func (UnimplementedUserServiceServer) CreateUserRole(context.Context, *CreateUserRoleRequest) (*CreateUserRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserRole not implemented")
}
func (UnimplementedUserServiceServer) UpdateUserRole(context.Context, *UpdateUserRoleRequest) (*UpdateUserRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserRole not implemented")
}
func (UnimplementedUserServiceServer) DeleteUserRole(context.Context, *DeleteUserRoleRequest) (*DeleteUserRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserRole not implemented")
}
func (UnimplementedUserServiceServer) AddUserRoleToUser(context.Context, *AddUserRoleToUserRequest) (*AddUserRoleToUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserRoleToUser not implemented")
}
func (UnimplementedUserServiceServer) RemoveUserRoleFromUser(context.Context, *RemoveUserRoleFromUserRequest) (*RemoveUserRoleFromUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUserRoleFromUser not implemented")
}
func (UnimplementedUserServiceServer) GetUserRoleListOfUserList(context.Context, *GetUserRoleListOfUserListRequest) (*GetUserRoleListOfUserListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserRoleListOfUserList not implemented")
}
func (UnimplementedUserServiceServer) CreateUserPermission(context.Context, *CreateUserPermissionRequest) (*CreateUserPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserPermission not implemented")
}
func (UnimplementedUserServiceServer) UpdateUserPermission(context.Context, *UpdateUserPermissionRequest) (*UpdateUserPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserPermission not implemented")
}
func (UnimplementedUserServiceServer) DeleteUserPermission(context.Context, *DeleteUserPermissionRequest) (*DeleteUserPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserPermission not implemented")
}
func (UnimplementedUserServiceServer) GetUserPermissionList(context.Context, *GetUserPermissionListRequest) (*GetUserPermissionListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPermissionList not implemented")
}
func (UnimplementedUserServiceServer) AddUserPermissionToUserRole(context.Context, *AddUserPermissionToUserRoleRequest) (*AddUserPermissionToUserRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserPermissionToUserRole not implemented")
}
func (UnimplementedUserServiceServer) RemoveUserPermissionFromUserRole(context.Context, *RemoveUserPermissionFromUserRoleRequest) (*RemoveUserPermissionFromUserRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUserPermissionFromUserRole not implemented")
}
func (UnimplementedUserServiceServer) GetUserPermissionListOfUserRoleList(context.Context, *GetUserPermissionListOfUserRoleListRequest) (*GetUserPermissionListOfUserRoleListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPermissionListOfUserRoleList not implemented")
}
func (UnimplementedUserServiceServer) GetUserPermissionListOfUser(context.Context, *GetUserPermissionListOfUserRequest) (*GetUserPermissionListOfUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPermissionListOfUser not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUserList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserList(ctx, req.(*GetUserListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SearchUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SearchUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_SearchUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SearchUser(ctx, req.(*SearchUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CreateUserPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateUserPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CreateUserPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateUserPassword(ctx, req.(*CreateUserPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateUserPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUserPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateUserPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUserPassword(ctx, req.(*UpdateUserPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_LoginWithPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginWithPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).LoginWithPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_LoginWithPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).LoginWithPassword(ctx, req.(*LoginWithPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserFromToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserFromTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserFromToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUserFromToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserFromToken(ctx, req.(*GetUserFromTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_BlacklistToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlacklistTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).BlacklistToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_BlacklistToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).BlacklistToken(ctx, req.(*BlacklistTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CreateUserRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateUserRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CreateUserRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateUserRole(ctx, req.(*CreateUserRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateUserRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUserRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateUserRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUserRole(ctx, req.(*UpdateUserRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteUserRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteUserRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_DeleteUserRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteUserRole(ctx, req.(*DeleteUserRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AddUserRoleToUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserRoleToUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AddUserRoleToUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_AddUserRoleToUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AddUserRoleToUser(ctx, req.(*AddUserRoleToUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_RemoveUserRoleFromUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUserRoleFromUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RemoveUserRoleFromUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_RemoveUserRoleFromUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RemoveUserRoleFromUser(ctx, req.(*RemoveUserRoleFromUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserRoleListOfUserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRoleListOfUserListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserRoleListOfUserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUserRoleListOfUserList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserRoleListOfUserList(ctx, req.(*GetUserRoleListOfUserListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CreateUserPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateUserPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CreateUserPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateUserPermission(ctx, req.(*CreateUserPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateUserPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUserPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateUserPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUserPermission(ctx, req.(*UpdateUserPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteUserPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteUserPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_DeleteUserPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteUserPermission(ctx, req.(*DeleteUserPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserPermissionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserPermissionListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserPermissionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUserPermissionList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserPermissionList(ctx, req.(*GetUserPermissionListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AddUserPermissionToUserRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserPermissionToUserRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AddUserPermissionToUserRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_AddUserPermissionToUserRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AddUserPermissionToUserRole(ctx, req.(*AddUserPermissionToUserRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_RemoveUserPermissionFromUserRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUserPermissionFromUserRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RemoveUserPermissionFromUserRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_RemoveUserPermissionFromUserRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RemoveUserPermissionFromUserRole(ctx, req.(*RemoveUserPermissionFromUserRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserPermissionListOfUserRoleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserPermissionListOfUserRoleListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserPermissionListOfUserRoleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUserPermissionListOfUserRoleList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserPermissionListOfUserRoleList(ctx, req.(*GetUserPermissionListOfUserRoleListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserPermissionListOfUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserPermissionListOfUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserPermissionListOfUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUserPermissionListOfUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserPermissionListOfUser(ctx, req.(*GetUserPermissionListOfUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user_service.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _UserService_CreateUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _UserService_UpdateUser_Handler,
		},
		{
			MethodName: "GetUserList",
			Handler:    _UserService_GetUserList_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _UserService_GetUser_Handler,
		},
		{
			MethodName: "SearchUser",
			Handler:    _UserService_SearchUser_Handler,
		},
		{
			MethodName: "CreateUserPassword",
			Handler:    _UserService_CreateUserPassword_Handler,
		},
		{
			MethodName: "UpdateUserPassword",
			Handler:    _UserService_UpdateUserPassword_Handler,
		},
		{
			MethodName: "LoginWithPassword",
			Handler:    _UserService_LoginWithPassword_Handler,
		},
		{
			MethodName: "GetUserFromToken",
			Handler:    _UserService_GetUserFromToken_Handler,
		},
		{
			MethodName: "BlacklistToken",
			Handler:    _UserService_BlacklistToken_Handler,
		},
		{
			MethodName: "CreateUserRole",
			Handler:    _UserService_CreateUserRole_Handler,
		},
		{
			MethodName: "UpdateUserRole",
			Handler:    _UserService_UpdateUserRole_Handler,
		},
		{
			MethodName: "DeleteUserRole",
			Handler:    _UserService_DeleteUserRole_Handler,
		},
		{
			MethodName: "AddUserRoleToUser",
			Handler:    _UserService_AddUserRoleToUser_Handler,
		},
		{
			MethodName: "RemoveUserRoleFromUser",
			Handler:    _UserService_RemoveUserRoleFromUser_Handler,
		},
		{
			MethodName: "GetUserRoleListOfUserList",
			Handler:    _UserService_GetUserRoleListOfUserList_Handler,
		},
		{
			MethodName: "CreateUserPermission",
			Handler:    _UserService_CreateUserPermission_Handler,
		},
		{
			MethodName: "UpdateUserPermission",
			Handler:    _UserService_UpdateUserPermission_Handler,
		},
		{
			MethodName: "DeleteUserPermission",
			Handler:    _UserService_DeleteUserPermission_Handler,
		},
		{
			MethodName: "GetUserPermissionList",
			Handler:    _UserService_GetUserPermissionList_Handler,
		},
		{
			MethodName: "AddUserPermissionToUserRole",
			Handler:    _UserService_AddUserPermissionToUserRole_Handler,
		},
		{
			MethodName: "RemoveUserPermissionFromUserRole",
			Handler:    _UserService_RemoveUserPermissionFromUserRole_Handler,
		},
		{
			MethodName: "GetUserPermissionListOfUserRoleList",
			Handler:    _UserService_GetUserPermissionListOfUserRoleList_Handler,
		},
		{
			MethodName: "GetUserPermissionListOfUser",
			Handler:    _UserService_GetUserPermissionListOfUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_service/user_service.proto",
}
