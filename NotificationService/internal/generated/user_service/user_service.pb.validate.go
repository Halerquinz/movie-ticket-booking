// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: user_service/user_service.proto

package user_service

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on User with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on User with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UserMultiError, or nil if none found.
func (m *User) ValidateAll() error {
	return m.validate(true)
}

func (m *User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Username

	// no validation rules for DisplayName

	// no validation rules for Email

	if len(errors) > 0 {
		return UserMultiError(errors)
	}

	return nil
}

// UserMultiError is an error wrapping multiple validation errors returned by
// User.ValidateAll() if the designated constraints aren't met.
type UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserMultiError) AllErrors() []error { return m }

// UserValidationError is the validation error returned by User.Validate if the
// designated constraints aren't met.
type UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserValidationError) ErrorName() string { return "UserValidationError" }

// Error satisfies the builtin error interface
func (e UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserValidationError{}

// Validate checks the field values on UserPassword with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserPassword) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserPassword with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserPasswordMultiError, or
// nil if none found.
func (m *UserPassword) ValidateAll() error {
	return m.validate(true)
}

func (m *UserPassword) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OfUserId

	// no validation rules for Password

	if len(errors) > 0 {
		return UserPasswordMultiError(errors)
	}

	return nil
}

// UserPasswordMultiError is an error wrapping multiple validation errors
// returned by UserPassword.ValidateAll() if the designated constraints aren't met.
type UserPasswordMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserPasswordMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserPasswordMultiError) AllErrors() []error { return m }

// UserPasswordValidationError is the validation error returned by
// UserPassword.Validate if the designated constraints aren't met.
type UserPasswordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserPasswordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserPasswordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserPasswordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserPasswordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserPasswordValidationError) ErrorName() string { return "UserPasswordValidationError" }

// Error satisfies the builtin error interface
func (e UserPasswordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserPassword.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserPasswordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserPasswordValidationError{}

// Validate checks the field values on CreateUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserRequestMultiError, or nil if none found.
func (m *CreateUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for DisplayName

	// no validation rules for Email

	if len(errors) > 0 {
		return CreateUserRequestMultiError(errors)
	}

	return nil
}

// CreateUserRequestMultiError is an error wrapping multiple validation errors
// returned by CreateUserRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserRequestMultiError) AllErrors() []error { return m }

// CreateUserRequestValidationError is the validation error returned by
// CreateUserRequest.Validate if the designated constraints aren't met.
type CreateUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserRequestValidationError) ErrorName() string {
	return "CreateUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserRequestValidationError{}

// Validate checks the field values on UserRole with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserRole) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserRole with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserRoleMultiError, or nil
// if none found.
func (m *UserRole) ValidateAll() error {
	return m.validate(true)
}

func (m *UserRole) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for DisplayName

	// no validation rules for Description

	if len(errors) > 0 {
		return UserRoleMultiError(errors)
	}

	return nil
}

// UserRoleMultiError is an error wrapping multiple validation errors returned
// by UserRole.ValidateAll() if the designated constraints aren't met.
type UserRoleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserRoleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserRoleMultiError) AllErrors() []error { return m }

// UserRoleValidationError is the validation error returned by
// UserRole.Validate if the designated constraints aren't met.
type UserRoleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserRoleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserRoleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserRoleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserRoleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserRoleValidationError) ErrorName() string { return "UserRoleValidationError" }

// Error satisfies the builtin error interface
func (e UserRoleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserRole.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserRoleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserRoleValidationError{}

// Validate checks the field values on UserRoleList with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserRoleList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserRoleList with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserRoleListMultiError, or
// nil if none found.
func (m *UserRoleList) ValidateAll() error {
	return m.validate(true)
}

func (m *UserRoleList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUserRoleList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UserRoleListValidationError{
						field:  fmt.Sprintf("UserRoleList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UserRoleListValidationError{
						field:  fmt.Sprintf("UserRoleList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserRoleListValidationError{
					field:  fmt.Sprintf("UserRoleList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UserRoleListMultiError(errors)
	}

	return nil
}

// UserRoleListMultiError is an error wrapping multiple validation errors
// returned by UserRoleList.ValidateAll() if the designated constraints aren't met.
type UserRoleListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserRoleListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserRoleListMultiError) AllErrors() []error { return m }

// UserRoleListValidationError is the validation error returned by
// UserRoleList.Validate if the designated constraints aren't met.
type UserRoleListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserRoleListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserRoleListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserRoleListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserRoleListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserRoleListValidationError) ErrorName() string { return "UserRoleListValidationError" }

// Error satisfies the builtin error interface
func (e UserRoleListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserRoleList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserRoleListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserRoleListValidationError{}

// Validate checks the field values on UserPermission with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserPermission) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserPermission with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserPermissionMultiError,
// or nil if none found.
func (m *UserPermission) ValidateAll() error {
	return m.validate(true)
}

func (m *UserPermission) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for PermissionName

	// no validation rules for Description

	if len(errors) > 0 {
		return UserPermissionMultiError(errors)
	}

	return nil
}

// UserPermissionMultiError is an error wrapping multiple validation errors
// returned by UserPermission.ValidateAll() if the designated constraints
// aren't met.
type UserPermissionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserPermissionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserPermissionMultiError) AllErrors() []error { return m }

// UserPermissionValidationError is the validation error returned by
// UserPermission.Validate if the designated constraints aren't met.
type UserPermissionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserPermissionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserPermissionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserPermissionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserPermissionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserPermissionValidationError) ErrorName() string { return "UserPermissionValidationError" }

// Error satisfies the builtin error interface
func (e UserPermissionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserPermission.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserPermissionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserPermissionValidationError{}

// Validate checks the field values on UserPermissionList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserPermissionList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserPermissionList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserPermissionListMultiError, or nil if none found.
func (m *UserPermissionList) ValidateAll() error {
	return m.validate(true)
}

func (m *UserPermissionList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUserPermissionList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UserPermissionListValidationError{
						field:  fmt.Sprintf("UserPermissionList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UserPermissionListValidationError{
						field:  fmt.Sprintf("UserPermissionList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserPermissionListValidationError{
					field:  fmt.Sprintf("UserPermissionList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UserPermissionListMultiError(errors)
	}

	return nil
}

// UserPermissionListMultiError is an error wrapping multiple validation errors
// returned by UserPermissionList.ValidateAll() if the designated constraints
// aren't met.
type UserPermissionListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserPermissionListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserPermissionListMultiError) AllErrors() []error { return m }

// UserPermissionListValidationError is the validation error returned by
// UserPermissionList.Validate if the designated constraints aren't met.
type UserPermissionListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserPermissionListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserPermissionListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserPermissionListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserPermissionListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserPermissionListValidationError) ErrorName() string {
	return "UserPermissionListValidationError"
}

// Error satisfies the builtin error interface
func (e UserPermissionListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserPermissionList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserPermissionListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserPermissionListValidationError{}

// Validate checks the field values on CreateUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserResponseMultiError, or nil if none found.
func (m *CreateUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateUserResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateUserResponseMultiError(errors)
	}

	return nil
}

// CreateUserResponseMultiError is an error wrapping multiple validation errors
// returned by CreateUserResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserResponseMultiError) AllErrors() []error { return m }

// CreateUserResponseValidationError is the validation error returned by
// CreateUserResponse.Validate if the designated constraints aren't met.
type CreateUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserResponseValidationError) ErrorName() string {
	return "CreateUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserResponseValidationError{}

// Validate checks the field values on UpdateUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserRequestMultiError, or nil if none found.
func (m *UpdateUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateUserRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateUserRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserRequestValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateUserRequestMultiError(errors)
	}

	return nil
}

// UpdateUserRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateUserRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserRequestMultiError) AllErrors() []error { return m }

// UpdateUserRequestValidationError is the validation error returned by
// UpdateUserRequest.Validate if the designated constraints aren't met.
type UpdateUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserRequestValidationError) ErrorName() string {
	return "UpdateUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserRequestValidationError{}

// Validate checks the field values on UpdateUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserResponseMultiError, or nil if none found.
func (m *UpdateUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateUserResponseMultiError(errors)
	}

	return nil
}

// UpdateUserResponseMultiError is an error wrapping multiple validation errors
// returned by UpdateUserResponse.ValidateAll() if the designated constraints
// aren't met.
type UpdateUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserResponseMultiError) AllErrors() []error { return m }

// UpdateUserResponseValidationError is the validation error returned by
// UpdateUserResponse.Validate if the designated constraints aren't met.
type UpdateUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserResponseValidationError) ErrorName() string {
	return "UpdateUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserResponseValidationError{}

// Validate checks the field values on UserListSortOrder with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserListSortOrder) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserListSortOrder with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserListSortOrderMultiError, or nil if none found.
func (m *UserListSortOrder) ValidateAll() error {
	return m.validate(true)
}

func (m *UserListSortOrder) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UserListSortOrderMultiError(errors)
	}

	return nil
}

// UserListSortOrderMultiError is an error wrapping multiple validation errors
// returned by UserListSortOrder.ValidateAll() if the designated constraints
// aren't met.
type UserListSortOrderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserListSortOrderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserListSortOrderMultiError) AllErrors() []error { return m }

// UserListSortOrderValidationError is the validation error returned by
// UserListSortOrder.Validate if the designated constraints aren't met.
type UserListSortOrderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserListSortOrderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserListSortOrderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserListSortOrderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserListSortOrderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserListSortOrderValidationError) ErrorName() string {
	return "UserListSortOrderValidationError"
}

// Error satisfies the builtin error interface
func (e UserListSortOrderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserListSortOrder.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserListSortOrderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserListSortOrderValidationError{}

// Validate checks the field values on UserListFilterOptions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserListFilterOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserListFilterOptions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserListFilterOptionsMultiError, or nil if none found.
func (m *UserListFilterOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *UserListFilterOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UsernameQuery

	if len(errors) > 0 {
		return UserListFilterOptionsMultiError(errors)
	}

	return nil
}

// UserListFilterOptionsMultiError is an error wrapping multiple validation
// errors returned by UserListFilterOptions.ValidateAll() if the designated
// constraints aren't met.
type UserListFilterOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserListFilterOptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserListFilterOptionsMultiError) AllErrors() []error { return m }

// UserListFilterOptionsValidationError is the validation error returned by
// UserListFilterOptions.Validate if the designated constraints aren't met.
type UserListFilterOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserListFilterOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserListFilterOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserListFilterOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserListFilterOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserListFilterOptionsValidationError) ErrorName() string {
	return "UserListFilterOptionsValidationError"
}

// Error satisfies the builtin error interface
func (e UserListFilterOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserListFilterOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserListFilterOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserListFilterOptionsValidationError{}

// Validate checks the field values on GetUserListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserListRequestMultiError, or nil if none found.
func (m *GetUserListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Offset

	// no validation rules for Limit

	// no validation rules for SortOrder

	if all {
		switch v := interface{}(m.GetFilterOptions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserListRequestValidationError{
					field:  "FilterOptions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserListRequestValidationError{
					field:  "FilterOptions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFilterOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserListRequestValidationError{
				field:  "FilterOptions",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetUserListRequestMultiError(errors)
	}

	return nil
}

// GetUserListRequestMultiError is an error wrapping multiple validation errors
// returned by GetUserListRequest.ValidateAll() if the designated constraints
// aren't met.
type GetUserListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserListRequestMultiError) AllErrors() []error { return m }

// GetUserListRequestValidationError is the validation error returned by
// GetUserListRequest.Validate if the designated constraints aren't met.
type GetUserListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserListRequestValidationError) ErrorName() string {
	return "GetUserListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserListRequestValidationError{}

// Validate checks the field values on GetUserListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserListResponseMultiError, or nil if none found.
func (m *GetUserListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TotalUserCount

	for idx, item := range m.GetUserList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserListResponseValidationError{
						field:  fmt.Sprintf("UserList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserListResponseValidationError{
						field:  fmt.Sprintf("UserList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserListResponseValidationError{
					field:  fmt.Sprintf("UserList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetUserListResponseMultiError(errors)
	}

	return nil
}

// GetUserListResponseMultiError is an error wrapping multiple validation
// errors returned by GetUserListResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUserListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserListResponseMultiError) AllErrors() []error { return m }

// GetUserListResponseValidationError is the validation error returned by
// GetUserListResponse.Validate if the designated constraints aren't met.
type GetUserListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserListResponseValidationError) ErrorName() string {
	return "GetUserListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserListResponseValidationError{}

// Validate checks the field values on GetUserRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetUserRequestMultiError,
// or nil if none found.
func (m *GetUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetUserRequestMultiError(errors)
	}

	return nil
}

// GetUserRequestMultiError is an error wrapping multiple validation errors
// returned by GetUserRequest.ValidateAll() if the designated constraints
// aren't met.
type GetUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserRequestMultiError) AllErrors() []error { return m }

// GetUserRequestValidationError is the validation error returned by
// GetUserRequest.Validate if the designated constraints aren't met.
type GetUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserRequestValidationError) ErrorName() string { return "GetUserRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserRequestValidationError{}

// Validate checks the field values on GetUserResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserResponseMultiError, or nil if none found.
func (m *GetUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetUserResponseMultiError(errors)
	}

	return nil
}

// GetUserResponseMultiError is an error wrapping multiple validation errors
// returned by GetUserResponse.ValidateAll() if the designated constraints
// aren't met.
type GetUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserResponseMultiError) AllErrors() []error { return m }

// GetUserResponseValidationError is the validation error returned by
// GetUserResponse.Validate if the designated constraints aren't met.
type GetUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserResponseValidationError) ErrorName() string { return "GetUserResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserResponseValidationError{}

// Validate checks the field values on SearchUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SearchUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchUserRequestMultiError, or nil if none found.
func (m *SearchUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Query

	// no validation rules for Limit

	if len(errors) > 0 {
		return SearchUserRequestMultiError(errors)
	}

	return nil
}

// SearchUserRequestMultiError is an error wrapping multiple validation errors
// returned by SearchUserRequest.ValidateAll() if the designated constraints
// aren't met.
type SearchUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchUserRequestMultiError) AllErrors() []error { return m }

// SearchUserRequestValidationError is the validation error returned by
// SearchUserRequest.Validate if the designated constraints aren't met.
type SearchUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchUserRequestValidationError) ErrorName() string {
	return "SearchUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SearchUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchUserRequestValidationError{}

// Validate checks the field values on SearchUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchUserResponseMultiError, or nil if none found.
func (m *SearchUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUserList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchUserResponseValidationError{
						field:  fmt.Sprintf("UserList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchUserResponseValidationError{
						field:  fmt.Sprintf("UserList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchUserResponseValidationError{
					field:  fmt.Sprintf("UserList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SearchUserResponseMultiError(errors)
	}

	return nil
}

// SearchUserResponseMultiError is an error wrapping multiple validation errors
// returned by SearchUserResponse.ValidateAll() if the designated constraints
// aren't met.
type SearchUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchUserResponseMultiError) AllErrors() []error { return m }

// SearchUserResponseValidationError is the validation error returned by
// SearchUserResponse.Validate if the designated constraints aren't met.
type SearchUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchUserResponseValidationError) ErrorName() string {
	return "SearchUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SearchUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchUserResponseValidationError{}

// Validate checks the field values on CreateUserPasswordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateUserPasswordRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserPasswordRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserPasswordRequestMultiError, or nil if none found.
func (m *CreateUserPasswordRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserPasswordRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPassword()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateUserPasswordRequestValidationError{
					field:  "Password",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateUserPasswordRequestValidationError{
					field:  "Password",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPassword()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateUserPasswordRequestValidationError{
				field:  "Password",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateUserPasswordRequestMultiError(errors)
	}

	return nil
}

// CreateUserPasswordRequestMultiError is an error wrapping multiple validation
// errors returned by CreateUserPasswordRequest.ValidateAll() if the
// designated constraints aren't met.
type CreateUserPasswordRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserPasswordRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserPasswordRequestMultiError) AllErrors() []error { return m }

// CreateUserPasswordRequestValidationError is the validation error returned by
// CreateUserPasswordRequest.Validate if the designated constraints aren't met.
type CreateUserPasswordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserPasswordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserPasswordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserPasswordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserPasswordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserPasswordRequestValidationError) ErrorName() string {
	return "CreateUserPasswordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserPasswordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserPasswordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserPasswordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserPasswordRequestValidationError{}

// Validate checks the field values on CreateUserPasswordResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateUserPasswordResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserPasswordResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserPasswordResponseMultiError, or nil if none found.
func (m *CreateUserPasswordResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserPasswordResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateUserPasswordResponseMultiError(errors)
	}

	return nil
}

// CreateUserPasswordResponseMultiError is an error wrapping multiple
// validation errors returned by CreateUserPasswordResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateUserPasswordResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserPasswordResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserPasswordResponseMultiError) AllErrors() []error { return m }

// CreateUserPasswordResponseValidationError is the validation error returned
// by CreateUserPasswordResponse.Validate if the designated constraints aren't met.
type CreateUserPasswordResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserPasswordResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserPasswordResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserPasswordResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserPasswordResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserPasswordResponseValidationError) ErrorName() string {
	return "CreateUserPasswordResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserPasswordResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserPasswordResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserPasswordResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserPasswordResponseValidationError{}

// Validate checks the field values on UpdateUserPasswordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserPasswordRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserPasswordRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserPasswordRequestMultiError, or nil if none found.
func (m *UpdateUserPasswordRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserPasswordRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPassword()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateUserPasswordRequestValidationError{
					field:  "Password",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateUserPasswordRequestValidationError{
					field:  "Password",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPassword()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserPasswordRequestValidationError{
				field:  "Password",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateUserPasswordRequestMultiError(errors)
	}

	return nil
}

// UpdateUserPasswordRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateUserPasswordRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateUserPasswordRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserPasswordRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserPasswordRequestMultiError) AllErrors() []error { return m }

// UpdateUserPasswordRequestValidationError is the validation error returned by
// UpdateUserPasswordRequest.Validate if the designated constraints aren't met.
type UpdateUserPasswordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserPasswordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserPasswordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserPasswordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserPasswordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserPasswordRequestValidationError) ErrorName() string {
	return "UpdateUserPasswordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserPasswordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserPasswordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserPasswordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserPasswordRequestValidationError{}

// Validate checks the field values on UpdateUserPasswordResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserPasswordResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserPasswordResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserPasswordResponseMultiError, or nil if none found.
func (m *UpdateUserPasswordResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserPasswordResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateUserPasswordResponseMultiError(errors)
	}

	return nil
}

// UpdateUserPasswordResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateUserPasswordResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateUserPasswordResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserPasswordResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserPasswordResponseMultiError) AllErrors() []error { return m }

// UpdateUserPasswordResponseValidationError is the validation error returned
// by UpdateUserPasswordResponse.Validate if the designated constraints aren't met.
type UpdateUserPasswordResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserPasswordResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserPasswordResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserPasswordResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserPasswordResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserPasswordResponseValidationError) ErrorName() string {
	return "UpdateUserPasswordResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserPasswordResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserPasswordResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserPasswordResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserPasswordResponseValidationError{}

// Validate checks the field values on LoginWithPasswordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LoginWithPasswordRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginWithPasswordRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoginWithPasswordRequestMultiError, or nil if none found.
func (m *LoginWithPasswordRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginWithPasswordRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for Password

	if len(errors) > 0 {
		return LoginWithPasswordRequestMultiError(errors)
	}

	return nil
}

// LoginWithPasswordRequestMultiError is an error wrapping multiple validation
// errors returned by LoginWithPasswordRequest.ValidateAll() if the designated
// constraints aren't met.
type LoginWithPasswordRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginWithPasswordRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginWithPasswordRequestMultiError) AllErrors() []error { return m }

// LoginWithPasswordRequestValidationError is the validation error returned by
// LoginWithPasswordRequest.Validate if the designated constraints aren't met.
type LoginWithPasswordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginWithPasswordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginWithPasswordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginWithPasswordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginWithPasswordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginWithPasswordRequestValidationError) ErrorName() string {
	return "LoginWithPasswordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LoginWithPasswordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginWithPasswordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginWithPasswordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginWithPasswordRequestValidationError{}

// Validate checks the field values on LoginWithPasswordResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LoginWithPasswordResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginWithPasswordResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoginWithPasswordResponseMultiError, or nil if none found.
func (m *LoginWithPasswordResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginWithPasswordResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoginWithPasswordResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoginWithPasswordResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoginWithPasswordResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Token

	if len(errors) > 0 {
		return LoginWithPasswordResponseMultiError(errors)
	}

	return nil
}

// LoginWithPasswordResponseMultiError is an error wrapping multiple validation
// errors returned by LoginWithPasswordResponse.ValidateAll() if the
// designated constraints aren't met.
type LoginWithPasswordResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginWithPasswordResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginWithPasswordResponseMultiError) AllErrors() []error { return m }

// LoginWithPasswordResponseValidationError is the validation error returned by
// LoginWithPasswordResponse.Validate if the designated constraints aren't met.
type LoginWithPasswordResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginWithPasswordResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginWithPasswordResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginWithPasswordResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginWithPasswordResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginWithPasswordResponseValidationError) ErrorName() string {
	return "LoginWithPasswordResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LoginWithPasswordResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginWithPasswordResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginWithPasswordResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginWithPasswordResponseValidationError{}

// Validate checks the field values on GetUserFromTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserFromTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserFromTokenRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserFromTokenRequestMultiError, or nil if none found.
func (m *GetUserFromTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserFromTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return GetUserFromTokenRequestMultiError(errors)
	}

	return nil
}

// GetUserFromTokenRequestMultiError is an error wrapping multiple validation
// errors returned by GetUserFromTokenRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUserFromTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserFromTokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserFromTokenRequestMultiError) AllErrors() []error { return m }

// GetUserFromTokenRequestValidationError is the validation error returned by
// GetUserFromTokenRequest.Validate if the designated constraints aren't met.
type GetUserFromTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserFromTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserFromTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserFromTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserFromTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserFromTokenRequestValidationError) ErrorName() string {
	return "GetUserFromTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserFromTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserFromTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserFromTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserFromTokenRequestValidationError{}

// Validate checks the field values on GetUserFromTokenResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserFromTokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserFromTokenResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserFromTokenResponseMultiError, or nil if none found.
func (m *GetUserFromTokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserFromTokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserFromTokenResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserFromTokenResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserFromTokenResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for NewToken

	if len(errors) > 0 {
		return GetUserFromTokenResponseMultiError(errors)
	}

	return nil
}

// GetUserFromTokenResponseMultiError is an error wrapping multiple validation
// errors returned by GetUserFromTokenResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUserFromTokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserFromTokenResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserFromTokenResponseMultiError) AllErrors() []error { return m }

// GetUserFromTokenResponseValidationError is the validation error returned by
// GetUserFromTokenResponse.Validate if the designated constraints aren't met.
type GetUserFromTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserFromTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserFromTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserFromTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserFromTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserFromTokenResponseValidationError) ErrorName() string {
	return "GetUserFromTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserFromTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserFromTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserFromTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserFromTokenResponseValidationError{}

// Validate checks the field values on BlacklistTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BlacklistTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BlacklistTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BlacklistTokenRequestMultiError, or nil if none found.
func (m *BlacklistTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BlacklistTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return BlacklistTokenRequestMultiError(errors)
	}

	return nil
}

// BlacklistTokenRequestMultiError is an error wrapping multiple validation
// errors returned by BlacklistTokenRequest.ValidateAll() if the designated
// constraints aren't met.
type BlacklistTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BlacklistTokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BlacklistTokenRequestMultiError) AllErrors() []error { return m }

// BlacklistTokenRequestValidationError is the validation error returned by
// BlacklistTokenRequest.Validate if the designated constraints aren't met.
type BlacklistTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BlacklistTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BlacklistTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BlacklistTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BlacklistTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BlacklistTokenRequestValidationError) ErrorName() string {
	return "BlacklistTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BlacklistTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlacklistTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BlacklistTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BlacklistTokenRequestValidationError{}

// Validate checks the field values on BlacklistTokenResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BlacklistTokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BlacklistTokenResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BlacklistTokenResponseMultiError, or nil if none found.
func (m *BlacklistTokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BlacklistTokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return BlacklistTokenResponseMultiError(errors)
	}

	return nil
}

// BlacklistTokenResponseMultiError is an error wrapping multiple validation
// errors returned by BlacklistTokenResponse.ValidateAll() if the designated
// constraints aren't met.
type BlacklistTokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BlacklistTokenResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BlacklistTokenResponseMultiError) AllErrors() []error { return m }

// BlacklistTokenResponseValidationError is the validation error returned by
// BlacklistTokenResponse.Validate if the designated constraints aren't met.
type BlacklistTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BlacklistTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BlacklistTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BlacklistTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BlacklistTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BlacklistTokenResponseValidationError) ErrorName() string {
	return "BlacklistTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BlacklistTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlacklistTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BlacklistTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BlacklistTokenResponseValidationError{}

// Validate checks the field values on CreateUserRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateUserRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserRoleRequestMultiError, or nil if none found.
func (m *CreateUserRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DisplayName

	// no validation rules for Description

	if len(errors) > 0 {
		return CreateUserRoleRequestMultiError(errors)
	}

	return nil
}

// CreateUserRoleRequestMultiError is an error wrapping multiple validation
// errors returned by CreateUserRoleRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateUserRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserRoleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserRoleRequestMultiError) AllErrors() []error { return m }

// CreateUserRoleRequestValidationError is the validation error returned by
// CreateUserRoleRequest.Validate if the designated constraints aren't met.
type CreateUserRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserRoleRequestValidationError) ErrorName() string {
	return "CreateUserRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserRoleRequestValidationError{}

// Validate checks the field values on CreateUserRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateUserRoleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserRoleResponseMultiError, or nil if none found.
func (m *CreateUserRoleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserRoleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUserRole()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateUserRoleResponseValidationError{
					field:  "UserRole",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateUserRoleResponseValidationError{
					field:  "UserRole",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserRole()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateUserRoleResponseValidationError{
				field:  "UserRole",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateUserRoleResponseMultiError(errors)
	}

	return nil
}

// CreateUserRoleResponseMultiError is an error wrapping multiple validation
// errors returned by CreateUserRoleResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateUserRoleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserRoleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserRoleResponseMultiError) AllErrors() []error { return m }

// CreateUserRoleResponseValidationError is the validation error returned by
// CreateUserRoleResponse.Validate if the designated constraints aren't met.
type CreateUserRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserRoleResponseValidationError) ErrorName() string {
	return "CreateUserRoleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserRoleResponseValidationError{}

// Validate checks the field values on UpdateUserRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserRoleRequestMultiError, or nil if none found.
func (m *UpdateUserRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUserRole()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateUserRoleRequestValidationError{
					field:  "UserRole",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateUserRoleRequestValidationError{
					field:  "UserRole",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserRole()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserRoleRequestValidationError{
				field:  "UserRole",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateUserRoleRequestMultiError(errors)
	}

	return nil
}

// UpdateUserRoleRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateUserRoleRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateUserRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserRoleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserRoleRequestMultiError) AllErrors() []error { return m }

// UpdateUserRoleRequestValidationError is the validation error returned by
// UpdateUserRoleRequest.Validate if the designated constraints aren't met.
type UpdateUserRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserRoleRequestValidationError) ErrorName() string {
	return "UpdateUserRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserRoleRequestValidationError{}

// Validate checks the field values on UpdateUserRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserRoleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserRoleResponseMultiError, or nil if none found.
func (m *UpdateUserRoleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserRoleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUserRole()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateUserRoleResponseValidationError{
					field:  "UserRole",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateUserRoleResponseValidationError{
					field:  "UserRole",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserRole()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserRoleResponseValidationError{
				field:  "UserRole",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateUserRoleResponseMultiError(errors)
	}

	return nil
}

// UpdateUserRoleResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateUserRoleResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateUserRoleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserRoleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserRoleResponseMultiError) AllErrors() []error { return m }

// UpdateUserRoleResponseValidationError is the validation error returned by
// UpdateUserRoleResponse.Validate if the designated constraints aren't met.
type UpdateUserRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserRoleResponseValidationError) ErrorName() string {
	return "UpdateUserRoleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserRoleResponseValidationError{}

// Validate checks the field values on DeleteUserRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserRoleRequestMultiError, or nil if none found.
func (m *DeleteUserRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteUserRoleRequestMultiError(errors)
	}

	return nil
}

// DeleteUserRoleRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteUserRoleRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteUserRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserRoleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserRoleRequestMultiError) AllErrors() []error { return m }

// DeleteUserRoleRequestValidationError is the validation error returned by
// DeleteUserRoleRequest.Validate if the designated constraints aren't met.
type DeleteUserRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserRoleRequestValidationError) ErrorName() string {
	return "DeleteUserRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserRoleRequestValidationError{}

// Validate checks the field values on DeleteUserRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserRoleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserRoleResponseMultiError, or nil if none found.
func (m *DeleteUserRoleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserRoleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteUserRoleResponseMultiError(errors)
	}

	return nil
}

// DeleteUserRoleResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteUserRoleResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteUserRoleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserRoleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserRoleResponseMultiError) AllErrors() []error { return m }

// DeleteUserRoleResponseValidationError is the validation error returned by
// DeleteUserRoleResponse.Validate if the designated constraints aren't met.
type DeleteUserRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserRoleResponseValidationError) ErrorName() string {
	return "DeleteUserRoleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserRoleResponseValidationError{}

// Validate checks the field values on AddUserRoleToUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddUserRoleToUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddUserRoleToUserRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddUserRoleToUserRequestMultiError, or nil if none found.
func (m *AddUserRoleToUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddUserRoleToUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for UserRoleId

	if len(errors) > 0 {
		return AddUserRoleToUserRequestMultiError(errors)
	}

	return nil
}

// AddUserRoleToUserRequestMultiError is an error wrapping multiple validation
// errors returned by AddUserRoleToUserRequest.ValidateAll() if the designated
// constraints aren't met.
type AddUserRoleToUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddUserRoleToUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddUserRoleToUserRequestMultiError) AllErrors() []error { return m }

// AddUserRoleToUserRequestValidationError is the validation error returned by
// AddUserRoleToUserRequest.Validate if the designated constraints aren't met.
type AddUserRoleToUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddUserRoleToUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddUserRoleToUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddUserRoleToUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddUserRoleToUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddUserRoleToUserRequestValidationError) ErrorName() string {
	return "AddUserRoleToUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddUserRoleToUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddUserRoleToUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddUserRoleToUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddUserRoleToUserRequestValidationError{}

// Validate checks the field values on AddUserRoleToUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddUserRoleToUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddUserRoleToUserResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddUserRoleToUserResponseMultiError, or nil if none found.
func (m *AddUserRoleToUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddUserRoleToUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddUserRoleToUserResponseMultiError(errors)
	}

	return nil
}

// AddUserRoleToUserResponseMultiError is an error wrapping multiple validation
// errors returned by AddUserRoleToUserResponse.ValidateAll() if the
// designated constraints aren't met.
type AddUserRoleToUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddUserRoleToUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddUserRoleToUserResponseMultiError) AllErrors() []error { return m }

// AddUserRoleToUserResponseValidationError is the validation error returned by
// AddUserRoleToUserResponse.Validate if the designated constraints aren't met.
type AddUserRoleToUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddUserRoleToUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddUserRoleToUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddUserRoleToUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddUserRoleToUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddUserRoleToUserResponseValidationError) ErrorName() string {
	return "AddUserRoleToUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddUserRoleToUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddUserRoleToUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddUserRoleToUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddUserRoleToUserResponseValidationError{}

// Validate checks the field values on RemoveUserRoleFromUserRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveUserRoleFromUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveUserRoleFromUserRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RemoveUserRoleFromUserRequestMultiError, or nil if none found.
func (m *RemoveUserRoleFromUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveUserRoleFromUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for UserRoleId

	if len(errors) > 0 {
		return RemoveUserRoleFromUserRequestMultiError(errors)
	}

	return nil
}

// RemoveUserRoleFromUserRequestMultiError is an error wrapping multiple
// validation errors returned by RemoveUserRoleFromUserRequest.ValidateAll()
// if the designated constraints aren't met.
type RemoveUserRoleFromUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveUserRoleFromUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveUserRoleFromUserRequestMultiError) AllErrors() []error { return m }

// RemoveUserRoleFromUserRequestValidationError is the validation error
// returned by RemoveUserRoleFromUserRequest.Validate if the designated
// constraints aren't met.
type RemoveUserRoleFromUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveUserRoleFromUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveUserRoleFromUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveUserRoleFromUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveUserRoleFromUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveUserRoleFromUserRequestValidationError) ErrorName() string {
	return "RemoveUserRoleFromUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveUserRoleFromUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveUserRoleFromUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveUserRoleFromUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveUserRoleFromUserRequestValidationError{}

// Validate checks the field values on RemoveUserRoleFromUserResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveUserRoleFromUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveUserRoleFromUserResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RemoveUserRoleFromUserResponseMultiError, or nil if none found.
func (m *RemoveUserRoleFromUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveUserRoleFromUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RemoveUserRoleFromUserResponseMultiError(errors)
	}

	return nil
}

// RemoveUserRoleFromUserResponseMultiError is an error wrapping multiple
// validation errors returned by RemoveUserRoleFromUserResponse.ValidateAll()
// if the designated constraints aren't met.
type RemoveUserRoleFromUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveUserRoleFromUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveUserRoleFromUserResponseMultiError) AllErrors() []error { return m }

// RemoveUserRoleFromUserResponseValidationError is the validation error
// returned by RemoveUserRoleFromUserResponse.Validate if the designated
// constraints aren't met.
type RemoveUserRoleFromUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveUserRoleFromUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveUserRoleFromUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveUserRoleFromUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveUserRoleFromUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveUserRoleFromUserResponseValidationError) ErrorName() string {
	return "RemoveUserRoleFromUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveUserRoleFromUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveUserRoleFromUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveUserRoleFromUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveUserRoleFromUserResponseValidationError{}

// Validate checks the field values on GetUserRoleListOfUserListRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetUserRoleListOfUserListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserRoleListOfUserListRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetUserRoleListOfUserListRequestMultiError, or nil if none found.
func (m *GetUserRoleListOfUserListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserRoleListOfUserListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetUserRoleListOfUserListRequestMultiError(errors)
	}

	return nil
}

// GetUserRoleListOfUserListRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetUserRoleListOfUserListRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUserRoleListOfUserListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserRoleListOfUserListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserRoleListOfUserListRequestMultiError) AllErrors() []error { return m }

// GetUserRoleListOfUserListRequestValidationError is the validation error
// returned by GetUserRoleListOfUserListRequest.Validate if the designated
// constraints aren't met.
type GetUserRoleListOfUserListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserRoleListOfUserListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserRoleListOfUserListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserRoleListOfUserListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserRoleListOfUserListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserRoleListOfUserListRequestValidationError) ErrorName() string {
	return "GetUserRoleListOfUserListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserRoleListOfUserListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserRoleListOfUserListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserRoleListOfUserListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserRoleListOfUserListRequestValidationError{}

// Validate checks the field values on GetUserRoleListOfUserListResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetUserRoleListOfUserListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserRoleListOfUserListResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetUserRoleListOfUserListResponseMultiError, or nil if none found.
func (m *GetUserRoleListOfUserListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserRoleListOfUserListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUserRoleListOfUserList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserRoleListOfUserListResponseValidationError{
						field:  fmt.Sprintf("UserRoleListOfUserList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserRoleListOfUserListResponseValidationError{
						field:  fmt.Sprintf("UserRoleListOfUserList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserRoleListOfUserListResponseValidationError{
					field:  fmt.Sprintf("UserRoleListOfUserList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetUserRoleListOfUserListResponseMultiError(errors)
	}

	return nil
}

// GetUserRoleListOfUserListResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetUserRoleListOfUserListResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUserRoleListOfUserListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserRoleListOfUserListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserRoleListOfUserListResponseMultiError) AllErrors() []error { return m }

// GetUserRoleListOfUserListResponseValidationError is the validation error
// returned by GetUserRoleListOfUserListResponse.Validate if the designated
// constraints aren't met.
type GetUserRoleListOfUserListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserRoleListOfUserListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserRoleListOfUserListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserRoleListOfUserListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserRoleListOfUserListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserRoleListOfUserListResponseValidationError) ErrorName() string {
	return "GetUserRoleListOfUserListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserRoleListOfUserListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserRoleListOfUserListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserRoleListOfUserListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserRoleListOfUserListResponseValidationError{}

// Validate checks the field values on CreateUserPermissionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateUserPermissionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserPermissionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserPermissionRequestMultiError, or nil if none found.
func (m *CreateUserPermissionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserPermissionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PermissionName

	// no validation rules for Description

	if len(errors) > 0 {
		return CreateUserPermissionRequestMultiError(errors)
	}

	return nil
}

// CreateUserPermissionRequestMultiError is an error wrapping multiple
// validation errors returned by CreateUserPermissionRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateUserPermissionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserPermissionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserPermissionRequestMultiError) AllErrors() []error { return m }

// CreateUserPermissionRequestValidationError is the validation error returned
// by CreateUserPermissionRequest.Validate if the designated constraints
// aren't met.
type CreateUserPermissionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserPermissionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserPermissionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserPermissionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserPermissionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserPermissionRequestValidationError) ErrorName() string {
	return "CreateUserPermissionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserPermissionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserPermissionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserPermissionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserPermissionRequestValidationError{}

// Validate checks the field values on CreateUserPermissionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateUserPermissionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserPermissionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserPermissionResponseMultiError, or nil if none found.
func (m *CreateUserPermissionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserPermissionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUserPermission()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateUserPermissionResponseValidationError{
					field:  "UserPermission",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateUserPermissionResponseValidationError{
					field:  "UserPermission",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserPermission()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateUserPermissionResponseValidationError{
				field:  "UserPermission",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateUserPermissionResponseMultiError(errors)
	}

	return nil
}

// CreateUserPermissionResponseMultiError is an error wrapping multiple
// validation errors returned by CreateUserPermissionResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateUserPermissionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserPermissionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserPermissionResponseMultiError) AllErrors() []error { return m }

// CreateUserPermissionResponseValidationError is the validation error returned
// by CreateUserPermissionResponse.Validate if the designated constraints
// aren't met.
type CreateUserPermissionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserPermissionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserPermissionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserPermissionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserPermissionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserPermissionResponseValidationError) ErrorName() string {
	return "CreateUserPermissionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserPermissionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserPermissionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserPermissionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserPermissionResponseValidationError{}

// Validate checks the field values on UpdateUserPermissionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserPermissionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserPermissionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserPermissionRequestMultiError, or nil if none found.
func (m *UpdateUserPermissionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserPermissionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUserPermission()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateUserPermissionRequestValidationError{
					field:  "UserPermission",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateUserPermissionRequestValidationError{
					field:  "UserPermission",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserPermission()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserPermissionRequestValidationError{
				field:  "UserPermission",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateUserPermissionRequestMultiError(errors)
	}

	return nil
}

// UpdateUserPermissionRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateUserPermissionRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateUserPermissionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserPermissionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserPermissionRequestMultiError) AllErrors() []error { return m }

// UpdateUserPermissionRequestValidationError is the validation error returned
// by UpdateUserPermissionRequest.Validate if the designated constraints
// aren't met.
type UpdateUserPermissionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserPermissionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserPermissionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserPermissionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserPermissionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserPermissionRequestValidationError) ErrorName() string {
	return "UpdateUserPermissionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserPermissionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserPermissionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserPermissionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserPermissionRequestValidationError{}

// Validate checks the field values on UpdateUserPermissionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserPermissionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserPermissionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserPermissionResponseMultiError, or nil if none found.
func (m *UpdateUserPermissionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserPermissionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUserPermission()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateUserPermissionResponseValidationError{
					field:  "UserPermission",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateUserPermissionResponseValidationError{
					field:  "UserPermission",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserPermission()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserPermissionResponseValidationError{
				field:  "UserPermission",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateUserPermissionResponseMultiError(errors)
	}

	return nil
}

// UpdateUserPermissionResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateUserPermissionResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateUserPermissionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserPermissionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserPermissionResponseMultiError) AllErrors() []error { return m }

// UpdateUserPermissionResponseValidationError is the validation error returned
// by UpdateUserPermissionResponse.Validate if the designated constraints
// aren't met.
type UpdateUserPermissionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserPermissionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserPermissionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserPermissionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserPermissionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserPermissionResponseValidationError) ErrorName() string {
	return "UpdateUserPermissionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserPermissionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserPermissionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserPermissionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserPermissionResponseValidationError{}

// Validate checks the field values on DeleteUserPermissionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserPermissionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserPermissionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserPermissionRequestMultiError, or nil if none found.
func (m *DeleteUserPermissionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserPermissionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteUserPermissionRequestMultiError(errors)
	}

	return nil
}

// DeleteUserPermissionRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteUserPermissionRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteUserPermissionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserPermissionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserPermissionRequestMultiError) AllErrors() []error { return m }

// DeleteUserPermissionRequestValidationError is the validation error returned
// by DeleteUserPermissionRequest.Validate if the designated constraints
// aren't met.
type DeleteUserPermissionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserPermissionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserPermissionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserPermissionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserPermissionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserPermissionRequestValidationError) ErrorName() string {
	return "DeleteUserPermissionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserPermissionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserPermissionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserPermissionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserPermissionRequestValidationError{}

// Validate checks the field values on DeleteUserPermissionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserPermissionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserPermissionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserPermissionResponseMultiError, or nil if none found.
func (m *DeleteUserPermissionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserPermissionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteUserPermissionResponseMultiError(errors)
	}

	return nil
}

// DeleteUserPermissionResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteUserPermissionResponse.ValidateAll() if
// the designated constraints aren't met.
type DeleteUserPermissionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserPermissionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserPermissionResponseMultiError) AllErrors() []error { return m }

// DeleteUserPermissionResponseValidationError is the validation error returned
// by DeleteUserPermissionResponse.Validate if the designated constraints
// aren't met.
type DeleteUserPermissionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserPermissionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserPermissionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserPermissionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserPermissionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserPermissionResponseValidationError) ErrorName() string {
	return "DeleteUserPermissionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserPermissionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserPermissionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserPermissionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserPermissionResponseValidationError{}

// Validate checks the field values on GetUserPermissionListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserPermissionListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserPermissionListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserPermissionListRequestMultiError, or nil if none found.
func (m *GetUserPermissionListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserPermissionListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetUserPermissionListRequestMultiError(errors)
	}

	return nil
}

// GetUserPermissionListRequestMultiError is an error wrapping multiple
// validation errors returned by GetUserPermissionListRequest.ValidateAll() if
// the designated constraints aren't met.
type GetUserPermissionListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserPermissionListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserPermissionListRequestMultiError) AllErrors() []error { return m }

// GetUserPermissionListRequestValidationError is the validation error returned
// by GetUserPermissionListRequest.Validate if the designated constraints
// aren't met.
type GetUserPermissionListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserPermissionListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserPermissionListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserPermissionListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserPermissionListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserPermissionListRequestValidationError) ErrorName() string {
	return "GetUserPermissionListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserPermissionListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserPermissionListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserPermissionListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserPermissionListRequestValidationError{}

// Validate checks the field values on GetUserPermissionListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserPermissionListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserPermissionListResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetUserPermissionListResponseMultiError, or nil if none found.
func (m *GetUserPermissionListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserPermissionListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUserPermissionList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserPermissionListResponseValidationError{
						field:  fmt.Sprintf("UserPermissionList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserPermissionListResponseValidationError{
						field:  fmt.Sprintf("UserPermissionList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserPermissionListResponseValidationError{
					field:  fmt.Sprintf("UserPermissionList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetUserPermissionListResponseMultiError(errors)
	}

	return nil
}

// GetUserPermissionListResponseMultiError is an error wrapping multiple
// validation errors returned by GetUserPermissionListResponse.ValidateAll()
// if the designated constraints aren't met.
type GetUserPermissionListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserPermissionListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserPermissionListResponseMultiError) AllErrors() []error { return m }

// GetUserPermissionListResponseValidationError is the validation error
// returned by GetUserPermissionListResponse.Validate if the designated
// constraints aren't met.
type GetUserPermissionListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserPermissionListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserPermissionListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserPermissionListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserPermissionListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserPermissionListResponseValidationError) ErrorName() string {
	return "GetUserPermissionListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserPermissionListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserPermissionListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserPermissionListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserPermissionListResponseValidationError{}

// Validate checks the field values on AddUserPermissionToUserRoleRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AddUserPermissionToUserRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddUserPermissionToUserRoleRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AddUserPermissionToUserRoleRequestMultiError, or nil if none found.
func (m *AddUserPermissionToUserRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddUserPermissionToUserRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserRoleId

	// no validation rules for UserPermissionId

	if len(errors) > 0 {
		return AddUserPermissionToUserRoleRequestMultiError(errors)
	}

	return nil
}

// AddUserPermissionToUserRoleRequestMultiError is an error wrapping multiple
// validation errors returned by
// AddUserPermissionToUserRoleRequest.ValidateAll() if the designated
// constraints aren't met.
type AddUserPermissionToUserRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddUserPermissionToUserRoleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddUserPermissionToUserRoleRequestMultiError) AllErrors() []error { return m }

// AddUserPermissionToUserRoleRequestValidationError is the validation error
// returned by AddUserPermissionToUserRoleRequest.Validate if the designated
// constraints aren't met.
type AddUserPermissionToUserRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddUserPermissionToUserRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddUserPermissionToUserRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddUserPermissionToUserRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddUserPermissionToUserRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddUserPermissionToUserRoleRequestValidationError) ErrorName() string {
	return "AddUserPermissionToUserRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddUserPermissionToUserRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddUserPermissionToUserRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddUserPermissionToUserRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddUserPermissionToUserRoleRequestValidationError{}

// Validate checks the field values on AddUserPermissionToUserRoleResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AddUserPermissionToUserRoleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddUserPermissionToUserRoleResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AddUserPermissionToUserRoleResponseMultiError, or nil if none found.
func (m *AddUserPermissionToUserRoleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddUserPermissionToUserRoleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddUserPermissionToUserRoleResponseMultiError(errors)
	}

	return nil
}

// AddUserPermissionToUserRoleResponseMultiError is an error wrapping multiple
// validation errors returned by
// AddUserPermissionToUserRoleResponse.ValidateAll() if the designated
// constraints aren't met.
type AddUserPermissionToUserRoleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddUserPermissionToUserRoleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddUserPermissionToUserRoleResponseMultiError) AllErrors() []error { return m }

// AddUserPermissionToUserRoleResponseValidationError is the validation error
// returned by AddUserPermissionToUserRoleResponse.Validate if the designated
// constraints aren't met.
type AddUserPermissionToUserRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddUserPermissionToUserRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddUserPermissionToUserRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddUserPermissionToUserRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddUserPermissionToUserRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddUserPermissionToUserRoleResponseValidationError) ErrorName() string {
	return "AddUserPermissionToUserRoleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddUserPermissionToUserRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddUserPermissionToUserRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddUserPermissionToUserRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddUserPermissionToUserRoleResponseValidationError{}

// Validate checks the field values on RemoveUserPermissionFromUserRoleRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *RemoveUserPermissionFromUserRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RemoveUserPermissionFromUserRoleRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// RemoveUserPermissionFromUserRoleRequestMultiError, or nil if none found.
func (m *RemoveUserPermissionFromUserRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveUserPermissionFromUserRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserRoleId

	// no validation rules for UserPermissionId

	if len(errors) > 0 {
		return RemoveUserPermissionFromUserRoleRequestMultiError(errors)
	}

	return nil
}

// RemoveUserPermissionFromUserRoleRequestMultiError is an error wrapping
// multiple validation errors returned by
// RemoveUserPermissionFromUserRoleRequest.ValidateAll() if the designated
// constraints aren't met.
type RemoveUserPermissionFromUserRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveUserPermissionFromUserRoleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveUserPermissionFromUserRoleRequestMultiError) AllErrors() []error { return m }

// RemoveUserPermissionFromUserRoleRequestValidationError is the validation
// error returned by RemoveUserPermissionFromUserRoleRequest.Validate if the
// designated constraints aren't met.
type RemoveUserPermissionFromUserRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveUserPermissionFromUserRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveUserPermissionFromUserRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveUserPermissionFromUserRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveUserPermissionFromUserRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveUserPermissionFromUserRoleRequestValidationError) ErrorName() string {
	return "RemoveUserPermissionFromUserRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveUserPermissionFromUserRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveUserPermissionFromUserRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveUserPermissionFromUserRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveUserPermissionFromUserRoleRequestValidationError{}

// Validate checks the field values on RemoveUserPermissionFromUserRoleResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *RemoveUserPermissionFromUserRoleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RemoveUserPermissionFromUserRoleResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// RemoveUserPermissionFromUserRoleResponseMultiError, or nil if none found.
func (m *RemoveUserPermissionFromUserRoleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveUserPermissionFromUserRoleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RemoveUserPermissionFromUserRoleResponseMultiError(errors)
	}

	return nil
}

// RemoveUserPermissionFromUserRoleResponseMultiError is an error wrapping
// multiple validation errors returned by
// RemoveUserPermissionFromUserRoleResponse.ValidateAll() if the designated
// constraints aren't met.
type RemoveUserPermissionFromUserRoleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveUserPermissionFromUserRoleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveUserPermissionFromUserRoleResponseMultiError) AllErrors() []error { return m }

// RemoveUserPermissionFromUserRoleResponseValidationError is the validation
// error returned by RemoveUserPermissionFromUserRoleResponse.Validate if the
// designated constraints aren't met.
type RemoveUserPermissionFromUserRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveUserPermissionFromUserRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveUserPermissionFromUserRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveUserPermissionFromUserRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveUserPermissionFromUserRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveUserPermissionFromUserRoleResponseValidationError) ErrorName() string {
	return "RemoveUserPermissionFromUserRoleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveUserPermissionFromUserRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveUserPermissionFromUserRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveUserPermissionFromUserRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveUserPermissionFromUserRoleResponseValidationError{}

// Validate checks the field values on
// GetUserPermissionListOfUserRoleListRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserPermissionListOfUserRoleListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetUserPermissionListOfUserRoleListRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetUserPermissionListOfUserRoleListRequestMultiError, or nil if none found.
func (m *GetUserPermissionListOfUserRoleListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserPermissionListOfUserRoleListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetUserPermissionListOfUserRoleListRequestMultiError(errors)
	}

	return nil
}

// GetUserPermissionListOfUserRoleListRequestMultiError is an error wrapping
// multiple validation errors returned by
// GetUserPermissionListOfUserRoleListRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUserPermissionListOfUserRoleListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserPermissionListOfUserRoleListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserPermissionListOfUserRoleListRequestMultiError) AllErrors() []error { return m }

// GetUserPermissionListOfUserRoleListRequestValidationError is the validation
// error returned by GetUserPermissionListOfUserRoleListRequest.Validate if
// the designated constraints aren't met.
type GetUserPermissionListOfUserRoleListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserPermissionListOfUserRoleListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserPermissionListOfUserRoleListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserPermissionListOfUserRoleListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserPermissionListOfUserRoleListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserPermissionListOfUserRoleListRequestValidationError) ErrorName() string {
	return "GetUserPermissionListOfUserRoleListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserPermissionListOfUserRoleListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserPermissionListOfUserRoleListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserPermissionListOfUserRoleListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserPermissionListOfUserRoleListRequestValidationError{}

// Validate checks the field values on
// GetUserPermissionListOfUserRoleListResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserPermissionListOfUserRoleListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetUserPermissionListOfUserRoleListResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetUserPermissionListOfUserRoleListResponseMultiError, or nil if none found.
func (m *GetUserPermissionListOfUserRoleListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserPermissionListOfUserRoleListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUserPermissionListOfUserRoleList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserPermissionListOfUserRoleListResponseValidationError{
						field:  fmt.Sprintf("UserPermissionListOfUserRoleList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserPermissionListOfUserRoleListResponseValidationError{
						field:  fmt.Sprintf("UserPermissionListOfUserRoleList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserPermissionListOfUserRoleListResponseValidationError{
					field:  fmt.Sprintf("UserPermissionListOfUserRoleList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetUserPermissionListOfUserRoleListResponseMultiError(errors)
	}

	return nil
}

// GetUserPermissionListOfUserRoleListResponseMultiError is an error wrapping
// multiple validation errors returned by
// GetUserPermissionListOfUserRoleListResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUserPermissionListOfUserRoleListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserPermissionListOfUserRoleListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserPermissionListOfUserRoleListResponseMultiError) AllErrors() []error { return m }

// GetUserPermissionListOfUserRoleListResponseValidationError is the validation
// error returned by GetUserPermissionListOfUserRoleListResponse.Validate if
// the designated constraints aren't met.
type GetUserPermissionListOfUserRoleListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserPermissionListOfUserRoleListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserPermissionListOfUserRoleListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserPermissionListOfUserRoleListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserPermissionListOfUserRoleListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserPermissionListOfUserRoleListResponseValidationError) ErrorName() string {
	return "GetUserPermissionListOfUserRoleListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserPermissionListOfUserRoleListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserPermissionListOfUserRoleListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserPermissionListOfUserRoleListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserPermissionListOfUserRoleListResponseValidationError{}

// Validate checks the field values on GetUserPermissionListOfUserRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetUserPermissionListOfUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserPermissionListOfUserRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetUserPermissionListOfUserRequestMultiError, or nil if none found.
func (m *GetUserPermissionListOfUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserPermissionListOfUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetUserPermissionListOfUserRequestMultiError(errors)
	}

	return nil
}

// GetUserPermissionListOfUserRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetUserPermissionListOfUserRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUserPermissionListOfUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserPermissionListOfUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserPermissionListOfUserRequestMultiError) AllErrors() []error { return m }

// GetUserPermissionListOfUserRequestValidationError is the validation error
// returned by GetUserPermissionListOfUserRequest.Validate if the designated
// constraints aren't met.
type GetUserPermissionListOfUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserPermissionListOfUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserPermissionListOfUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserPermissionListOfUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserPermissionListOfUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserPermissionListOfUserRequestValidationError) ErrorName() string {
	return "GetUserPermissionListOfUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserPermissionListOfUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserPermissionListOfUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserPermissionListOfUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserPermissionListOfUserRequestValidationError{}

// Validate checks the field values on GetUserPermissionListOfUserResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetUserPermissionListOfUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserPermissionListOfUserResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetUserPermissionListOfUserResponseMultiError, or nil if none found.
func (m *GetUserPermissionListOfUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserPermissionListOfUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUserPermissionList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserPermissionListOfUserResponseValidationError{
						field:  fmt.Sprintf("UserPermissionList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserPermissionListOfUserResponseValidationError{
						field:  fmt.Sprintf("UserPermissionList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserPermissionListOfUserResponseValidationError{
					field:  fmt.Sprintf("UserPermissionList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetUserPermissionListOfUserResponseMultiError(errors)
	}

	return nil
}

// GetUserPermissionListOfUserResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetUserPermissionListOfUserResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUserPermissionListOfUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserPermissionListOfUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserPermissionListOfUserResponseMultiError) AllErrors() []error { return m }

// GetUserPermissionListOfUserResponseValidationError is the validation error
// returned by GetUserPermissionListOfUserResponse.Validate if the designated
// constraints aren't met.
type GetUserPermissionListOfUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserPermissionListOfUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserPermissionListOfUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserPermissionListOfUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserPermissionListOfUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserPermissionListOfUserResponseValidationError) ErrorName() string {
	return "GetUserPermissionListOfUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserPermissionListOfUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserPermissionListOfUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserPermissionListOfUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserPermissionListOfUserResponseValidationError{}
